
ECU-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  080080bc  080080bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c1ac  0800c1ac  0000c1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c224  0800c224  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c224  0800c224  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c224  0800c224  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c224  0800c224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c228  0800c228  0000c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000400  0800c22c  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000040c  0800c238  0001040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800c238  000104bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daf2  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002179  00000000  00000000  0001df26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000200a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00020bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd64  00000000  00000000  000215a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd1e  00000000  00000000  0003d30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a58de  00000000  00000000  0004b02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  000f095c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080bc <__do_global_dtors_aux>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <__do_global_dtors_aux+0x1c>)
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <__do_global_dtors_aux+0x1a>
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <__do_global_dtors_aux+0x20>)
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <__do_global_dtors_aux+0x16>
 80080cc:	4804      	ldr	r0, [pc, #16]	; (80080e0 <__do_global_dtors_aux+0x24>)
 80080ce:	e000      	b.n	80080d2 <__do_global_dtors_aux+0x16>
 80080d0:	bf00      	nop
 80080d2:	2301      	movs	r3, #1
 80080d4:	7023      	strb	r3, [r4, #0]
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	2000040c 	.word	0x2000040c
 80080dc:	00000000 	.word	0x00000000
 80080e0:	0800c194 	.word	0x0800c194

080080e4 <frame_dummy>:
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <frame_dummy+0x14>)
 80080e6:	b510      	push	{r4, lr}
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <frame_dummy+0x10>
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <frame_dummy+0x18>)
 80080ee:	4804      	ldr	r0, [pc, #16]	; (8008100 <frame_dummy+0x1c>)
 80080f0:	e000      	b.n	80080f4 <frame_dummy+0x10>
 80080f2:	bf00      	nop
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	00000000 	.word	0x00000000
 80080fc:	20000410 	.word	0x20000410
 8008100:	0800c194 	.word	0x0800c194

08008104 <__udivsi3>:
 8008104:	2200      	movs	r2, #0
 8008106:	0843      	lsrs	r3, r0, #1
 8008108:	428b      	cmp	r3, r1
 800810a:	d374      	bcc.n	80081f6 <__udivsi3+0xf2>
 800810c:	0903      	lsrs	r3, r0, #4
 800810e:	428b      	cmp	r3, r1
 8008110:	d35f      	bcc.n	80081d2 <__udivsi3+0xce>
 8008112:	0a03      	lsrs	r3, r0, #8
 8008114:	428b      	cmp	r3, r1
 8008116:	d344      	bcc.n	80081a2 <__udivsi3+0x9e>
 8008118:	0b03      	lsrs	r3, r0, #12
 800811a:	428b      	cmp	r3, r1
 800811c:	d328      	bcc.n	8008170 <__udivsi3+0x6c>
 800811e:	0c03      	lsrs	r3, r0, #16
 8008120:	428b      	cmp	r3, r1
 8008122:	d30d      	bcc.n	8008140 <__udivsi3+0x3c>
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	0209      	lsls	r1, r1, #8
 8008128:	ba12      	rev	r2, r2
 800812a:	0c03      	lsrs	r3, r0, #16
 800812c:	428b      	cmp	r3, r1
 800812e:	d302      	bcc.n	8008136 <__udivsi3+0x32>
 8008130:	1212      	asrs	r2, r2, #8
 8008132:	0209      	lsls	r1, r1, #8
 8008134:	d065      	beq.n	8008202 <__udivsi3+0xfe>
 8008136:	0b03      	lsrs	r3, r0, #12
 8008138:	428b      	cmp	r3, r1
 800813a:	d319      	bcc.n	8008170 <__udivsi3+0x6c>
 800813c:	e000      	b.n	8008140 <__udivsi3+0x3c>
 800813e:	0a09      	lsrs	r1, r1, #8
 8008140:	0bc3      	lsrs	r3, r0, #15
 8008142:	428b      	cmp	r3, r1
 8008144:	d301      	bcc.n	800814a <__udivsi3+0x46>
 8008146:	03cb      	lsls	r3, r1, #15
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	4152      	adcs	r2, r2
 800814c:	0b83      	lsrs	r3, r0, #14
 800814e:	428b      	cmp	r3, r1
 8008150:	d301      	bcc.n	8008156 <__udivsi3+0x52>
 8008152:	038b      	lsls	r3, r1, #14
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	4152      	adcs	r2, r2
 8008158:	0b43      	lsrs	r3, r0, #13
 800815a:	428b      	cmp	r3, r1
 800815c:	d301      	bcc.n	8008162 <__udivsi3+0x5e>
 800815e:	034b      	lsls	r3, r1, #13
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	4152      	adcs	r2, r2
 8008164:	0b03      	lsrs	r3, r0, #12
 8008166:	428b      	cmp	r3, r1
 8008168:	d301      	bcc.n	800816e <__udivsi3+0x6a>
 800816a:	030b      	lsls	r3, r1, #12
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	4152      	adcs	r2, r2
 8008170:	0ac3      	lsrs	r3, r0, #11
 8008172:	428b      	cmp	r3, r1
 8008174:	d301      	bcc.n	800817a <__udivsi3+0x76>
 8008176:	02cb      	lsls	r3, r1, #11
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	4152      	adcs	r2, r2
 800817c:	0a83      	lsrs	r3, r0, #10
 800817e:	428b      	cmp	r3, r1
 8008180:	d301      	bcc.n	8008186 <__udivsi3+0x82>
 8008182:	028b      	lsls	r3, r1, #10
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	4152      	adcs	r2, r2
 8008188:	0a43      	lsrs	r3, r0, #9
 800818a:	428b      	cmp	r3, r1
 800818c:	d301      	bcc.n	8008192 <__udivsi3+0x8e>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	4152      	adcs	r2, r2
 8008194:	0a03      	lsrs	r3, r0, #8
 8008196:	428b      	cmp	r3, r1
 8008198:	d301      	bcc.n	800819e <__udivsi3+0x9a>
 800819a:	020b      	lsls	r3, r1, #8
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	4152      	adcs	r2, r2
 80081a0:	d2cd      	bcs.n	800813e <__udivsi3+0x3a>
 80081a2:	09c3      	lsrs	r3, r0, #7
 80081a4:	428b      	cmp	r3, r1
 80081a6:	d301      	bcc.n	80081ac <__udivsi3+0xa8>
 80081a8:	01cb      	lsls	r3, r1, #7
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	4152      	adcs	r2, r2
 80081ae:	0983      	lsrs	r3, r0, #6
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d301      	bcc.n	80081b8 <__udivsi3+0xb4>
 80081b4:	018b      	lsls	r3, r1, #6
 80081b6:	1ac0      	subs	r0, r0, r3
 80081b8:	4152      	adcs	r2, r2
 80081ba:	0943      	lsrs	r3, r0, #5
 80081bc:	428b      	cmp	r3, r1
 80081be:	d301      	bcc.n	80081c4 <__udivsi3+0xc0>
 80081c0:	014b      	lsls	r3, r1, #5
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	4152      	adcs	r2, r2
 80081c6:	0903      	lsrs	r3, r0, #4
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d301      	bcc.n	80081d0 <__udivsi3+0xcc>
 80081cc:	010b      	lsls	r3, r1, #4
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	4152      	adcs	r2, r2
 80081d2:	08c3      	lsrs	r3, r0, #3
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d301      	bcc.n	80081dc <__udivsi3+0xd8>
 80081d8:	00cb      	lsls	r3, r1, #3
 80081da:	1ac0      	subs	r0, r0, r3
 80081dc:	4152      	adcs	r2, r2
 80081de:	0883      	lsrs	r3, r0, #2
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d301      	bcc.n	80081e8 <__udivsi3+0xe4>
 80081e4:	008b      	lsls	r3, r1, #2
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	4152      	adcs	r2, r2
 80081ea:	0843      	lsrs	r3, r0, #1
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d301      	bcc.n	80081f4 <__udivsi3+0xf0>
 80081f0:	004b      	lsls	r3, r1, #1
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	4152      	adcs	r2, r2
 80081f6:	1a41      	subs	r1, r0, r1
 80081f8:	d200      	bcs.n	80081fc <__udivsi3+0xf8>
 80081fa:	4601      	mov	r1, r0
 80081fc:	4152      	adcs	r2, r2
 80081fe:	4610      	mov	r0, r2
 8008200:	4770      	bx	lr
 8008202:	e7ff      	b.n	8008204 <__udivsi3+0x100>
 8008204:	b501      	push	{r0, lr}
 8008206:	2000      	movs	r0, #0
 8008208:	f000 f806 	bl	8008218 <__aeabi_idiv0>
 800820c:	bd02      	pop	{r1, pc}
 800820e:	46c0      	nop			; (mov r8, r8)

08008210 <__aeabi_uidivmod>:
 8008210:	2900      	cmp	r1, #0
 8008212:	d0f7      	beq.n	8008204 <__udivsi3+0x100>
 8008214:	e776      	b.n	8008104 <__udivsi3>
 8008216:	4770      	bx	lr

08008218 <__aeabi_idiv0>:
 8008218:	4770      	bx	lr
 800821a:	46c0      	nop			; (mov r8, r8)

0800821c <__aeabi_cfrcmple>:
 800821c:	4684      	mov	ip, r0
 800821e:	1c08      	adds	r0, r1, #0
 8008220:	4661      	mov	r1, ip
 8008222:	e7ff      	b.n	8008224 <__aeabi_cfcmpeq>

08008224 <__aeabi_cfcmpeq>:
 8008224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008226:	f000 f8a7 	bl	8008378 <__lesf2>
 800822a:	2800      	cmp	r0, #0
 800822c:	d401      	bmi.n	8008232 <__aeabi_cfcmpeq+0xe>
 800822e:	2100      	movs	r1, #0
 8008230:	42c8      	cmn	r0, r1
 8008232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08008234 <__aeabi_fcmpeq>:
 8008234:	b510      	push	{r4, lr}
 8008236:	f000 f82b 	bl	8008290 <__eqsf2>
 800823a:	4240      	negs	r0, r0
 800823c:	3001      	adds	r0, #1
 800823e:	bd10      	pop	{r4, pc}

08008240 <__aeabi_fcmplt>:
 8008240:	b510      	push	{r4, lr}
 8008242:	f000 f899 	bl	8008378 <__lesf2>
 8008246:	2800      	cmp	r0, #0
 8008248:	db01      	blt.n	800824e <__aeabi_fcmplt+0xe>
 800824a:	2000      	movs	r0, #0
 800824c:	bd10      	pop	{r4, pc}
 800824e:	2001      	movs	r0, #1
 8008250:	bd10      	pop	{r4, pc}
 8008252:	46c0      	nop			; (mov r8, r8)

08008254 <__aeabi_fcmple>:
 8008254:	b510      	push	{r4, lr}
 8008256:	f000 f88f 	bl	8008378 <__lesf2>
 800825a:	2800      	cmp	r0, #0
 800825c:	dd01      	ble.n	8008262 <__aeabi_fcmple+0xe>
 800825e:	2000      	movs	r0, #0
 8008260:	bd10      	pop	{r4, pc}
 8008262:	2001      	movs	r0, #1
 8008264:	bd10      	pop	{r4, pc}
 8008266:	46c0      	nop			; (mov r8, r8)

08008268 <__aeabi_fcmpgt>:
 8008268:	b510      	push	{r4, lr}
 800826a:	f000 f839 	bl	80082e0 <__gesf2>
 800826e:	2800      	cmp	r0, #0
 8008270:	dc01      	bgt.n	8008276 <__aeabi_fcmpgt+0xe>
 8008272:	2000      	movs	r0, #0
 8008274:	bd10      	pop	{r4, pc}
 8008276:	2001      	movs	r0, #1
 8008278:	bd10      	pop	{r4, pc}
 800827a:	46c0      	nop			; (mov r8, r8)

0800827c <__aeabi_fcmpge>:
 800827c:	b510      	push	{r4, lr}
 800827e:	f000 f82f 	bl	80082e0 <__gesf2>
 8008282:	2800      	cmp	r0, #0
 8008284:	da01      	bge.n	800828a <__aeabi_fcmpge+0xe>
 8008286:	2000      	movs	r0, #0
 8008288:	bd10      	pop	{r4, pc}
 800828a:	2001      	movs	r0, #1
 800828c:	bd10      	pop	{r4, pc}
 800828e:	46c0      	nop			; (mov r8, r8)

08008290 <__eqsf2>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	0042      	lsls	r2, r0, #1
 8008294:	024e      	lsls	r6, r1, #9
 8008296:	004c      	lsls	r4, r1, #1
 8008298:	0245      	lsls	r5, r0, #9
 800829a:	0a6d      	lsrs	r5, r5, #9
 800829c:	0e12      	lsrs	r2, r2, #24
 800829e:	0fc3      	lsrs	r3, r0, #31
 80082a0:	0a76      	lsrs	r6, r6, #9
 80082a2:	0e24      	lsrs	r4, r4, #24
 80082a4:	0fc9      	lsrs	r1, r1, #31
 80082a6:	2aff      	cmp	r2, #255	; 0xff
 80082a8:	d00f      	beq.n	80082ca <__eqsf2+0x3a>
 80082aa:	2cff      	cmp	r4, #255	; 0xff
 80082ac:	d011      	beq.n	80082d2 <__eqsf2+0x42>
 80082ae:	2001      	movs	r0, #1
 80082b0:	42a2      	cmp	r2, r4
 80082b2:	d000      	beq.n	80082b6 <__eqsf2+0x26>
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	42b5      	cmp	r5, r6
 80082b8:	d1fc      	bne.n	80082b4 <__eqsf2+0x24>
 80082ba:	428b      	cmp	r3, r1
 80082bc:	d00d      	beq.n	80082da <__eqsf2+0x4a>
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d1f8      	bne.n	80082b4 <__eqsf2+0x24>
 80082c2:	0028      	movs	r0, r5
 80082c4:	1e45      	subs	r5, r0, #1
 80082c6:	41a8      	sbcs	r0, r5
 80082c8:	e7f4      	b.n	80082b4 <__eqsf2+0x24>
 80082ca:	2001      	movs	r0, #1
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	d1f1      	bne.n	80082b4 <__eqsf2+0x24>
 80082d0:	e7eb      	b.n	80082aa <__eqsf2+0x1a>
 80082d2:	2001      	movs	r0, #1
 80082d4:	2e00      	cmp	r6, #0
 80082d6:	d1ed      	bne.n	80082b4 <__eqsf2+0x24>
 80082d8:	e7e9      	b.n	80082ae <__eqsf2+0x1e>
 80082da:	2000      	movs	r0, #0
 80082dc:	e7ea      	b.n	80082b4 <__eqsf2+0x24>
 80082de:	46c0      	nop			; (mov r8, r8)

080082e0 <__gesf2>:
 80082e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e2:	0042      	lsls	r2, r0, #1
 80082e4:	0246      	lsls	r6, r0, #9
 80082e6:	024d      	lsls	r5, r1, #9
 80082e8:	004c      	lsls	r4, r1, #1
 80082ea:	0fc3      	lsrs	r3, r0, #31
 80082ec:	0a76      	lsrs	r6, r6, #9
 80082ee:	0e12      	lsrs	r2, r2, #24
 80082f0:	0a6d      	lsrs	r5, r5, #9
 80082f2:	0e24      	lsrs	r4, r4, #24
 80082f4:	0fc8      	lsrs	r0, r1, #31
 80082f6:	2aff      	cmp	r2, #255	; 0xff
 80082f8:	d01f      	beq.n	800833a <__gesf2+0x5a>
 80082fa:	2cff      	cmp	r4, #255	; 0xff
 80082fc:	d010      	beq.n	8008320 <__gesf2+0x40>
 80082fe:	2a00      	cmp	r2, #0
 8008300:	d11f      	bne.n	8008342 <__gesf2+0x62>
 8008302:	4271      	negs	r1, r6
 8008304:	4171      	adcs	r1, r6
 8008306:	2c00      	cmp	r4, #0
 8008308:	d101      	bne.n	800830e <__gesf2+0x2e>
 800830a:	2d00      	cmp	r5, #0
 800830c:	d01e      	beq.n	800834c <__gesf2+0x6c>
 800830e:	2900      	cmp	r1, #0
 8008310:	d10e      	bne.n	8008330 <__gesf2+0x50>
 8008312:	4283      	cmp	r3, r0
 8008314:	d01e      	beq.n	8008354 <__gesf2+0x74>
 8008316:	2102      	movs	r1, #2
 8008318:	1e58      	subs	r0, r3, #1
 800831a:	4008      	ands	r0, r1
 800831c:	3801      	subs	r0, #1
 800831e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008320:	2d00      	cmp	r5, #0
 8008322:	d126      	bne.n	8008372 <__gesf2+0x92>
 8008324:	2a00      	cmp	r2, #0
 8008326:	d1f4      	bne.n	8008312 <__gesf2+0x32>
 8008328:	4271      	negs	r1, r6
 800832a:	4171      	adcs	r1, r6
 800832c:	2900      	cmp	r1, #0
 800832e:	d0f0      	beq.n	8008312 <__gesf2+0x32>
 8008330:	2800      	cmp	r0, #0
 8008332:	d1f4      	bne.n	800831e <__gesf2+0x3e>
 8008334:	2001      	movs	r0, #1
 8008336:	4240      	negs	r0, r0
 8008338:	e7f1      	b.n	800831e <__gesf2+0x3e>
 800833a:	2e00      	cmp	r6, #0
 800833c:	d119      	bne.n	8008372 <__gesf2+0x92>
 800833e:	2cff      	cmp	r4, #255	; 0xff
 8008340:	d0ee      	beq.n	8008320 <__gesf2+0x40>
 8008342:	2c00      	cmp	r4, #0
 8008344:	d1e5      	bne.n	8008312 <__gesf2+0x32>
 8008346:	2d00      	cmp	r5, #0
 8008348:	d1e3      	bne.n	8008312 <__gesf2+0x32>
 800834a:	e7e4      	b.n	8008316 <__gesf2+0x36>
 800834c:	2000      	movs	r0, #0
 800834e:	2e00      	cmp	r6, #0
 8008350:	d0e5      	beq.n	800831e <__gesf2+0x3e>
 8008352:	e7e0      	b.n	8008316 <__gesf2+0x36>
 8008354:	42a2      	cmp	r2, r4
 8008356:	dc05      	bgt.n	8008364 <__gesf2+0x84>
 8008358:	dbea      	blt.n	8008330 <__gesf2+0x50>
 800835a:	42ae      	cmp	r6, r5
 800835c:	d802      	bhi.n	8008364 <__gesf2+0x84>
 800835e:	d3e7      	bcc.n	8008330 <__gesf2+0x50>
 8008360:	2000      	movs	r0, #0
 8008362:	e7dc      	b.n	800831e <__gesf2+0x3e>
 8008364:	4241      	negs	r1, r0
 8008366:	4141      	adcs	r1, r0
 8008368:	4248      	negs	r0, r1
 800836a:	2102      	movs	r1, #2
 800836c:	4008      	ands	r0, r1
 800836e:	3801      	subs	r0, #1
 8008370:	e7d5      	b.n	800831e <__gesf2+0x3e>
 8008372:	2002      	movs	r0, #2
 8008374:	4240      	negs	r0, r0
 8008376:	e7d2      	b.n	800831e <__gesf2+0x3e>

08008378 <__lesf2>:
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	0042      	lsls	r2, r0, #1
 800837c:	0246      	lsls	r6, r0, #9
 800837e:	024d      	lsls	r5, r1, #9
 8008380:	004c      	lsls	r4, r1, #1
 8008382:	0fc3      	lsrs	r3, r0, #31
 8008384:	0a76      	lsrs	r6, r6, #9
 8008386:	0e12      	lsrs	r2, r2, #24
 8008388:	0a6d      	lsrs	r5, r5, #9
 800838a:	0e24      	lsrs	r4, r4, #24
 800838c:	0fc8      	lsrs	r0, r1, #31
 800838e:	2aff      	cmp	r2, #255	; 0xff
 8008390:	d00d      	beq.n	80083ae <__lesf2+0x36>
 8008392:	2cff      	cmp	r4, #255	; 0xff
 8008394:	d00f      	beq.n	80083b6 <__lesf2+0x3e>
 8008396:	2a00      	cmp	r2, #0
 8008398:	d123      	bne.n	80083e2 <__lesf2+0x6a>
 800839a:	4271      	negs	r1, r6
 800839c:	4171      	adcs	r1, r6
 800839e:	2c00      	cmp	r4, #0
 80083a0:	d10f      	bne.n	80083c2 <__lesf2+0x4a>
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	d10d      	bne.n	80083c2 <__lesf2+0x4a>
 80083a6:	2000      	movs	r0, #0
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	d014      	beq.n	80083d6 <__lesf2+0x5e>
 80083ac:	e00d      	b.n	80083ca <__lesf2+0x52>
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	d110      	bne.n	80083d4 <__lesf2+0x5c>
 80083b2:	2cff      	cmp	r4, #255	; 0xff
 80083b4:	d115      	bne.n	80083e2 <__lesf2+0x6a>
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	d10c      	bne.n	80083d4 <__lesf2+0x5c>
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d103      	bne.n	80083c6 <__lesf2+0x4e>
 80083be:	4271      	negs	r1, r6
 80083c0:	4171      	adcs	r1, r6
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d108      	bne.n	80083d8 <__lesf2+0x60>
 80083c6:	4283      	cmp	r3, r0
 80083c8:	d010      	beq.n	80083ec <__lesf2+0x74>
 80083ca:	2102      	movs	r1, #2
 80083cc:	1e58      	subs	r0, r3, #1
 80083ce:	4008      	ands	r0, r1
 80083d0:	3801      	subs	r0, #1
 80083d2:	e000      	b.n	80083d6 <__lesf2+0x5e>
 80083d4:	2002      	movs	r0, #2
 80083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1fc      	bne.n	80083d6 <__lesf2+0x5e>
 80083dc:	2001      	movs	r0, #1
 80083de:	4240      	negs	r0, r0
 80083e0:	e7f9      	b.n	80083d6 <__lesf2+0x5e>
 80083e2:	2c00      	cmp	r4, #0
 80083e4:	d1ef      	bne.n	80083c6 <__lesf2+0x4e>
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	d1ed      	bne.n	80083c6 <__lesf2+0x4e>
 80083ea:	e7ee      	b.n	80083ca <__lesf2+0x52>
 80083ec:	42a2      	cmp	r2, r4
 80083ee:	dc05      	bgt.n	80083fc <__lesf2+0x84>
 80083f0:	dbf2      	blt.n	80083d8 <__lesf2+0x60>
 80083f2:	42ae      	cmp	r6, r5
 80083f4:	d802      	bhi.n	80083fc <__lesf2+0x84>
 80083f6:	d3ef      	bcc.n	80083d8 <__lesf2+0x60>
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7ec      	b.n	80083d6 <__lesf2+0x5e>
 80083fc:	4241      	negs	r1, r0
 80083fe:	4141      	adcs	r1, r0
 8008400:	4248      	negs	r0, r1
 8008402:	2102      	movs	r1, #2
 8008404:	4008      	ands	r0, r1
 8008406:	3801      	subs	r0, #1
 8008408:	e7e5      	b.n	80083d6 <__lesf2+0x5e>
 800840a:	46c0      	nop			; (mov r8, r8)

0800840c <__aeabi_dadd>:
 800840c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800840e:	464f      	mov	r7, r9
 8008410:	46d6      	mov	lr, sl
 8008412:	4646      	mov	r6, r8
 8008414:	000d      	movs	r5, r1
 8008416:	0001      	movs	r1, r0
 8008418:	0018      	movs	r0, r3
 800841a:	b5c0      	push	{r6, r7, lr}
 800841c:	0017      	movs	r7, r2
 800841e:	032b      	lsls	r3, r5, #12
 8008420:	0a5a      	lsrs	r2, r3, #9
 8008422:	0f4b      	lsrs	r3, r1, #29
 8008424:	4313      	orrs	r3, r2
 8008426:	00ca      	lsls	r2, r1, #3
 8008428:	4691      	mov	r9, r2
 800842a:	0302      	lsls	r2, r0, #12
 800842c:	006e      	lsls	r6, r5, #1
 800842e:	0041      	lsls	r1, r0, #1
 8008430:	0a52      	lsrs	r2, r2, #9
 8008432:	0fec      	lsrs	r4, r5, #31
 8008434:	0f7d      	lsrs	r5, r7, #29
 8008436:	4315      	orrs	r5, r2
 8008438:	0d76      	lsrs	r6, r6, #21
 800843a:	0d49      	lsrs	r1, r1, #21
 800843c:	0fc0      	lsrs	r0, r0, #31
 800843e:	4682      	mov	sl, r0
 8008440:	46ac      	mov	ip, r5
 8008442:	00ff      	lsls	r7, r7, #3
 8008444:	1a72      	subs	r2, r6, r1
 8008446:	4284      	cmp	r4, r0
 8008448:	d100      	bne.n	800844c <__aeabi_dadd+0x40>
 800844a:	e098      	b.n	800857e <__aeabi_dadd+0x172>
 800844c:	2a00      	cmp	r2, #0
 800844e:	dc00      	bgt.n	8008452 <__aeabi_dadd+0x46>
 8008450:	e081      	b.n	8008556 <__aeabi_dadd+0x14a>
 8008452:	2900      	cmp	r1, #0
 8008454:	d100      	bne.n	8008458 <__aeabi_dadd+0x4c>
 8008456:	e0b6      	b.n	80085c6 <__aeabi_dadd+0x1ba>
 8008458:	49c9      	ldr	r1, [pc, #804]	; (8008780 <__aeabi_dadd+0x374>)
 800845a:	428e      	cmp	r6, r1
 800845c:	d100      	bne.n	8008460 <__aeabi_dadd+0x54>
 800845e:	e172      	b.n	8008746 <__aeabi_dadd+0x33a>
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	0028      	movs	r0, r5
 8008464:	0409      	lsls	r1, r1, #16
 8008466:	4308      	orrs	r0, r1
 8008468:	4684      	mov	ip, r0
 800846a:	2a38      	cmp	r2, #56	; 0x38
 800846c:	dd00      	ble.n	8008470 <__aeabi_dadd+0x64>
 800846e:	e15e      	b.n	800872e <__aeabi_dadd+0x322>
 8008470:	2a1f      	cmp	r2, #31
 8008472:	dd00      	ble.n	8008476 <__aeabi_dadd+0x6a>
 8008474:	e1ee      	b.n	8008854 <__aeabi_dadd+0x448>
 8008476:	2020      	movs	r0, #32
 8008478:	0039      	movs	r1, r7
 800847a:	4665      	mov	r5, ip
 800847c:	1a80      	subs	r0, r0, r2
 800847e:	4087      	lsls	r7, r0
 8008480:	40d1      	lsrs	r1, r2
 8008482:	4085      	lsls	r5, r0
 8008484:	430d      	orrs	r5, r1
 8008486:	0039      	movs	r1, r7
 8008488:	1e4f      	subs	r7, r1, #1
 800848a:	41b9      	sbcs	r1, r7
 800848c:	4667      	mov	r7, ip
 800848e:	40d7      	lsrs	r7, r2
 8008490:	4329      	orrs	r1, r5
 8008492:	1bdb      	subs	r3, r3, r7
 8008494:	464a      	mov	r2, r9
 8008496:	1a55      	subs	r5, r2, r1
 8008498:	45a9      	cmp	r9, r5
 800849a:	4189      	sbcs	r1, r1
 800849c:	4249      	negs	r1, r1
 800849e:	1a5b      	subs	r3, r3, r1
 80084a0:	4698      	mov	r8, r3
 80084a2:	4643      	mov	r3, r8
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	d400      	bmi.n	80084aa <__aeabi_dadd+0x9e>
 80084a8:	e0cc      	b.n	8008644 <__aeabi_dadd+0x238>
 80084aa:	4643      	mov	r3, r8
 80084ac:	025b      	lsls	r3, r3, #9
 80084ae:	0a5b      	lsrs	r3, r3, #9
 80084b0:	4698      	mov	r8, r3
 80084b2:	4643      	mov	r3, r8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d100      	bne.n	80084ba <__aeabi_dadd+0xae>
 80084b8:	e12c      	b.n	8008714 <__aeabi_dadd+0x308>
 80084ba:	4640      	mov	r0, r8
 80084bc:	f000 fe2a 	bl	8009114 <__clzsi2>
 80084c0:	0001      	movs	r1, r0
 80084c2:	3908      	subs	r1, #8
 80084c4:	2220      	movs	r2, #32
 80084c6:	0028      	movs	r0, r5
 80084c8:	4643      	mov	r3, r8
 80084ca:	1a52      	subs	r2, r2, r1
 80084cc:	408b      	lsls	r3, r1
 80084ce:	40d0      	lsrs	r0, r2
 80084d0:	408d      	lsls	r5, r1
 80084d2:	4303      	orrs	r3, r0
 80084d4:	428e      	cmp	r6, r1
 80084d6:	dd00      	ble.n	80084da <__aeabi_dadd+0xce>
 80084d8:	e117      	b.n	800870a <__aeabi_dadd+0x2fe>
 80084da:	1b8e      	subs	r6, r1, r6
 80084dc:	1c72      	adds	r2, r6, #1
 80084de:	2a1f      	cmp	r2, #31
 80084e0:	dd00      	ble.n	80084e4 <__aeabi_dadd+0xd8>
 80084e2:	e1a7      	b.n	8008834 <__aeabi_dadd+0x428>
 80084e4:	2120      	movs	r1, #32
 80084e6:	0018      	movs	r0, r3
 80084e8:	002e      	movs	r6, r5
 80084ea:	1a89      	subs	r1, r1, r2
 80084ec:	408d      	lsls	r5, r1
 80084ee:	4088      	lsls	r0, r1
 80084f0:	40d6      	lsrs	r6, r2
 80084f2:	40d3      	lsrs	r3, r2
 80084f4:	1e69      	subs	r1, r5, #1
 80084f6:	418d      	sbcs	r5, r1
 80084f8:	4330      	orrs	r0, r6
 80084fa:	4698      	mov	r8, r3
 80084fc:	2600      	movs	r6, #0
 80084fe:	4305      	orrs	r5, r0
 8008500:	076b      	lsls	r3, r5, #29
 8008502:	d009      	beq.n	8008518 <__aeabi_dadd+0x10c>
 8008504:	230f      	movs	r3, #15
 8008506:	402b      	ands	r3, r5
 8008508:	2b04      	cmp	r3, #4
 800850a:	d005      	beq.n	8008518 <__aeabi_dadd+0x10c>
 800850c:	1d2b      	adds	r3, r5, #4
 800850e:	42ab      	cmp	r3, r5
 8008510:	41ad      	sbcs	r5, r5
 8008512:	426d      	negs	r5, r5
 8008514:	44a8      	add	r8, r5
 8008516:	001d      	movs	r5, r3
 8008518:	4643      	mov	r3, r8
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	d400      	bmi.n	8008520 <__aeabi_dadd+0x114>
 800851e:	e094      	b.n	800864a <__aeabi_dadd+0x23e>
 8008520:	4b97      	ldr	r3, [pc, #604]	; (8008780 <__aeabi_dadd+0x374>)
 8008522:	1c72      	adds	r2, r6, #1
 8008524:	429a      	cmp	r2, r3
 8008526:	d100      	bne.n	800852a <__aeabi_dadd+0x11e>
 8008528:	e09d      	b.n	8008666 <__aeabi_dadd+0x25a>
 800852a:	4641      	mov	r1, r8
 800852c:	4b95      	ldr	r3, [pc, #596]	; (8008784 <__aeabi_dadd+0x378>)
 800852e:	08ed      	lsrs	r5, r5, #3
 8008530:	4019      	ands	r1, r3
 8008532:	000b      	movs	r3, r1
 8008534:	0552      	lsls	r2, r2, #21
 8008536:	0749      	lsls	r1, r1, #29
 8008538:	025b      	lsls	r3, r3, #9
 800853a:	4329      	orrs	r1, r5
 800853c:	0b1b      	lsrs	r3, r3, #12
 800853e:	0d52      	lsrs	r2, r2, #21
 8008540:	0512      	lsls	r2, r2, #20
 8008542:	4313      	orrs	r3, r2
 8008544:	07e4      	lsls	r4, r4, #31
 8008546:	4323      	orrs	r3, r4
 8008548:	0008      	movs	r0, r1
 800854a:	0019      	movs	r1, r3
 800854c:	bce0      	pop	{r5, r6, r7}
 800854e:	46ba      	mov	sl, r7
 8008550:	46b1      	mov	r9, r6
 8008552:	46a8      	mov	r8, r5
 8008554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008556:	2a00      	cmp	r2, #0
 8008558:	d043      	beq.n	80085e2 <__aeabi_dadd+0x1d6>
 800855a:	1b8a      	subs	r2, r1, r6
 800855c:	2e00      	cmp	r6, #0
 800855e:	d000      	beq.n	8008562 <__aeabi_dadd+0x156>
 8008560:	e12a      	b.n	80087b8 <__aeabi_dadd+0x3ac>
 8008562:	464c      	mov	r4, r9
 8008564:	431c      	orrs	r4, r3
 8008566:	d100      	bne.n	800856a <__aeabi_dadd+0x15e>
 8008568:	e1d1      	b.n	800890e <__aeabi_dadd+0x502>
 800856a:	1e54      	subs	r4, r2, #1
 800856c:	2a01      	cmp	r2, #1
 800856e:	d100      	bne.n	8008572 <__aeabi_dadd+0x166>
 8008570:	e21f      	b.n	80089b2 <__aeabi_dadd+0x5a6>
 8008572:	4d83      	ldr	r5, [pc, #524]	; (8008780 <__aeabi_dadd+0x374>)
 8008574:	42aa      	cmp	r2, r5
 8008576:	d100      	bne.n	800857a <__aeabi_dadd+0x16e>
 8008578:	e272      	b.n	8008a60 <__aeabi_dadd+0x654>
 800857a:	0022      	movs	r2, r4
 800857c:	e123      	b.n	80087c6 <__aeabi_dadd+0x3ba>
 800857e:	2a00      	cmp	r2, #0
 8008580:	dc00      	bgt.n	8008584 <__aeabi_dadd+0x178>
 8008582:	e098      	b.n	80086b6 <__aeabi_dadd+0x2aa>
 8008584:	2900      	cmp	r1, #0
 8008586:	d042      	beq.n	800860e <__aeabi_dadd+0x202>
 8008588:	497d      	ldr	r1, [pc, #500]	; (8008780 <__aeabi_dadd+0x374>)
 800858a:	428e      	cmp	r6, r1
 800858c:	d100      	bne.n	8008590 <__aeabi_dadd+0x184>
 800858e:	e0da      	b.n	8008746 <__aeabi_dadd+0x33a>
 8008590:	2180      	movs	r1, #128	; 0x80
 8008592:	0028      	movs	r0, r5
 8008594:	0409      	lsls	r1, r1, #16
 8008596:	4308      	orrs	r0, r1
 8008598:	4684      	mov	ip, r0
 800859a:	2a38      	cmp	r2, #56	; 0x38
 800859c:	dd00      	ble.n	80085a0 <__aeabi_dadd+0x194>
 800859e:	e129      	b.n	80087f4 <__aeabi_dadd+0x3e8>
 80085a0:	2a1f      	cmp	r2, #31
 80085a2:	dc00      	bgt.n	80085a6 <__aeabi_dadd+0x19a>
 80085a4:	e187      	b.n	80088b6 <__aeabi_dadd+0x4aa>
 80085a6:	0011      	movs	r1, r2
 80085a8:	4665      	mov	r5, ip
 80085aa:	3920      	subs	r1, #32
 80085ac:	40cd      	lsrs	r5, r1
 80085ae:	2a20      	cmp	r2, #32
 80085b0:	d004      	beq.n	80085bc <__aeabi_dadd+0x1b0>
 80085b2:	2040      	movs	r0, #64	; 0x40
 80085b4:	4661      	mov	r1, ip
 80085b6:	1a82      	subs	r2, r0, r2
 80085b8:	4091      	lsls	r1, r2
 80085ba:	430f      	orrs	r7, r1
 80085bc:	0039      	movs	r1, r7
 80085be:	1e4f      	subs	r7, r1, #1
 80085c0:	41b9      	sbcs	r1, r7
 80085c2:	430d      	orrs	r5, r1
 80085c4:	e11b      	b.n	80087fe <__aeabi_dadd+0x3f2>
 80085c6:	0029      	movs	r1, r5
 80085c8:	4339      	orrs	r1, r7
 80085ca:	d100      	bne.n	80085ce <__aeabi_dadd+0x1c2>
 80085cc:	e0b5      	b.n	800873a <__aeabi_dadd+0x32e>
 80085ce:	1e51      	subs	r1, r2, #1
 80085d0:	2a01      	cmp	r2, #1
 80085d2:	d100      	bne.n	80085d6 <__aeabi_dadd+0x1ca>
 80085d4:	e1ab      	b.n	800892e <__aeabi_dadd+0x522>
 80085d6:	486a      	ldr	r0, [pc, #424]	; (8008780 <__aeabi_dadd+0x374>)
 80085d8:	4282      	cmp	r2, r0
 80085da:	d100      	bne.n	80085de <__aeabi_dadd+0x1d2>
 80085dc:	e1b2      	b.n	8008944 <__aeabi_dadd+0x538>
 80085de:	000a      	movs	r2, r1
 80085e0:	e743      	b.n	800846a <__aeabi_dadd+0x5e>
 80085e2:	4969      	ldr	r1, [pc, #420]	; (8008788 <__aeabi_dadd+0x37c>)
 80085e4:	1c75      	adds	r5, r6, #1
 80085e6:	420d      	tst	r5, r1
 80085e8:	d000      	beq.n	80085ec <__aeabi_dadd+0x1e0>
 80085ea:	e0cf      	b.n	800878c <__aeabi_dadd+0x380>
 80085ec:	2e00      	cmp	r6, #0
 80085ee:	d000      	beq.n	80085f2 <__aeabi_dadd+0x1e6>
 80085f0:	e193      	b.n	800891a <__aeabi_dadd+0x50e>
 80085f2:	4649      	mov	r1, r9
 80085f4:	4319      	orrs	r1, r3
 80085f6:	d100      	bne.n	80085fa <__aeabi_dadd+0x1ee>
 80085f8:	e1d1      	b.n	800899e <__aeabi_dadd+0x592>
 80085fa:	4661      	mov	r1, ip
 80085fc:	4339      	orrs	r1, r7
 80085fe:	d000      	beq.n	8008602 <__aeabi_dadd+0x1f6>
 8008600:	e1e3      	b.n	80089ca <__aeabi_dadd+0x5be>
 8008602:	4649      	mov	r1, r9
 8008604:	0758      	lsls	r0, r3, #29
 8008606:	08c9      	lsrs	r1, r1, #3
 8008608:	4301      	orrs	r1, r0
 800860a:	08db      	lsrs	r3, r3, #3
 800860c:	e026      	b.n	800865c <__aeabi_dadd+0x250>
 800860e:	0029      	movs	r1, r5
 8008610:	4339      	orrs	r1, r7
 8008612:	d100      	bne.n	8008616 <__aeabi_dadd+0x20a>
 8008614:	e091      	b.n	800873a <__aeabi_dadd+0x32e>
 8008616:	1e51      	subs	r1, r2, #1
 8008618:	2a01      	cmp	r2, #1
 800861a:	d005      	beq.n	8008628 <__aeabi_dadd+0x21c>
 800861c:	4858      	ldr	r0, [pc, #352]	; (8008780 <__aeabi_dadd+0x374>)
 800861e:	4282      	cmp	r2, r0
 8008620:	d100      	bne.n	8008624 <__aeabi_dadd+0x218>
 8008622:	e18f      	b.n	8008944 <__aeabi_dadd+0x538>
 8008624:	000a      	movs	r2, r1
 8008626:	e7b8      	b.n	800859a <__aeabi_dadd+0x18e>
 8008628:	003d      	movs	r5, r7
 800862a:	444d      	add	r5, r9
 800862c:	454d      	cmp	r5, r9
 800862e:	4189      	sbcs	r1, r1
 8008630:	4463      	add	r3, ip
 8008632:	4698      	mov	r8, r3
 8008634:	4249      	negs	r1, r1
 8008636:	4488      	add	r8, r1
 8008638:	4643      	mov	r3, r8
 800863a:	2602      	movs	r6, #2
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	d500      	bpl.n	8008642 <__aeabi_dadd+0x236>
 8008640:	e0eb      	b.n	800881a <__aeabi_dadd+0x40e>
 8008642:	3e01      	subs	r6, #1
 8008644:	076b      	lsls	r3, r5, #29
 8008646:	d000      	beq.n	800864a <__aeabi_dadd+0x23e>
 8008648:	e75c      	b.n	8008504 <__aeabi_dadd+0xf8>
 800864a:	4643      	mov	r3, r8
 800864c:	08e9      	lsrs	r1, r5, #3
 800864e:	075a      	lsls	r2, r3, #29
 8008650:	4311      	orrs	r1, r2
 8008652:	0032      	movs	r2, r6
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	484a      	ldr	r0, [pc, #296]	; (8008780 <__aeabi_dadd+0x374>)
 8008658:	4282      	cmp	r2, r0
 800865a:	d021      	beq.n	80086a0 <__aeabi_dadd+0x294>
 800865c:	031b      	lsls	r3, r3, #12
 800865e:	0552      	lsls	r2, r2, #21
 8008660:	0b1b      	lsrs	r3, r3, #12
 8008662:	0d52      	lsrs	r2, r2, #21
 8008664:	e76c      	b.n	8008540 <__aeabi_dadd+0x134>
 8008666:	2300      	movs	r3, #0
 8008668:	2100      	movs	r1, #0
 800866a:	e769      	b.n	8008540 <__aeabi_dadd+0x134>
 800866c:	002a      	movs	r2, r5
 800866e:	433a      	orrs	r2, r7
 8008670:	d069      	beq.n	8008746 <__aeabi_dadd+0x33a>
 8008672:	464a      	mov	r2, r9
 8008674:	0758      	lsls	r0, r3, #29
 8008676:	08d1      	lsrs	r1, r2, #3
 8008678:	08da      	lsrs	r2, r3, #3
 800867a:	2380      	movs	r3, #128	; 0x80
 800867c:	031b      	lsls	r3, r3, #12
 800867e:	4308      	orrs	r0, r1
 8008680:	421a      	tst	r2, r3
 8008682:	d007      	beq.n	8008694 <__aeabi_dadd+0x288>
 8008684:	0029      	movs	r1, r5
 8008686:	08ed      	lsrs	r5, r5, #3
 8008688:	421d      	tst	r5, r3
 800868a:	d103      	bne.n	8008694 <__aeabi_dadd+0x288>
 800868c:	002a      	movs	r2, r5
 800868e:	08ff      	lsrs	r7, r7, #3
 8008690:	0748      	lsls	r0, r1, #29
 8008692:	4338      	orrs	r0, r7
 8008694:	0f43      	lsrs	r3, r0, #29
 8008696:	00c1      	lsls	r1, r0, #3
 8008698:	075b      	lsls	r3, r3, #29
 800869a:	08c9      	lsrs	r1, r1, #3
 800869c:	4319      	orrs	r1, r3
 800869e:	0013      	movs	r3, r2
 80086a0:	000a      	movs	r2, r1
 80086a2:	431a      	orrs	r2, r3
 80086a4:	d100      	bne.n	80086a8 <__aeabi_dadd+0x29c>
 80086a6:	e213      	b.n	8008ad0 <__aeabi_dadd+0x6c4>
 80086a8:	2280      	movs	r2, #128	; 0x80
 80086aa:	0312      	lsls	r2, r2, #12
 80086ac:	4313      	orrs	r3, r2
 80086ae:	031b      	lsls	r3, r3, #12
 80086b0:	4a33      	ldr	r2, [pc, #204]	; (8008780 <__aeabi_dadd+0x374>)
 80086b2:	0b1b      	lsrs	r3, r3, #12
 80086b4:	e744      	b.n	8008540 <__aeabi_dadd+0x134>
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	d04b      	beq.n	8008752 <__aeabi_dadd+0x346>
 80086ba:	1b8a      	subs	r2, r1, r6
 80086bc:	2e00      	cmp	r6, #0
 80086be:	d100      	bne.n	80086c2 <__aeabi_dadd+0x2b6>
 80086c0:	e0e7      	b.n	8008892 <__aeabi_dadd+0x486>
 80086c2:	482f      	ldr	r0, [pc, #188]	; (8008780 <__aeabi_dadd+0x374>)
 80086c4:	4281      	cmp	r1, r0
 80086c6:	d100      	bne.n	80086ca <__aeabi_dadd+0x2be>
 80086c8:	e195      	b.n	80089f6 <__aeabi_dadd+0x5ea>
 80086ca:	2080      	movs	r0, #128	; 0x80
 80086cc:	0400      	lsls	r0, r0, #16
 80086ce:	4303      	orrs	r3, r0
 80086d0:	2a38      	cmp	r2, #56	; 0x38
 80086d2:	dd00      	ble.n	80086d6 <__aeabi_dadd+0x2ca>
 80086d4:	e143      	b.n	800895e <__aeabi_dadd+0x552>
 80086d6:	2a1f      	cmp	r2, #31
 80086d8:	dd00      	ble.n	80086dc <__aeabi_dadd+0x2d0>
 80086da:	e1db      	b.n	8008a94 <__aeabi_dadd+0x688>
 80086dc:	2020      	movs	r0, #32
 80086de:	001d      	movs	r5, r3
 80086e0:	464e      	mov	r6, r9
 80086e2:	1a80      	subs	r0, r0, r2
 80086e4:	4085      	lsls	r5, r0
 80086e6:	40d6      	lsrs	r6, r2
 80086e8:	4335      	orrs	r5, r6
 80086ea:	464e      	mov	r6, r9
 80086ec:	4086      	lsls	r6, r0
 80086ee:	0030      	movs	r0, r6
 80086f0:	40d3      	lsrs	r3, r2
 80086f2:	1e46      	subs	r6, r0, #1
 80086f4:	41b0      	sbcs	r0, r6
 80086f6:	449c      	add	ip, r3
 80086f8:	4305      	orrs	r5, r0
 80086fa:	19ed      	adds	r5, r5, r7
 80086fc:	42bd      	cmp	r5, r7
 80086fe:	419b      	sbcs	r3, r3
 8008700:	425b      	negs	r3, r3
 8008702:	4463      	add	r3, ip
 8008704:	4698      	mov	r8, r3
 8008706:	000e      	movs	r6, r1
 8008708:	e07f      	b.n	800880a <__aeabi_dadd+0x3fe>
 800870a:	4a1e      	ldr	r2, [pc, #120]	; (8008784 <__aeabi_dadd+0x378>)
 800870c:	1a76      	subs	r6, r6, r1
 800870e:	4013      	ands	r3, r2
 8008710:	4698      	mov	r8, r3
 8008712:	e6f5      	b.n	8008500 <__aeabi_dadd+0xf4>
 8008714:	0028      	movs	r0, r5
 8008716:	f000 fcfd 	bl	8009114 <__clzsi2>
 800871a:	0001      	movs	r1, r0
 800871c:	3118      	adds	r1, #24
 800871e:	291f      	cmp	r1, #31
 8008720:	dc00      	bgt.n	8008724 <__aeabi_dadd+0x318>
 8008722:	e6cf      	b.n	80084c4 <__aeabi_dadd+0xb8>
 8008724:	002b      	movs	r3, r5
 8008726:	3808      	subs	r0, #8
 8008728:	4083      	lsls	r3, r0
 800872a:	2500      	movs	r5, #0
 800872c:	e6d2      	b.n	80084d4 <__aeabi_dadd+0xc8>
 800872e:	4662      	mov	r2, ip
 8008730:	433a      	orrs	r2, r7
 8008732:	0011      	movs	r1, r2
 8008734:	1e4f      	subs	r7, r1, #1
 8008736:	41b9      	sbcs	r1, r7
 8008738:	e6ac      	b.n	8008494 <__aeabi_dadd+0x88>
 800873a:	4649      	mov	r1, r9
 800873c:	0758      	lsls	r0, r3, #29
 800873e:	08c9      	lsrs	r1, r1, #3
 8008740:	4301      	orrs	r1, r0
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	e787      	b.n	8008656 <__aeabi_dadd+0x24a>
 8008746:	4649      	mov	r1, r9
 8008748:	075a      	lsls	r2, r3, #29
 800874a:	08c9      	lsrs	r1, r1, #3
 800874c:	4311      	orrs	r1, r2
 800874e:	08db      	lsrs	r3, r3, #3
 8008750:	e7a6      	b.n	80086a0 <__aeabi_dadd+0x294>
 8008752:	490d      	ldr	r1, [pc, #52]	; (8008788 <__aeabi_dadd+0x37c>)
 8008754:	1c70      	adds	r0, r6, #1
 8008756:	4208      	tst	r0, r1
 8008758:	d000      	beq.n	800875c <__aeabi_dadd+0x350>
 800875a:	e0bb      	b.n	80088d4 <__aeabi_dadd+0x4c8>
 800875c:	2e00      	cmp	r6, #0
 800875e:	d000      	beq.n	8008762 <__aeabi_dadd+0x356>
 8008760:	e114      	b.n	800898c <__aeabi_dadd+0x580>
 8008762:	4649      	mov	r1, r9
 8008764:	4319      	orrs	r1, r3
 8008766:	d100      	bne.n	800876a <__aeabi_dadd+0x35e>
 8008768:	e175      	b.n	8008a56 <__aeabi_dadd+0x64a>
 800876a:	0029      	movs	r1, r5
 800876c:	4339      	orrs	r1, r7
 800876e:	d000      	beq.n	8008772 <__aeabi_dadd+0x366>
 8008770:	e17e      	b.n	8008a70 <__aeabi_dadd+0x664>
 8008772:	4649      	mov	r1, r9
 8008774:	0758      	lsls	r0, r3, #29
 8008776:	08c9      	lsrs	r1, r1, #3
 8008778:	4301      	orrs	r1, r0
 800877a:	08db      	lsrs	r3, r3, #3
 800877c:	e76e      	b.n	800865c <__aeabi_dadd+0x250>
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	000007ff 	.word	0x000007ff
 8008784:	ff7fffff 	.word	0xff7fffff
 8008788:	000007fe 	.word	0x000007fe
 800878c:	4649      	mov	r1, r9
 800878e:	1bcd      	subs	r5, r1, r7
 8008790:	4661      	mov	r1, ip
 8008792:	1a58      	subs	r0, r3, r1
 8008794:	45a9      	cmp	r9, r5
 8008796:	4189      	sbcs	r1, r1
 8008798:	4249      	negs	r1, r1
 800879a:	4688      	mov	r8, r1
 800879c:	0001      	movs	r1, r0
 800879e:	4640      	mov	r0, r8
 80087a0:	1a09      	subs	r1, r1, r0
 80087a2:	4688      	mov	r8, r1
 80087a4:	0209      	lsls	r1, r1, #8
 80087a6:	d500      	bpl.n	80087aa <__aeabi_dadd+0x39e>
 80087a8:	e0a6      	b.n	80088f8 <__aeabi_dadd+0x4ec>
 80087aa:	4641      	mov	r1, r8
 80087ac:	4329      	orrs	r1, r5
 80087ae:	d000      	beq.n	80087b2 <__aeabi_dadd+0x3a6>
 80087b0:	e67f      	b.n	80084b2 <__aeabi_dadd+0xa6>
 80087b2:	2300      	movs	r3, #0
 80087b4:	2400      	movs	r4, #0
 80087b6:	e751      	b.n	800865c <__aeabi_dadd+0x250>
 80087b8:	4cc7      	ldr	r4, [pc, #796]	; (8008ad8 <__aeabi_dadd+0x6cc>)
 80087ba:	42a1      	cmp	r1, r4
 80087bc:	d100      	bne.n	80087c0 <__aeabi_dadd+0x3b4>
 80087be:	e0c7      	b.n	8008950 <__aeabi_dadd+0x544>
 80087c0:	2480      	movs	r4, #128	; 0x80
 80087c2:	0424      	lsls	r4, r4, #16
 80087c4:	4323      	orrs	r3, r4
 80087c6:	2a38      	cmp	r2, #56	; 0x38
 80087c8:	dc54      	bgt.n	8008874 <__aeabi_dadd+0x468>
 80087ca:	2a1f      	cmp	r2, #31
 80087cc:	dd00      	ble.n	80087d0 <__aeabi_dadd+0x3c4>
 80087ce:	e0cc      	b.n	800896a <__aeabi_dadd+0x55e>
 80087d0:	2420      	movs	r4, #32
 80087d2:	4648      	mov	r0, r9
 80087d4:	1aa4      	subs	r4, r4, r2
 80087d6:	001d      	movs	r5, r3
 80087d8:	464e      	mov	r6, r9
 80087da:	40a0      	lsls	r0, r4
 80087dc:	40d6      	lsrs	r6, r2
 80087de:	40a5      	lsls	r5, r4
 80087e0:	0004      	movs	r4, r0
 80087e2:	40d3      	lsrs	r3, r2
 80087e4:	4662      	mov	r2, ip
 80087e6:	4335      	orrs	r5, r6
 80087e8:	1e66      	subs	r6, r4, #1
 80087ea:	41b4      	sbcs	r4, r6
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	469c      	mov	ip, r3
 80087f0:	4325      	orrs	r5, r4
 80087f2:	e044      	b.n	800887e <__aeabi_dadd+0x472>
 80087f4:	4662      	mov	r2, ip
 80087f6:	433a      	orrs	r2, r7
 80087f8:	0015      	movs	r5, r2
 80087fa:	1e6f      	subs	r7, r5, #1
 80087fc:	41bd      	sbcs	r5, r7
 80087fe:	444d      	add	r5, r9
 8008800:	454d      	cmp	r5, r9
 8008802:	4189      	sbcs	r1, r1
 8008804:	4249      	negs	r1, r1
 8008806:	4688      	mov	r8, r1
 8008808:	4498      	add	r8, r3
 800880a:	4643      	mov	r3, r8
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	d400      	bmi.n	8008812 <__aeabi_dadd+0x406>
 8008810:	e718      	b.n	8008644 <__aeabi_dadd+0x238>
 8008812:	4bb1      	ldr	r3, [pc, #708]	; (8008ad8 <__aeabi_dadd+0x6cc>)
 8008814:	3601      	adds	r6, #1
 8008816:	429e      	cmp	r6, r3
 8008818:	d049      	beq.n	80088ae <__aeabi_dadd+0x4a2>
 800881a:	4642      	mov	r2, r8
 800881c:	4baf      	ldr	r3, [pc, #700]	; (8008adc <__aeabi_dadd+0x6d0>)
 800881e:	2101      	movs	r1, #1
 8008820:	401a      	ands	r2, r3
 8008822:	0013      	movs	r3, r2
 8008824:	086a      	lsrs	r2, r5, #1
 8008826:	400d      	ands	r5, r1
 8008828:	4315      	orrs	r5, r2
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	4698      	mov	r8, r3
 8008830:	430d      	orrs	r5, r1
 8008832:	e665      	b.n	8008500 <__aeabi_dadd+0xf4>
 8008834:	0018      	movs	r0, r3
 8008836:	3e1f      	subs	r6, #31
 8008838:	40f0      	lsrs	r0, r6
 800883a:	2a20      	cmp	r2, #32
 800883c:	d003      	beq.n	8008846 <__aeabi_dadd+0x43a>
 800883e:	2140      	movs	r1, #64	; 0x40
 8008840:	1a8a      	subs	r2, r1, r2
 8008842:	4093      	lsls	r3, r2
 8008844:	431d      	orrs	r5, r3
 8008846:	1e69      	subs	r1, r5, #1
 8008848:	418d      	sbcs	r5, r1
 800884a:	2300      	movs	r3, #0
 800884c:	2600      	movs	r6, #0
 800884e:	4698      	mov	r8, r3
 8008850:	4305      	orrs	r5, r0
 8008852:	e6f7      	b.n	8008644 <__aeabi_dadd+0x238>
 8008854:	0011      	movs	r1, r2
 8008856:	4665      	mov	r5, ip
 8008858:	3920      	subs	r1, #32
 800885a:	40cd      	lsrs	r5, r1
 800885c:	2a20      	cmp	r2, #32
 800885e:	d004      	beq.n	800886a <__aeabi_dadd+0x45e>
 8008860:	2040      	movs	r0, #64	; 0x40
 8008862:	4661      	mov	r1, ip
 8008864:	1a82      	subs	r2, r0, r2
 8008866:	4091      	lsls	r1, r2
 8008868:	430f      	orrs	r7, r1
 800886a:	0039      	movs	r1, r7
 800886c:	1e4f      	subs	r7, r1, #1
 800886e:	41b9      	sbcs	r1, r7
 8008870:	4329      	orrs	r1, r5
 8008872:	e60f      	b.n	8008494 <__aeabi_dadd+0x88>
 8008874:	464a      	mov	r2, r9
 8008876:	4313      	orrs	r3, r2
 8008878:	001d      	movs	r5, r3
 800887a:	1e6b      	subs	r3, r5, #1
 800887c:	419d      	sbcs	r5, r3
 800887e:	1b7d      	subs	r5, r7, r5
 8008880:	42af      	cmp	r7, r5
 8008882:	419b      	sbcs	r3, r3
 8008884:	4662      	mov	r2, ip
 8008886:	425b      	negs	r3, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	4698      	mov	r8, r3
 800888c:	4654      	mov	r4, sl
 800888e:	000e      	movs	r6, r1
 8008890:	e607      	b.n	80084a2 <__aeabi_dadd+0x96>
 8008892:	4648      	mov	r0, r9
 8008894:	4318      	orrs	r0, r3
 8008896:	d100      	bne.n	800889a <__aeabi_dadd+0x48e>
 8008898:	e0b3      	b.n	8008a02 <__aeabi_dadd+0x5f6>
 800889a:	1e50      	subs	r0, r2, #1
 800889c:	2a01      	cmp	r2, #1
 800889e:	d100      	bne.n	80088a2 <__aeabi_dadd+0x496>
 80088a0:	e10d      	b.n	8008abe <__aeabi_dadd+0x6b2>
 80088a2:	4d8d      	ldr	r5, [pc, #564]	; (8008ad8 <__aeabi_dadd+0x6cc>)
 80088a4:	42aa      	cmp	r2, r5
 80088a6:	d100      	bne.n	80088aa <__aeabi_dadd+0x49e>
 80088a8:	e0a5      	b.n	80089f6 <__aeabi_dadd+0x5ea>
 80088aa:	0002      	movs	r2, r0
 80088ac:	e710      	b.n	80086d0 <__aeabi_dadd+0x2c4>
 80088ae:	0032      	movs	r2, r6
 80088b0:	2300      	movs	r3, #0
 80088b2:	2100      	movs	r1, #0
 80088b4:	e644      	b.n	8008540 <__aeabi_dadd+0x134>
 80088b6:	2120      	movs	r1, #32
 80088b8:	0038      	movs	r0, r7
 80088ba:	1a89      	subs	r1, r1, r2
 80088bc:	4665      	mov	r5, ip
 80088be:	408f      	lsls	r7, r1
 80088c0:	408d      	lsls	r5, r1
 80088c2:	40d0      	lsrs	r0, r2
 80088c4:	1e79      	subs	r1, r7, #1
 80088c6:	418f      	sbcs	r7, r1
 80088c8:	4305      	orrs	r5, r0
 80088ca:	433d      	orrs	r5, r7
 80088cc:	4667      	mov	r7, ip
 80088ce:	40d7      	lsrs	r7, r2
 80088d0:	19db      	adds	r3, r3, r7
 80088d2:	e794      	b.n	80087fe <__aeabi_dadd+0x3f2>
 80088d4:	4a80      	ldr	r2, [pc, #512]	; (8008ad8 <__aeabi_dadd+0x6cc>)
 80088d6:	4290      	cmp	r0, r2
 80088d8:	d100      	bne.n	80088dc <__aeabi_dadd+0x4d0>
 80088da:	e0ec      	b.n	8008ab6 <__aeabi_dadd+0x6aa>
 80088dc:	0039      	movs	r1, r7
 80088de:	4449      	add	r1, r9
 80088e0:	4549      	cmp	r1, r9
 80088e2:	4192      	sbcs	r2, r2
 80088e4:	4463      	add	r3, ip
 80088e6:	4252      	negs	r2, r2
 80088e8:	189b      	adds	r3, r3, r2
 80088ea:	07dd      	lsls	r5, r3, #31
 80088ec:	0849      	lsrs	r1, r1, #1
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	4698      	mov	r8, r3
 80088f2:	0006      	movs	r6, r0
 80088f4:	430d      	orrs	r5, r1
 80088f6:	e6a5      	b.n	8008644 <__aeabi_dadd+0x238>
 80088f8:	464a      	mov	r2, r9
 80088fa:	1abd      	subs	r5, r7, r2
 80088fc:	42af      	cmp	r7, r5
 80088fe:	4189      	sbcs	r1, r1
 8008900:	4662      	mov	r2, ip
 8008902:	4249      	negs	r1, r1
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	1a5b      	subs	r3, r3, r1
 8008908:	4698      	mov	r8, r3
 800890a:	4654      	mov	r4, sl
 800890c:	e5d1      	b.n	80084b2 <__aeabi_dadd+0xa6>
 800890e:	076c      	lsls	r4, r5, #29
 8008910:	08f9      	lsrs	r1, r7, #3
 8008912:	4321      	orrs	r1, r4
 8008914:	08eb      	lsrs	r3, r5, #3
 8008916:	0004      	movs	r4, r0
 8008918:	e69d      	b.n	8008656 <__aeabi_dadd+0x24a>
 800891a:	464a      	mov	r2, r9
 800891c:	431a      	orrs	r2, r3
 800891e:	d175      	bne.n	8008a0c <__aeabi_dadd+0x600>
 8008920:	4661      	mov	r1, ip
 8008922:	4339      	orrs	r1, r7
 8008924:	d114      	bne.n	8008950 <__aeabi_dadd+0x544>
 8008926:	2380      	movs	r3, #128	; 0x80
 8008928:	2400      	movs	r4, #0
 800892a:	031b      	lsls	r3, r3, #12
 800892c:	e6bc      	b.n	80086a8 <__aeabi_dadd+0x29c>
 800892e:	464a      	mov	r2, r9
 8008930:	1bd5      	subs	r5, r2, r7
 8008932:	45a9      	cmp	r9, r5
 8008934:	4189      	sbcs	r1, r1
 8008936:	4662      	mov	r2, ip
 8008938:	4249      	negs	r1, r1
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	1a5b      	subs	r3, r3, r1
 800893e:	4698      	mov	r8, r3
 8008940:	2601      	movs	r6, #1
 8008942:	e5ae      	b.n	80084a2 <__aeabi_dadd+0x96>
 8008944:	464a      	mov	r2, r9
 8008946:	08d1      	lsrs	r1, r2, #3
 8008948:	075a      	lsls	r2, r3, #29
 800894a:	4311      	orrs	r1, r2
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	e6a7      	b.n	80086a0 <__aeabi_dadd+0x294>
 8008950:	4663      	mov	r3, ip
 8008952:	08f9      	lsrs	r1, r7, #3
 8008954:	075a      	lsls	r2, r3, #29
 8008956:	4654      	mov	r4, sl
 8008958:	4311      	orrs	r1, r2
 800895a:	08db      	lsrs	r3, r3, #3
 800895c:	e6a0      	b.n	80086a0 <__aeabi_dadd+0x294>
 800895e:	464a      	mov	r2, r9
 8008960:	4313      	orrs	r3, r2
 8008962:	001d      	movs	r5, r3
 8008964:	1e6b      	subs	r3, r5, #1
 8008966:	419d      	sbcs	r5, r3
 8008968:	e6c7      	b.n	80086fa <__aeabi_dadd+0x2ee>
 800896a:	0014      	movs	r4, r2
 800896c:	001e      	movs	r6, r3
 800896e:	3c20      	subs	r4, #32
 8008970:	40e6      	lsrs	r6, r4
 8008972:	2a20      	cmp	r2, #32
 8008974:	d005      	beq.n	8008982 <__aeabi_dadd+0x576>
 8008976:	2440      	movs	r4, #64	; 0x40
 8008978:	1aa2      	subs	r2, r4, r2
 800897a:	4093      	lsls	r3, r2
 800897c:	464a      	mov	r2, r9
 800897e:	431a      	orrs	r2, r3
 8008980:	4691      	mov	r9, r2
 8008982:	464d      	mov	r5, r9
 8008984:	1e6b      	subs	r3, r5, #1
 8008986:	419d      	sbcs	r5, r3
 8008988:	4335      	orrs	r5, r6
 800898a:	e778      	b.n	800887e <__aeabi_dadd+0x472>
 800898c:	464a      	mov	r2, r9
 800898e:	431a      	orrs	r2, r3
 8008990:	d000      	beq.n	8008994 <__aeabi_dadd+0x588>
 8008992:	e66b      	b.n	800866c <__aeabi_dadd+0x260>
 8008994:	076b      	lsls	r3, r5, #29
 8008996:	08f9      	lsrs	r1, r7, #3
 8008998:	4319      	orrs	r1, r3
 800899a:	08eb      	lsrs	r3, r5, #3
 800899c:	e680      	b.n	80086a0 <__aeabi_dadd+0x294>
 800899e:	4661      	mov	r1, ip
 80089a0:	4339      	orrs	r1, r7
 80089a2:	d054      	beq.n	8008a4e <__aeabi_dadd+0x642>
 80089a4:	4663      	mov	r3, ip
 80089a6:	08f9      	lsrs	r1, r7, #3
 80089a8:	075c      	lsls	r4, r3, #29
 80089aa:	4321      	orrs	r1, r4
 80089ac:	08db      	lsrs	r3, r3, #3
 80089ae:	0004      	movs	r4, r0
 80089b0:	e654      	b.n	800865c <__aeabi_dadd+0x250>
 80089b2:	464a      	mov	r2, r9
 80089b4:	1abd      	subs	r5, r7, r2
 80089b6:	42af      	cmp	r7, r5
 80089b8:	4189      	sbcs	r1, r1
 80089ba:	4662      	mov	r2, ip
 80089bc:	4249      	negs	r1, r1
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	1a5b      	subs	r3, r3, r1
 80089c2:	4698      	mov	r8, r3
 80089c4:	0004      	movs	r4, r0
 80089c6:	2601      	movs	r6, #1
 80089c8:	e56b      	b.n	80084a2 <__aeabi_dadd+0x96>
 80089ca:	464a      	mov	r2, r9
 80089cc:	1bd5      	subs	r5, r2, r7
 80089ce:	45a9      	cmp	r9, r5
 80089d0:	4189      	sbcs	r1, r1
 80089d2:	4662      	mov	r2, ip
 80089d4:	4249      	negs	r1, r1
 80089d6:	1a9a      	subs	r2, r3, r2
 80089d8:	1a52      	subs	r2, r2, r1
 80089da:	4690      	mov	r8, r2
 80089dc:	0212      	lsls	r2, r2, #8
 80089de:	d532      	bpl.n	8008a46 <__aeabi_dadd+0x63a>
 80089e0:	464a      	mov	r2, r9
 80089e2:	1abd      	subs	r5, r7, r2
 80089e4:	42af      	cmp	r7, r5
 80089e6:	4189      	sbcs	r1, r1
 80089e8:	4662      	mov	r2, ip
 80089ea:	4249      	negs	r1, r1
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	1a5b      	subs	r3, r3, r1
 80089f0:	4698      	mov	r8, r3
 80089f2:	0004      	movs	r4, r0
 80089f4:	e584      	b.n	8008500 <__aeabi_dadd+0xf4>
 80089f6:	4663      	mov	r3, ip
 80089f8:	08f9      	lsrs	r1, r7, #3
 80089fa:	075a      	lsls	r2, r3, #29
 80089fc:	4311      	orrs	r1, r2
 80089fe:	08db      	lsrs	r3, r3, #3
 8008a00:	e64e      	b.n	80086a0 <__aeabi_dadd+0x294>
 8008a02:	08f9      	lsrs	r1, r7, #3
 8008a04:	0768      	lsls	r0, r5, #29
 8008a06:	4301      	orrs	r1, r0
 8008a08:	08eb      	lsrs	r3, r5, #3
 8008a0a:	e624      	b.n	8008656 <__aeabi_dadd+0x24a>
 8008a0c:	4662      	mov	r2, ip
 8008a0e:	433a      	orrs	r2, r7
 8008a10:	d100      	bne.n	8008a14 <__aeabi_dadd+0x608>
 8008a12:	e698      	b.n	8008746 <__aeabi_dadd+0x33a>
 8008a14:	464a      	mov	r2, r9
 8008a16:	08d1      	lsrs	r1, r2, #3
 8008a18:	075a      	lsls	r2, r3, #29
 8008a1a:	4311      	orrs	r1, r2
 8008a1c:	08da      	lsrs	r2, r3, #3
 8008a1e:	2380      	movs	r3, #128	; 0x80
 8008a20:	031b      	lsls	r3, r3, #12
 8008a22:	421a      	tst	r2, r3
 8008a24:	d008      	beq.n	8008a38 <__aeabi_dadd+0x62c>
 8008a26:	4660      	mov	r0, ip
 8008a28:	08c5      	lsrs	r5, r0, #3
 8008a2a:	421d      	tst	r5, r3
 8008a2c:	d104      	bne.n	8008a38 <__aeabi_dadd+0x62c>
 8008a2e:	4654      	mov	r4, sl
 8008a30:	002a      	movs	r2, r5
 8008a32:	08f9      	lsrs	r1, r7, #3
 8008a34:	0743      	lsls	r3, r0, #29
 8008a36:	4319      	orrs	r1, r3
 8008a38:	0f4b      	lsrs	r3, r1, #29
 8008a3a:	00c9      	lsls	r1, r1, #3
 8008a3c:	075b      	lsls	r3, r3, #29
 8008a3e:	08c9      	lsrs	r1, r1, #3
 8008a40:	4319      	orrs	r1, r3
 8008a42:	0013      	movs	r3, r2
 8008a44:	e62c      	b.n	80086a0 <__aeabi_dadd+0x294>
 8008a46:	4641      	mov	r1, r8
 8008a48:	4329      	orrs	r1, r5
 8008a4a:	d000      	beq.n	8008a4e <__aeabi_dadd+0x642>
 8008a4c:	e5fa      	b.n	8008644 <__aeabi_dadd+0x238>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	000a      	movs	r2, r1
 8008a52:	2400      	movs	r4, #0
 8008a54:	e602      	b.n	800865c <__aeabi_dadd+0x250>
 8008a56:	076b      	lsls	r3, r5, #29
 8008a58:	08f9      	lsrs	r1, r7, #3
 8008a5a:	4319      	orrs	r1, r3
 8008a5c:	08eb      	lsrs	r3, r5, #3
 8008a5e:	e5fd      	b.n	800865c <__aeabi_dadd+0x250>
 8008a60:	4663      	mov	r3, ip
 8008a62:	08f9      	lsrs	r1, r7, #3
 8008a64:	075b      	lsls	r3, r3, #29
 8008a66:	4319      	orrs	r1, r3
 8008a68:	4663      	mov	r3, ip
 8008a6a:	0004      	movs	r4, r0
 8008a6c:	08db      	lsrs	r3, r3, #3
 8008a6e:	e617      	b.n	80086a0 <__aeabi_dadd+0x294>
 8008a70:	003d      	movs	r5, r7
 8008a72:	444d      	add	r5, r9
 8008a74:	4463      	add	r3, ip
 8008a76:	454d      	cmp	r5, r9
 8008a78:	4189      	sbcs	r1, r1
 8008a7a:	4698      	mov	r8, r3
 8008a7c:	4249      	negs	r1, r1
 8008a7e:	4488      	add	r8, r1
 8008a80:	4643      	mov	r3, r8
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	d400      	bmi.n	8008a88 <__aeabi_dadd+0x67c>
 8008a86:	e5dd      	b.n	8008644 <__aeabi_dadd+0x238>
 8008a88:	4642      	mov	r2, r8
 8008a8a:	4b14      	ldr	r3, [pc, #80]	; (8008adc <__aeabi_dadd+0x6d0>)
 8008a8c:	2601      	movs	r6, #1
 8008a8e:	401a      	ands	r2, r3
 8008a90:	4690      	mov	r8, r2
 8008a92:	e5d7      	b.n	8008644 <__aeabi_dadd+0x238>
 8008a94:	0010      	movs	r0, r2
 8008a96:	001e      	movs	r6, r3
 8008a98:	3820      	subs	r0, #32
 8008a9a:	40c6      	lsrs	r6, r0
 8008a9c:	2a20      	cmp	r2, #32
 8008a9e:	d005      	beq.n	8008aac <__aeabi_dadd+0x6a0>
 8008aa0:	2040      	movs	r0, #64	; 0x40
 8008aa2:	1a82      	subs	r2, r0, r2
 8008aa4:	4093      	lsls	r3, r2
 8008aa6:	464a      	mov	r2, r9
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	4691      	mov	r9, r2
 8008aac:	464d      	mov	r5, r9
 8008aae:	1e6b      	subs	r3, r5, #1
 8008ab0:	419d      	sbcs	r5, r3
 8008ab2:	4335      	orrs	r5, r6
 8008ab4:	e621      	b.n	80086fa <__aeabi_dadd+0x2ee>
 8008ab6:	0002      	movs	r2, r0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2100      	movs	r1, #0
 8008abc:	e540      	b.n	8008540 <__aeabi_dadd+0x134>
 8008abe:	464a      	mov	r2, r9
 8008ac0:	19d5      	adds	r5, r2, r7
 8008ac2:	42bd      	cmp	r5, r7
 8008ac4:	4189      	sbcs	r1, r1
 8008ac6:	4463      	add	r3, ip
 8008ac8:	4698      	mov	r8, r3
 8008aca:	4249      	negs	r1, r1
 8008acc:	4488      	add	r8, r1
 8008ace:	e5b3      	b.n	8008638 <__aeabi_dadd+0x22c>
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4a01      	ldr	r2, [pc, #4]	; (8008ad8 <__aeabi_dadd+0x6cc>)
 8008ad4:	000b      	movs	r3, r1
 8008ad6:	e533      	b.n	8008540 <__aeabi_dadd+0x134>
 8008ad8:	000007ff 	.word	0x000007ff
 8008adc:	ff7fffff 	.word	0xff7fffff

08008ae0 <__aeabi_dmul>:
 8008ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae2:	4657      	mov	r7, sl
 8008ae4:	464e      	mov	r6, r9
 8008ae6:	4645      	mov	r5, r8
 8008ae8:	46de      	mov	lr, fp
 8008aea:	b5e0      	push	{r5, r6, r7, lr}
 8008aec:	4698      	mov	r8, r3
 8008aee:	030c      	lsls	r4, r1, #12
 8008af0:	004b      	lsls	r3, r1, #1
 8008af2:	0006      	movs	r6, r0
 8008af4:	4692      	mov	sl, r2
 8008af6:	b087      	sub	sp, #28
 8008af8:	0b24      	lsrs	r4, r4, #12
 8008afa:	0d5b      	lsrs	r3, r3, #21
 8008afc:	0fcf      	lsrs	r7, r1, #31
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d06c      	beq.n	8008bdc <__aeabi_dmul+0xfc>
 8008b02:	4add      	ldr	r2, [pc, #884]	; (8008e78 <__aeabi_dmul+0x398>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <__aeabi_dmul+0x2a>
 8008b08:	e086      	b.n	8008c18 <__aeabi_dmul+0x138>
 8008b0a:	0f42      	lsrs	r2, r0, #29
 8008b0c:	00e4      	lsls	r4, r4, #3
 8008b0e:	4314      	orrs	r4, r2
 8008b10:	2280      	movs	r2, #128	; 0x80
 8008b12:	0412      	lsls	r2, r2, #16
 8008b14:	4314      	orrs	r4, r2
 8008b16:	4ad9      	ldr	r2, [pc, #868]	; (8008e7c <__aeabi_dmul+0x39c>)
 8008b18:	00c5      	lsls	r5, r0, #3
 8008b1a:	4694      	mov	ip, r2
 8008b1c:	4463      	add	r3, ip
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2300      	movs	r3, #0
 8008b22:	4699      	mov	r9, r3
 8008b24:	469b      	mov	fp, r3
 8008b26:	4643      	mov	r3, r8
 8008b28:	4642      	mov	r2, r8
 8008b2a:	031e      	lsls	r6, r3, #12
 8008b2c:	0fd2      	lsrs	r2, r2, #31
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	4650      	mov	r0, sl
 8008b32:	4690      	mov	r8, r2
 8008b34:	0b36      	lsrs	r6, r6, #12
 8008b36:	0d5b      	lsrs	r3, r3, #21
 8008b38:	d100      	bne.n	8008b3c <__aeabi_dmul+0x5c>
 8008b3a:	e078      	b.n	8008c2e <__aeabi_dmul+0x14e>
 8008b3c:	4ace      	ldr	r2, [pc, #824]	; (8008e78 <__aeabi_dmul+0x398>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d01d      	beq.n	8008b7e <__aeabi_dmul+0x9e>
 8008b42:	49ce      	ldr	r1, [pc, #824]	; (8008e7c <__aeabi_dmul+0x39c>)
 8008b44:	0f42      	lsrs	r2, r0, #29
 8008b46:	468c      	mov	ip, r1
 8008b48:	9900      	ldr	r1, [sp, #0]
 8008b4a:	4463      	add	r3, ip
 8008b4c:	00f6      	lsls	r6, r6, #3
 8008b4e:	468c      	mov	ip, r1
 8008b50:	4316      	orrs	r6, r2
 8008b52:	2280      	movs	r2, #128	; 0x80
 8008b54:	449c      	add	ip, r3
 8008b56:	0412      	lsls	r2, r2, #16
 8008b58:	4663      	mov	r3, ip
 8008b5a:	4316      	orrs	r6, r2
 8008b5c:	00c2      	lsls	r2, r0, #3
 8008b5e:	2000      	movs	r0, #0
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	9900      	ldr	r1, [sp, #0]
 8008b64:	4643      	mov	r3, r8
 8008b66:	3101      	adds	r1, #1
 8008b68:	468c      	mov	ip, r1
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	407b      	eors	r3, r7
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	290f      	cmp	r1, #15
 8008b72:	d900      	bls.n	8008b76 <__aeabi_dmul+0x96>
 8008b74:	e07e      	b.n	8008c74 <__aeabi_dmul+0x194>
 8008b76:	4bc2      	ldr	r3, [pc, #776]	; (8008e80 <__aeabi_dmul+0x3a0>)
 8008b78:	0089      	lsls	r1, r1, #2
 8008b7a:	5859      	ldr	r1, [r3, r1]
 8008b7c:	468f      	mov	pc, r1
 8008b7e:	4652      	mov	r2, sl
 8008b80:	9b00      	ldr	r3, [sp, #0]
 8008b82:	4332      	orrs	r2, r6
 8008b84:	d000      	beq.n	8008b88 <__aeabi_dmul+0xa8>
 8008b86:	e156      	b.n	8008e36 <__aeabi_dmul+0x356>
 8008b88:	49bb      	ldr	r1, [pc, #748]	; (8008e78 <__aeabi_dmul+0x398>)
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	468c      	mov	ip, r1
 8008b8e:	4463      	add	r3, ip
 8008b90:	4649      	mov	r1, r9
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2302      	movs	r3, #2
 8008b96:	4319      	orrs	r1, r3
 8008b98:	4689      	mov	r9, r1
 8008b9a:	2002      	movs	r0, #2
 8008b9c:	e7e1      	b.n	8008b62 <__aeabi_dmul+0x82>
 8008b9e:	4643      	mov	r3, r8
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	0034      	movs	r4, r6
 8008ba4:	0015      	movs	r5, r2
 8008ba6:	4683      	mov	fp, r0
 8008ba8:	465b      	mov	r3, fp
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d05e      	beq.n	8008c6c <__aeabi_dmul+0x18c>
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d100      	bne.n	8008bb4 <__aeabi_dmul+0xd4>
 8008bb2:	e1f3      	b.n	8008f9c <__aeabi_dmul+0x4bc>
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d000      	beq.n	8008bba <__aeabi_dmul+0xda>
 8008bb8:	e118      	b.n	8008dec <__aeabi_dmul+0x30c>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2400      	movs	r4, #0
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	0512      	lsls	r2, r2, #20
 8008bc4:	4322      	orrs	r2, r4
 8008bc6:	07db      	lsls	r3, r3, #31
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	0028      	movs	r0, r5
 8008bcc:	0011      	movs	r1, r2
 8008bce:	b007      	add	sp, #28
 8008bd0:	bcf0      	pop	{r4, r5, r6, r7}
 8008bd2:	46bb      	mov	fp, r7
 8008bd4:	46b2      	mov	sl, r6
 8008bd6:	46a9      	mov	r9, r5
 8008bd8:	46a0      	mov	r8, r4
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bdc:	0025      	movs	r5, r4
 8008bde:	4305      	orrs	r5, r0
 8008be0:	d100      	bne.n	8008be4 <__aeabi_dmul+0x104>
 8008be2:	e141      	b.n	8008e68 <__aeabi_dmul+0x388>
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d100      	bne.n	8008bea <__aeabi_dmul+0x10a>
 8008be8:	e1ad      	b.n	8008f46 <__aeabi_dmul+0x466>
 8008bea:	0020      	movs	r0, r4
 8008bec:	f000 fa92 	bl	8009114 <__clzsi2>
 8008bf0:	0001      	movs	r1, r0
 8008bf2:	0002      	movs	r2, r0
 8008bf4:	390b      	subs	r1, #11
 8008bf6:	231d      	movs	r3, #29
 8008bf8:	0010      	movs	r0, r2
 8008bfa:	1a5b      	subs	r3, r3, r1
 8008bfc:	0031      	movs	r1, r6
 8008bfe:	0035      	movs	r5, r6
 8008c00:	3808      	subs	r0, #8
 8008c02:	4084      	lsls	r4, r0
 8008c04:	40d9      	lsrs	r1, r3
 8008c06:	4085      	lsls	r5, r0
 8008c08:	430c      	orrs	r4, r1
 8008c0a:	489e      	ldr	r0, [pc, #632]	; (8008e84 <__aeabi_dmul+0x3a4>)
 8008c0c:	1a83      	subs	r3, r0, r2
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	2300      	movs	r3, #0
 8008c12:	4699      	mov	r9, r3
 8008c14:	469b      	mov	fp, r3
 8008c16:	e786      	b.n	8008b26 <__aeabi_dmul+0x46>
 8008c18:	0005      	movs	r5, r0
 8008c1a:	4325      	orrs	r5, r4
 8008c1c:	d000      	beq.n	8008c20 <__aeabi_dmul+0x140>
 8008c1e:	e11c      	b.n	8008e5a <__aeabi_dmul+0x37a>
 8008c20:	2208      	movs	r2, #8
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	2302      	movs	r3, #2
 8008c26:	2400      	movs	r4, #0
 8008c28:	4691      	mov	r9, r2
 8008c2a:	469b      	mov	fp, r3
 8008c2c:	e77b      	b.n	8008b26 <__aeabi_dmul+0x46>
 8008c2e:	4652      	mov	r2, sl
 8008c30:	4332      	orrs	r2, r6
 8008c32:	d100      	bne.n	8008c36 <__aeabi_dmul+0x156>
 8008c34:	e10a      	b.n	8008e4c <__aeabi_dmul+0x36c>
 8008c36:	2e00      	cmp	r6, #0
 8008c38:	d100      	bne.n	8008c3c <__aeabi_dmul+0x15c>
 8008c3a:	e176      	b.n	8008f2a <__aeabi_dmul+0x44a>
 8008c3c:	0030      	movs	r0, r6
 8008c3e:	f000 fa69 	bl	8009114 <__clzsi2>
 8008c42:	0002      	movs	r2, r0
 8008c44:	3a0b      	subs	r2, #11
 8008c46:	231d      	movs	r3, #29
 8008c48:	0001      	movs	r1, r0
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	3908      	subs	r1, #8
 8008c50:	40da      	lsrs	r2, r3
 8008c52:	408e      	lsls	r6, r1
 8008c54:	4316      	orrs	r6, r2
 8008c56:	4652      	mov	r2, sl
 8008c58:	408a      	lsls	r2, r1
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	4989      	ldr	r1, [pc, #548]	; (8008e84 <__aeabi_dmul+0x3a4>)
 8008c5e:	1a18      	subs	r0, r3, r0
 8008c60:	0003      	movs	r3, r0
 8008c62:	468c      	mov	ip, r1
 8008c64:	4463      	add	r3, ip
 8008c66:	2000      	movs	r0, #0
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	e77a      	b.n	8008b62 <__aeabi_dmul+0x82>
 8008c6c:	2400      	movs	r4, #0
 8008c6e:	2500      	movs	r5, #0
 8008c70:	4a81      	ldr	r2, [pc, #516]	; (8008e78 <__aeabi_dmul+0x398>)
 8008c72:	e7a5      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008c74:	0c2f      	lsrs	r7, r5, #16
 8008c76:	042d      	lsls	r5, r5, #16
 8008c78:	0c2d      	lsrs	r5, r5, #16
 8008c7a:	002b      	movs	r3, r5
 8008c7c:	0c11      	lsrs	r1, r2, #16
 8008c7e:	0412      	lsls	r2, r2, #16
 8008c80:	0c12      	lsrs	r2, r2, #16
 8008c82:	4353      	muls	r3, r2
 8008c84:	4698      	mov	r8, r3
 8008c86:	0013      	movs	r3, r2
 8008c88:	0028      	movs	r0, r5
 8008c8a:	437b      	muls	r3, r7
 8008c8c:	4699      	mov	r9, r3
 8008c8e:	4348      	muls	r0, r1
 8008c90:	4448      	add	r0, r9
 8008c92:	4683      	mov	fp, r0
 8008c94:	4640      	mov	r0, r8
 8008c96:	000b      	movs	r3, r1
 8008c98:	0c00      	lsrs	r0, r0, #16
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	437b      	muls	r3, r7
 8008ca0:	4450      	add	r0, sl
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	4581      	cmp	r9, r0
 8008ca6:	d906      	bls.n	8008cb6 <__aeabi_dmul+0x1d6>
 8008ca8:	469a      	mov	sl, r3
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	025b      	lsls	r3, r3, #9
 8008cae:	4699      	mov	r9, r3
 8008cb0:	44ca      	add	sl, r9
 8008cb2:	4653      	mov	r3, sl
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	0c03      	lsrs	r3, r0, #16
 8008cb8:	469b      	mov	fp, r3
 8008cba:	4643      	mov	r3, r8
 8008cbc:	041b      	lsls	r3, r3, #16
 8008cbe:	0400      	lsls	r0, r0, #16
 8008cc0:	0c1b      	lsrs	r3, r3, #16
 8008cc2:	4698      	mov	r8, r3
 8008cc4:	0003      	movs	r3, r0
 8008cc6:	4443      	add	r3, r8
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	0c33      	lsrs	r3, r6, #16
 8008ccc:	4699      	mov	r9, r3
 8008cce:	002b      	movs	r3, r5
 8008cd0:	0436      	lsls	r6, r6, #16
 8008cd2:	0c36      	lsrs	r6, r6, #16
 8008cd4:	4373      	muls	r3, r6
 8008cd6:	4698      	mov	r8, r3
 8008cd8:	0033      	movs	r3, r6
 8008cda:	437b      	muls	r3, r7
 8008cdc:	469a      	mov	sl, r3
 8008cde:	464b      	mov	r3, r9
 8008ce0:	435d      	muls	r5, r3
 8008ce2:	435f      	muls	r7, r3
 8008ce4:	4643      	mov	r3, r8
 8008ce6:	4455      	add	r5, sl
 8008ce8:	0c18      	lsrs	r0, r3, #16
 8008cea:	1940      	adds	r0, r0, r5
 8008cec:	4582      	cmp	sl, r0
 8008cee:	d903      	bls.n	8008cf8 <__aeabi_dmul+0x218>
 8008cf0:	2380      	movs	r3, #128	; 0x80
 8008cf2:	025b      	lsls	r3, r3, #9
 8008cf4:	469a      	mov	sl, r3
 8008cf6:	4457      	add	r7, sl
 8008cf8:	0c05      	lsrs	r5, r0, #16
 8008cfa:	19eb      	adds	r3, r5, r7
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	4643      	mov	r3, r8
 8008d00:	041d      	lsls	r5, r3, #16
 8008d02:	0c2d      	lsrs	r5, r5, #16
 8008d04:	0400      	lsls	r0, r0, #16
 8008d06:	1940      	adds	r0, r0, r5
 8008d08:	0c25      	lsrs	r5, r4, #16
 8008d0a:	0424      	lsls	r4, r4, #16
 8008d0c:	0c24      	lsrs	r4, r4, #16
 8008d0e:	0027      	movs	r7, r4
 8008d10:	4357      	muls	r7, r2
 8008d12:	436a      	muls	r2, r5
 8008d14:	4690      	mov	r8, r2
 8008d16:	002a      	movs	r2, r5
 8008d18:	0c3b      	lsrs	r3, r7, #16
 8008d1a:	469a      	mov	sl, r3
 8008d1c:	434a      	muls	r2, r1
 8008d1e:	4361      	muls	r1, r4
 8008d20:	4441      	add	r1, r8
 8008d22:	4451      	add	r1, sl
 8008d24:	4483      	add	fp, r0
 8008d26:	4588      	cmp	r8, r1
 8008d28:	d903      	bls.n	8008d32 <__aeabi_dmul+0x252>
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	025b      	lsls	r3, r3, #9
 8008d2e:	4698      	mov	r8, r3
 8008d30:	4442      	add	r2, r8
 8008d32:	043f      	lsls	r7, r7, #16
 8008d34:	0c0b      	lsrs	r3, r1, #16
 8008d36:	0c3f      	lsrs	r7, r7, #16
 8008d38:	0409      	lsls	r1, r1, #16
 8008d3a:	19c9      	adds	r1, r1, r7
 8008d3c:	0027      	movs	r7, r4
 8008d3e:	4698      	mov	r8, r3
 8008d40:	464b      	mov	r3, r9
 8008d42:	4377      	muls	r7, r6
 8008d44:	435c      	muls	r4, r3
 8008d46:	436e      	muls	r6, r5
 8008d48:	435d      	muls	r5, r3
 8008d4a:	0c3b      	lsrs	r3, r7, #16
 8008d4c:	4699      	mov	r9, r3
 8008d4e:	19a4      	adds	r4, r4, r6
 8008d50:	444c      	add	r4, r9
 8008d52:	4442      	add	r2, r8
 8008d54:	9503      	str	r5, [sp, #12]
 8008d56:	42a6      	cmp	r6, r4
 8008d58:	d904      	bls.n	8008d64 <__aeabi_dmul+0x284>
 8008d5a:	2380      	movs	r3, #128	; 0x80
 8008d5c:	025b      	lsls	r3, r3, #9
 8008d5e:	4698      	mov	r8, r3
 8008d60:	4445      	add	r5, r8
 8008d62:	9503      	str	r5, [sp, #12]
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	043f      	lsls	r7, r7, #16
 8008d68:	445b      	add	r3, fp
 8008d6a:	001e      	movs	r6, r3
 8008d6c:	4283      	cmp	r3, r0
 8008d6e:	4180      	sbcs	r0, r0
 8008d70:	0423      	lsls	r3, r4, #16
 8008d72:	4698      	mov	r8, r3
 8008d74:	9b05      	ldr	r3, [sp, #20]
 8008d76:	0c3f      	lsrs	r7, r7, #16
 8008d78:	4447      	add	r7, r8
 8008d7a:	4698      	mov	r8, r3
 8008d7c:	1876      	adds	r6, r6, r1
 8008d7e:	428e      	cmp	r6, r1
 8008d80:	4189      	sbcs	r1, r1
 8008d82:	4447      	add	r7, r8
 8008d84:	4240      	negs	r0, r0
 8008d86:	183d      	adds	r5, r7, r0
 8008d88:	46a8      	mov	r8, r5
 8008d8a:	4693      	mov	fp, r2
 8008d8c:	4249      	negs	r1, r1
 8008d8e:	468a      	mov	sl, r1
 8008d90:	44c3      	add	fp, r8
 8008d92:	429f      	cmp	r7, r3
 8008d94:	41bf      	sbcs	r7, r7
 8008d96:	4580      	cmp	r8, r0
 8008d98:	4180      	sbcs	r0, r0
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	44da      	add	sl, fp
 8008d9e:	4698      	mov	r8, r3
 8008da0:	4653      	mov	r3, sl
 8008da2:	4240      	negs	r0, r0
 8008da4:	427f      	negs	r7, r7
 8008da6:	4307      	orrs	r7, r0
 8008da8:	0c24      	lsrs	r4, r4, #16
 8008daa:	4593      	cmp	fp, r2
 8008dac:	4192      	sbcs	r2, r2
 8008dae:	458a      	cmp	sl, r1
 8008db0:	4189      	sbcs	r1, r1
 8008db2:	193f      	adds	r7, r7, r4
 8008db4:	0ddc      	lsrs	r4, r3, #23
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	0275      	lsls	r5, r6, #9
 8008dba:	431d      	orrs	r5, r3
 8008dbc:	1e68      	subs	r0, r5, #1
 8008dbe:	4185      	sbcs	r5, r0
 8008dc0:	4653      	mov	r3, sl
 8008dc2:	4252      	negs	r2, r2
 8008dc4:	4249      	negs	r1, r1
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	18bf      	adds	r7, r7, r2
 8008dca:	4447      	add	r7, r8
 8008dcc:	0df6      	lsrs	r6, r6, #23
 8008dce:	027f      	lsls	r7, r7, #9
 8008dd0:	4335      	orrs	r5, r6
 8008dd2:	025a      	lsls	r2, r3, #9
 8008dd4:	433c      	orrs	r4, r7
 8008dd6:	4315      	orrs	r5, r2
 8008dd8:	01fb      	lsls	r3, r7, #7
 8008dda:	d400      	bmi.n	8008dde <__aeabi_dmul+0x2fe>
 8008ddc:	e0c1      	b.n	8008f62 <__aeabi_dmul+0x482>
 8008dde:	2101      	movs	r1, #1
 8008de0:	086a      	lsrs	r2, r5, #1
 8008de2:	400d      	ands	r5, r1
 8008de4:	4315      	orrs	r5, r2
 8008de6:	07e2      	lsls	r2, r4, #31
 8008de8:	4315      	orrs	r5, r2
 8008dea:	0864      	lsrs	r4, r4, #1
 8008dec:	4926      	ldr	r1, [pc, #152]	; (8008e88 <__aeabi_dmul+0x3a8>)
 8008dee:	4461      	add	r1, ip
 8008df0:	2900      	cmp	r1, #0
 8008df2:	dd56      	ble.n	8008ea2 <__aeabi_dmul+0x3c2>
 8008df4:	076b      	lsls	r3, r5, #29
 8008df6:	d009      	beq.n	8008e0c <__aeabi_dmul+0x32c>
 8008df8:	220f      	movs	r2, #15
 8008dfa:	402a      	ands	r2, r5
 8008dfc:	2a04      	cmp	r2, #4
 8008dfe:	d005      	beq.n	8008e0c <__aeabi_dmul+0x32c>
 8008e00:	1d2a      	adds	r2, r5, #4
 8008e02:	42aa      	cmp	r2, r5
 8008e04:	41ad      	sbcs	r5, r5
 8008e06:	426d      	negs	r5, r5
 8008e08:	1964      	adds	r4, r4, r5
 8008e0a:	0015      	movs	r5, r2
 8008e0c:	01e3      	lsls	r3, r4, #7
 8008e0e:	d504      	bpl.n	8008e1a <__aeabi_dmul+0x33a>
 8008e10:	2180      	movs	r1, #128	; 0x80
 8008e12:	4a1e      	ldr	r2, [pc, #120]	; (8008e8c <__aeabi_dmul+0x3ac>)
 8008e14:	00c9      	lsls	r1, r1, #3
 8008e16:	4014      	ands	r4, r2
 8008e18:	4461      	add	r1, ip
 8008e1a:	4a1d      	ldr	r2, [pc, #116]	; (8008e90 <__aeabi_dmul+0x3b0>)
 8008e1c:	4291      	cmp	r1, r2
 8008e1e:	dd00      	ble.n	8008e22 <__aeabi_dmul+0x342>
 8008e20:	e724      	b.n	8008c6c <__aeabi_dmul+0x18c>
 8008e22:	0762      	lsls	r2, r4, #29
 8008e24:	08ed      	lsrs	r5, r5, #3
 8008e26:	0264      	lsls	r4, r4, #9
 8008e28:	0549      	lsls	r1, r1, #21
 8008e2a:	4315      	orrs	r5, r2
 8008e2c:	0b24      	lsrs	r4, r4, #12
 8008e2e:	0d4a      	lsrs	r2, r1, #21
 8008e30:	e6c6      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008e32:	9701      	str	r7, [sp, #4]
 8008e34:	e6b8      	b.n	8008ba8 <__aeabi_dmul+0xc8>
 8008e36:	4a10      	ldr	r2, [pc, #64]	; (8008e78 <__aeabi_dmul+0x398>)
 8008e38:	2003      	movs	r0, #3
 8008e3a:	4694      	mov	ip, r2
 8008e3c:	4463      	add	r3, ip
 8008e3e:	464a      	mov	r2, r9
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	2303      	movs	r3, #3
 8008e44:	431a      	orrs	r2, r3
 8008e46:	4691      	mov	r9, r2
 8008e48:	4652      	mov	r2, sl
 8008e4a:	e68a      	b.n	8008b62 <__aeabi_dmul+0x82>
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4319      	orrs	r1, r3
 8008e52:	4689      	mov	r9, r1
 8008e54:	2600      	movs	r6, #0
 8008e56:	2001      	movs	r0, #1
 8008e58:	e683      	b.n	8008b62 <__aeabi_dmul+0x82>
 8008e5a:	220c      	movs	r2, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	2303      	movs	r3, #3
 8008e60:	0005      	movs	r5, r0
 8008e62:	4691      	mov	r9, r2
 8008e64:	469b      	mov	fp, r3
 8008e66:	e65e      	b.n	8008b26 <__aeabi_dmul+0x46>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	4699      	mov	r9, r3
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	2400      	movs	r4, #0
 8008e74:	469b      	mov	fp, r3
 8008e76:	e656      	b.n	8008b26 <__aeabi_dmul+0x46>
 8008e78:	000007ff 	.word	0x000007ff
 8008e7c:	fffffc01 	.word	0xfffffc01
 8008e80:	0800c1d4 	.word	0x0800c1d4
 8008e84:	fffffc0d 	.word	0xfffffc0d
 8008e88:	000003ff 	.word	0x000003ff
 8008e8c:	feffffff 	.word	0xfeffffff
 8008e90:	000007fe 	.word	0x000007fe
 8008e94:	2300      	movs	r3, #0
 8008e96:	2480      	movs	r4, #128	; 0x80
 8008e98:	2500      	movs	r5, #0
 8008e9a:	4a44      	ldr	r2, [pc, #272]	; (8008fac <__aeabi_dmul+0x4cc>)
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	0324      	lsls	r4, r4, #12
 8008ea0:	e68e      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	1a40      	subs	r0, r0, r1
 8008ea6:	2838      	cmp	r0, #56	; 0x38
 8008ea8:	dd00      	ble.n	8008eac <__aeabi_dmul+0x3cc>
 8008eaa:	e686      	b.n	8008bba <__aeabi_dmul+0xda>
 8008eac:	281f      	cmp	r0, #31
 8008eae:	dd5b      	ble.n	8008f68 <__aeabi_dmul+0x488>
 8008eb0:	221f      	movs	r2, #31
 8008eb2:	0023      	movs	r3, r4
 8008eb4:	4252      	negs	r2, r2
 8008eb6:	1a51      	subs	r1, r2, r1
 8008eb8:	40cb      	lsrs	r3, r1
 8008eba:	0019      	movs	r1, r3
 8008ebc:	2820      	cmp	r0, #32
 8008ebe:	d003      	beq.n	8008ec8 <__aeabi_dmul+0x3e8>
 8008ec0:	4a3b      	ldr	r2, [pc, #236]	; (8008fb0 <__aeabi_dmul+0x4d0>)
 8008ec2:	4462      	add	r2, ip
 8008ec4:	4094      	lsls	r4, r2
 8008ec6:	4325      	orrs	r5, r4
 8008ec8:	1e6a      	subs	r2, r5, #1
 8008eca:	4195      	sbcs	r5, r2
 8008ecc:	002a      	movs	r2, r5
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	2107      	movs	r1, #7
 8008ed2:	000d      	movs	r5, r1
 8008ed4:	2400      	movs	r4, #0
 8008ed6:	4015      	ands	r5, r2
 8008ed8:	4211      	tst	r1, r2
 8008eda:	d05b      	beq.n	8008f94 <__aeabi_dmul+0x4b4>
 8008edc:	210f      	movs	r1, #15
 8008ede:	2400      	movs	r4, #0
 8008ee0:	4011      	ands	r1, r2
 8008ee2:	2904      	cmp	r1, #4
 8008ee4:	d053      	beq.n	8008f8e <__aeabi_dmul+0x4ae>
 8008ee6:	1d11      	adds	r1, r2, #4
 8008ee8:	4291      	cmp	r1, r2
 8008eea:	4192      	sbcs	r2, r2
 8008eec:	4252      	negs	r2, r2
 8008eee:	18a4      	adds	r4, r4, r2
 8008ef0:	000a      	movs	r2, r1
 8008ef2:	0223      	lsls	r3, r4, #8
 8008ef4:	d54b      	bpl.n	8008f8e <__aeabi_dmul+0x4ae>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	2400      	movs	r4, #0
 8008efa:	2500      	movs	r5, #0
 8008efc:	e660      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	421c      	tst	r4, r3
 8008f04:	d009      	beq.n	8008f1a <__aeabi_dmul+0x43a>
 8008f06:	421e      	tst	r6, r3
 8008f08:	d107      	bne.n	8008f1a <__aeabi_dmul+0x43a>
 8008f0a:	4333      	orrs	r3, r6
 8008f0c:	031c      	lsls	r4, r3, #12
 8008f0e:	4643      	mov	r3, r8
 8008f10:	0015      	movs	r5, r2
 8008f12:	0b24      	lsrs	r4, r4, #12
 8008f14:	4a25      	ldr	r2, [pc, #148]	; (8008fac <__aeabi_dmul+0x4cc>)
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	e652      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008f1a:	2280      	movs	r2, #128	; 0x80
 8008f1c:	0312      	lsls	r2, r2, #12
 8008f1e:	4314      	orrs	r4, r2
 8008f20:	0324      	lsls	r4, r4, #12
 8008f22:	4a22      	ldr	r2, [pc, #136]	; (8008fac <__aeabi_dmul+0x4cc>)
 8008f24:	0b24      	lsrs	r4, r4, #12
 8008f26:	9701      	str	r7, [sp, #4]
 8008f28:	e64a      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008f2a:	f000 f8f3 	bl	8009114 <__clzsi2>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	001a      	movs	r2, r3
 8008f32:	3215      	adds	r2, #21
 8008f34:	3020      	adds	r0, #32
 8008f36:	2a1c      	cmp	r2, #28
 8008f38:	dc00      	bgt.n	8008f3c <__aeabi_dmul+0x45c>
 8008f3a:	e684      	b.n	8008c46 <__aeabi_dmul+0x166>
 8008f3c:	4656      	mov	r6, sl
 8008f3e:	3b08      	subs	r3, #8
 8008f40:	2200      	movs	r2, #0
 8008f42:	409e      	lsls	r6, r3
 8008f44:	e689      	b.n	8008c5a <__aeabi_dmul+0x17a>
 8008f46:	f000 f8e5 	bl	8009114 <__clzsi2>
 8008f4a:	0001      	movs	r1, r0
 8008f4c:	0002      	movs	r2, r0
 8008f4e:	3115      	adds	r1, #21
 8008f50:	3220      	adds	r2, #32
 8008f52:	291c      	cmp	r1, #28
 8008f54:	dc00      	bgt.n	8008f58 <__aeabi_dmul+0x478>
 8008f56:	e64e      	b.n	8008bf6 <__aeabi_dmul+0x116>
 8008f58:	0034      	movs	r4, r6
 8008f5a:	3808      	subs	r0, #8
 8008f5c:	2500      	movs	r5, #0
 8008f5e:	4084      	lsls	r4, r0
 8008f60:	e653      	b.n	8008c0a <__aeabi_dmul+0x12a>
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	469c      	mov	ip, r3
 8008f66:	e741      	b.n	8008dec <__aeabi_dmul+0x30c>
 8008f68:	4912      	ldr	r1, [pc, #72]	; (8008fb4 <__aeabi_dmul+0x4d4>)
 8008f6a:	0022      	movs	r2, r4
 8008f6c:	4461      	add	r1, ip
 8008f6e:	002e      	movs	r6, r5
 8008f70:	408d      	lsls	r5, r1
 8008f72:	408a      	lsls	r2, r1
 8008f74:	40c6      	lsrs	r6, r0
 8008f76:	1e69      	subs	r1, r5, #1
 8008f78:	418d      	sbcs	r5, r1
 8008f7a:	4332      	orrs	r2, r6
 8008f7c:	432a      	orrs	r2, r5
 8008f7e:	40c4      	lsrs	r4, r0
 8008f80:	0753      	lsls	r3, r2, #29
 8008f82:	d0b6      	beq.n	8008ef2 <__aeabi_dmul+0x412>
 8008f84:	210f      	movs	r1, #15
 8008f86:	4011      	ands	r1, r2
 8008f88:	2904      	cmp	r1, #4
 8008f8a:	d1ac      	bne.n	8008ee6 <__aeabi_dmul+0x406>
 8008f8c:	e7b1      	b.n	8008ef2 <__aeabi_dmul+0x412>
 8008f8e:	0765      	lsls	r5, r4, #29
 8008f90:	0264      	lsls	r4, r4, #9
 8008f92:	0b24      	lsrs	r4, r4, #12
 8008f94:	08d2      	lsrs	r2, r2, #3
 8008f96:	4315      	orrs	r5, r2
 8008f98:	2200      	movs	r2, #0
 8008f9a:	e611      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008f9c:	2280      	movs	r2, #128	; 0x80
 8008f9e:	0312      	lsls	r2, r2, #12
 8008fa0:	4314      	orrs	r4, r2
 8008fa2:	0324      	lsls	r4, r4, #12
 8008fa4:	4a01      	ldr	r2, [pc, #4]	; (8008fac <__aeabi_dmul+0x4cc>)
 8008fa6:	0b24      	lsrs	r4, r4, #12
 8008fa8:	e60a      	b.n	8008bc0 <__aeabi_dmul+0xe0>
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	000007ff 	.word	0x000007ff
 8008fb0:	0000043e 	.word	0x0000043e
 8008fb4:	0000041e 	.word	0x0000041e

08008fb8 <__aeabi_d2iz>:
 8008fb8:	000a      	movs	r2, r1
 8008fba:	b530      	push	{r4, r5, lr}
 8008fbc:	4c13      	ldr	r4, [pc, #76]	; (800900c <__aeabi_d2iz+0x54>)
 8008fbe:	0053      	lsls	r3, r2, #1
 8008fc0:	0309      	lsls	r1, r1, #12
 8008fc2:	0005      	movs	r5, r0
 8008fc4:	0b09      	lsrs	r1, r1, #12
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	0d5b      	lsrs	r3, r3, #21
 8008fca:	0fd2      	lsrs	r2, r2, #31
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	dd04      	ble.n	8008fda <__aeabi_d2iz+0x22>
 8008fd0:	480f      	ldr	r0, [pc, #60]	; (8009010 <__aeabi_d2iz+0x58>)
 8008fd2:	4283      	cmp	r3, r0
 8008fd4:	dd02      	ble.n	8008fdc <__aeabi_d2iz+0x24>
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <__aeabi_d2iz+0x5c>)
 8008fd8:	18d0      	adds	r0, r2, r3
 8008fda:	bd30      	pop	{r4, r5, pc}
 8008fdc:	2080      	movs	r0, #128	; 0x80
 8008fde:	0340      	lsls	r0, r0, #13
 8008fe0:	4301      	orrs	r1, r0
 8008fe2:	480d      	ldr	r0, [pc, #52]	; (8009018 <__aeabi_d2iz+0x60>)
 8008fe4:	1ac0      	subs	r0, r0, r3
 8008fe6:	281f      	cmp	r0, #31
 8008fe8:	dd08      	ble.n	8008ffc <__aeabi_d2iz+0x44>
 8008fea:	480c      	ldr	r0, [pc, #48]	; (800901c <__aeabi_d2iz+0x64>)
 8008fec:	1ac3      	subs	r3, r0, r3
 8008fee:	40d9      	lsrs	r1, r3
 8008ff0:	000b      	movs	r3, r1
 8008ff2:	4258      	negs	r0, r3
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	d1f0      	bne.n	8008fda <__aeabi_d2iz+0x22>
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	e7ee      	b.n	8008fda <__aeabi_d2iz+0x22>
 8008ffc:	4c08      	ldr	r4, [pc, #32]	; (8009020 <__aeabi_d2iz+0x68>)
 8008ffe:	40c5      	lsrs	r5, r0
 8009000:	46a4      	mov	ip, r4
 8009002:	4463      	add	r3, ip
 8009004:	4099      	lsls	r1, r3
 8009006:	000b      	movs	r3, r1
 8009008:	432b      	orrs	r3, r5
 800900a:	e7f2      	b.n	8008ff2 <__aeabi_d2iz+0x3a>
 800900c:	000003fe 	.word	0x000003fe
 8009010:	0000041d 	.word	0x0000041d
 8009014:	7fffffff 	.word	0x7fffffff
 8009018:	00000433 	.word	0x00000433
 800901c:	00000413 	.word	0x00000413
 8009020:	fffffbed 	.word	0xfffffbed

08009024 <__aeabi_i2d>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	2800      	cmp	r0, #0
 8009028:	d016      	beq.n	8009058 <__aeabi_i2d+0x34>
 800902a:	17c3      	asrs	r3, r0, #31
 800902c:	18c5      	adds	r5, r0, r3
 800902e:	405d      	eors	r5, r3
 8009030:	0fc4      	lsrs	r4, r0, #31
 8009032:	0028      	movs	r0, r5
 8009034:	f000 f86e 	bl	8009114 <__clzsi2>
 8009038:	4a11      	ldr	r2, [pc, #68]	; (8009080 <__aeabi_i2d+0x5c>)
 800903a:	1a12      	subs	r2, r2, r0
 800903c:	280a      	cmp	r0, #10
 800903e:	dc16      	bgt.n	800906e <__aeabi_i2d+0x4a>
 8009040:	0003      	movs	r3, r0
 8009042:	002e      	movs	r6, r5
 8009044:	3315      	adds	r3, #21
 8009046:	409e      	lsls	r6, r3
 8009048:	230b      	movs	r3, #11
 800904a:	1a18      	subs	r0, r3, r0
 800904c:	40c5      	lsrs	r5, r0
 800904e:	0553      	lsls	r3, r2, #21
 8009050:	032d      	lsls	r5, r5, #12
 8009052:	0b2d      	lsrs	r5, r5, #12
 8009054:	0d5b      	lsrs	r3, r3, #21
 8009056:	e003      	b.n	8009060 <__aeabi_i2d+0x3c>
 8009058:	2400      	movs	r4, #0
 800905a:	2300      	movs	r3, #0
 800905c:	2500      	movs	r5, #0
 800905e:	2600      	movs	r6, #0
 8009060:	051b      	lsls	r3, r3, #20
 8009062:	432b      	orrs	r3, r5
 8009064:	07e4      	lsls	r4, r4, #31
 8009066:	4323      	orrs	r3, r4
 8009068:	0030      	movs	r0, r6
 800906a:	0019      	movs	r1, r3
 800906c:	bd70      	pop	{r4, r5, r6, pc}
 800906e:	380b      	subs	r0, #11
 8009070:	4085      	lsls	r5, r0
 8009072:	0553      	lsls	r3, r2, #21
 8009074:	032d      	lsls	r5, r5, #12
 8009076:	2600      	movs	r6, #0
 8009078:	0b2d      	lsrs	r5, r5, #12
 800907a:	0d5b      	lsrs	r3, r3, #21
 800907c:	e7f0      	b.n	8009060 <__aeabi_i2d+0x3c>
 800907e:	46c0      	nop			; (mov r8, r8)
 8009080:	0000041e 	.word	0x0000041e

08009084 <__aeabi_f2d>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	0043      	lsls	r3, r0, #1
 8009088:	0246      	lsls	r6, r0, #9
 800908a:	0fc4      	lsrs	r4, r0, #31
 800908c:	20fe      	movs	r0, #254	; 0xfe
 800908e:	0e1b      	lsrs	r3, r3, #24
 8009090:	1c59      	adds	r1, r3, #1
 8009092:	0a75      	lsrs	r5, r6, #9
 8009094:	4208      	tst	r0, r1
 8009096:	d00c      	beq.n	80090b2 <__aeabi_f2d+0x2e>
 8009098:	22e0      	movs	r2, #224	; 0xe0
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	4694      	mov	ip, r2
 800909e:	076d      	lsls	r5, r5, #29
 80090a0:	0b36      	lsrs	r6, r6, #12
 80090a2:	4463      	add	r3, ip
 80090a4:	051b      	lsls	r3, r3, #20
 80090a6:	4333      	orrs	r3, r6
 80090a8:	07e4      	lsls	r4, r4, #31
 80090aa:	4323      	orrs	r3, r4
 80090ac:	0028      	movs	r0, r5
 80090ae:	0019      	movs	r1, r3
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d114      	bne.n	80090e0 <__aeabi_f2d+0x5c>
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	d01b      	beq.n	80090f2 <__aeabi_f2d+0x6e>
 80090ba:	0028      	movs	r0, r5
 80090bc:	f000 f82a 	bl	8009114 <__clzsi2>
 80090c0:	280a      	cmp	r0, #10
 80090c2:	dc1c      	bgt.n	80090fe <__aeabi_f2d+0x7a>
 80090c4:	230b      	movs	r3, #11
 80090c6:	002a      	movs	r2, r5
 80090c8:	1a1b      	subs	r3, r3, r0
 80090ca:	40da      	lsrs	r2, r3
 80090cc:	0003      	movs	r3, r0
 80090ce:	3315      	adds	r3, #21
 80090d0:	409d      	lsls	r5, r3
 80090d2:	4b0e      	ldr	r3, [pc, #56]	; (800910c <__aeabi_f2d+0x88>)
 80090d4:	0312      	lsls	r2, r2, #12
 80090d6:	1a1b      	subs	r3, r3, r0
 80090d8:	055b      	lsls	r3, r3, #21
 80090da:	0b16      	lsrs	r6, r2, #12
 80090dc:	0d5b      	lsrs	r3, r3, #21
 80090de:	e7e1      	b.n	80090a4 <__aeabi_f2d+0x20>
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	d009      	beq.n	80090f8 <__aeabi_f2d+0x74>
 80090e4:	0b32      	lsrs	r2, r6, #12
 80090e6:	2680      	movs	r6, #128	; 0x80
 80090e8:	0336      	lsls	r6, r6, #12
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <__aeabi_f2d+0x8c>)
 80090ec:	076d      	lsls	r5, r5, #29
 80090ee:	4316      	orrs	r6, r2
 80090f0:	e7d8      	b.n	80090a4 <__aeabi_f2d+0x20>
 80090f2:	2300      	movs	r3, #0
 80090f4:	2600      	movs	r6, #0
 80090f6:	e7d5      	b.n	80090a4 <__aeabi_f2d+0x20>
 80090f8:	2600      	movs	r6, #0
 80090fa:	4b05      	ldr	r3, [pc, #20]	; (8009110 <__aeabi_f2d+0x8c>)
 80090fc:	e7d2      	b.n	80090a4 <__aeabi_f2d+0x20>
 80090fe:	0003      	movs	r3, r0
 8009100:	002a      	movs	r2, r5
 8009102:	3b0b      	subs	r3, #11
 8009104:	409a      	lsls	r2, r3
 8009106:	2500      	movs	r5, #0
 8009108:	e7e3      	b.n	80090d2 <__aeabi_f2d+0x4e>
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	00000389 	.word	0x00000389
 8009110:	000007ff 	.word	0x000007ff

08009114 <__clzsi2>:
 8009114:	211c      	movs	r1, #28
 8009116:	2301      	movs	r3, #1
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	4298      	cmp	r0, r3
 800911c:	d301      	bcc.n	8009122 <__clzsi2+0xe>
 800911e:	0c00      	lsrs	r0, r0, #16
 8009120:	3910      	subs	r1, #16
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	4298      	cmp	r0, r3
 8009126:	d301      	bcc.n	800912c <__clzsi2+0x18>
 8009128:	0a00      	lsrs	r0, r0, #8
 800912a:	3908      	subs	r1, #8
 800912c:	091b      	lsrs	r3, r3, #4
 800912e:	4298      	cmp	r0, r3
 8009130:	d301      	bcc.n	8009136 <__clzsi2+0x22>
 8009132:	0900      	lsrs	r0, r0, #4
 8009134:	3904      	subs	r1, #4
 8009136:	a202      	add	r2, pc, #8	; (adr r2, 8009140 <__clzsi2+0x2c>)
 8009138:	5c10      	ldrb	r0, [r2, r0]
 800913a:	1840      	adds	r0, r0, r1
 800913c:	4770      	bx	lr
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	02020304 	.word	0x02020304
 8009144:	01010101 	.word	0x01010101
	...

08009150 <can1_mcu_set_ecu_indicator_points_decode>:
__weak void can1_ecu_status_transmit_callback(can1_ecu_status_t* can1_ecu_status){
   return; 
}
 
 
uint8_t can1_mcu_set_ecu_indicator_points_decode(can1_mcu_set_ecu_indicator_points_t* can1_mcu_set_ecu_indicator_points, uint8_t data[8]){
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
    int8_t brake_light = 0;
 800915a:	200f      	movs	r0, #15
 800915c:	183b      	adds	r3, r7, r0
 800915e:	2200      	movs	r2, #0
 8009160:	701a      	strb	r2, [r3, #0]
    brake_light |= ((uint8_t)(data[0] & 0x01));
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	b25b      	sxtb	r3, r3
 8009168:	2201      	movs	r2, #1
 800916a:	4013      	ands	r3, r2
 800916c:	b259      	sxtb	r1, r3
 800916e:	183b      	adds	r3, r7, r0
 8009170:	183a      	adds	r2, r7, r0
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->brake_light = (1.0 * (double)brake_light) + 0.0;
 8009178:	183b      	adds	r3, r7, r0
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	b25b      	sxtb	r3, r3
 800917e:	0018      	movs	r0, r3
 8009180:	f7ff ff50 	bl	8009024 <__aeabi_i2d>
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	f7ff f940 	bl	800840c <__aeabi_dadd>
 800918c:	0002      	movs	r2, r0
 800918e:	000b      	movs	r3, r1
 8009190:	0010      	movs	r0, r2
 8009192:	0019      	movs	r1, r3
 8009194:	f7ff ff10 	bl	8008fb8 <__aeabi_d2iz>
 8009198:	0003      	movs	r3, r0
 800919a:	b25a      	sxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	701a      	strb	r2, [r3, #0]

    int8_t r2d_sound = 0;
 80091a0:	200e      	movs	r0, #14
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]
    r2d_sound |= ((uint8_t)(data[0] & 0x02) >> (uint8_t)1);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	105b      	asrs	r3, r3, #1
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	2201      	movs	r2, #1
 80091b2:	4013      	ands	r3, r2
 80091b4:	b259      	sxtb	r1, r3
 80091b6:	183b      	adds	r3, r7, r0
 80091b8:	183a      	adds	r2, r7, r0
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->r2d_sound = (1.0 * (double)r2d_sound) + 0.0;
 80091c0:	183b      	adds	r3, r7, r0
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	b25b      	sxtb	r3, r3
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7ff ff2c 	bl	8009024 <__aeabi_i2d>
 80091cc:	2200      	movs	r2, #0
 80091ce:	2300      	movs	r3, #0
 80091d0:	f7ff f91c 	bl	800840c <__aeabi_dadd>
 80091d4:	0002      	movs	r2, r0
 80091d6:	000b      	movs	r3, r1
 80091d8:	0010      	movs	r0, r2
 80091da:	0019      	movs	r1, r3
 80091dc:	f7ff feec 	bl	8008fb8 <__aeabi_d2iz>
 80091e0:	0003      	movs	r3, r0
 80091e2:	b25a      	sxtb	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	705a      	strb	r2, [r3, #1]

    int8_t assi_yellow_right = 0;
 80091e8:	200d      	movs	r0, #13
 80091ea:	183b      	adds	r3, r7, r0
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
    assi_yellow_right |= ((uint8_t)(data[0] & 0x04) >> (uint8_t)2);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	109b      	asrs	r3, r3, #2
 80091f6:	b25b      	sxtb	r3, r3
 80091f8:	2201      	movs	r2, #1
 80091fa:	4013      	ands	r3, r2
 80091fc:	b259      	sxtb	r1, r3
 80091fe:	183b      	adds	r3, r7, r0
 8009200:	183a      	adds	r2, r7, r0
 8009202:	7812      	ldrb	r2, [r2, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->assi_yellow_right = (1.0 * (double)assi_yellow_right) + 0.0;
 8009208:	183b      	adds	r3, r7, r0
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b25b      	sxtb	r3, r3
 800920e:	0018      	movs	r0, r3
 8009210:	f7ff ff08 	bl	8009024 <__aeabi_i2d>
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	f7ff f8f8 	bl	800840c <__aeabi_dadd>
 800921c:	0002      	movs	r2, r0
 800921e:	000b      	movs	r3, r1
 8009220:	0010      	movs	r0, r2
 8009222:	0019      	movs	r1, r3
 8009224:	f7ff fec8 	bl	8008fb8 <__aeabi_d2iz>
 8009228:	0003      	movs	r3, r0
 800922a:	b25a      	sxtb	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	709a      	strb	r2, [r3, #2]

    int8_t assi_yellow_left = 0;
 8009230:	200c      	movs	r0, #12
 8009232:	183b      	adds	r3, r7, r0
 8009234:	2200      	movs	r2, #0
 8009236:	701a      	strb	r2, [r3, #0]
    assi_yellow_left |= ((uint8_t)(data[0] & 0x08) >> (uint8_t)3);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	10db      	asrs	r3, r3, #3
 800923e:	b25b      	sxtb	r3, r3
 8009240:	2201      	movs	r2, #1
 8009242:	4013      	ands	r3, r2
 8009244:	b259      	sxtb	r1, r3
 8009246:	183b      	adds	r3, r7, r0
 8009248:	183a      	adds	r2, r7, r0
 800924a:	7812      	ldrb	r2, [r2, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->assi_yellow_left = (1.0 * (double)assi_yellow_left) + 0.0;
 8009250:	183b      	adds	r3, r7, r0
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	b25b      	sxtb	r3, r3
 8009256:	0018      	movs	r0, r3
 8009258:	f7ff fee4 	bl	8009024 <__aeabi_i2d>
 800925c:	2200      	movs	r2, #0
 800925e:	2300      	movs	r3, #0
 8009260:	f7ff f8d4 	bl	800840c <__aeabi_dadd>
 8009264:	0002      	movs	r2, r0
 8009266:	000b      	movs	r3, r1
 8009268:	0010      	movs	r0, r2
 800926a:	0019      	movs	r1, r3
 800926c:	f7ff fea4 	bl	8008fb8 <__aeabi_d2iz>
 8009270:	0003      	movs	r3, r0
 8009272:	b25a      	sxtb	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	70da      	strb	r2, [r3, #3]

    int8_t assi_yellow_rear = 0;
 8009278:	200b      	movs	r0, #11
 800927a:	183b      	adds	r3, r7, r0
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
    assi_yellow_rear |= ((uint8_t)(data[0] & 0x10) >> (uint8_t)4);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	111b      	asrs	r3, r3, #4
 8009286:	b25b      	sxtb	r3, r3
 8009288:	2201      	movs	r2, #1
 800928a:	4013      	ands	r3, r2
 800928c:	b259      	sxtb	r1, r3
 800928e:	183b      	adds	r3, r7, r0
 8009290:	183a      	adds	r2, r7, r0
 8009292:	7812      	ldrb	r2, [r2, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->assi_yellow_rear = (1.0 * (double)assi_yellow_rear) + 0.0;
 8009298:	183b      	adds	r3, r7, r0
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b25b      	sxtb	r3, r3
 800929e:	0018      	movs	r0, r3
 80092a0:	f7ff fec0 	bl	8009024 <__aeabi_i2d>
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	f7ff f8b0 	bl	800840c <__aeabi_dadd>
 80092ac:	0002      	movs	r2, r0
 80092ae:	000b      	movs	r3, r1
 80092b0:	0010      	movs	r0, r2
 80092b2:	0019      	movs	r1, r3
 80092b4:	f7ff fe80 	bl	8008fb8 <__aeabi_d2iz>
 80092b8:	0003      	movs	r3, r0
 80092ba:	b25a      	sxtb	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	711a      	strb	r2, [r3, #4]

    int8_t assi_blue_right = 0;
 80092c0:	200a      	movs	r0, #10
 80092c2:	183b      	adds	r3, r7, r0
 80092c4:	2200      	movs	r2, #0
 80092c6:	701a      	strb	r2, [r3, #0]
    assi_blue_right |= ((uint8_t)(data[0] & 0x20) >> (uint8_t)5);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	115b      	asrs	r3, r3, #5
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	2201      	movs	r2, #1
 80092d2:	4013      	ands	r3, r2
 80092d4:	b259      	sxtb	r1, r3
 80092d6:	183b      	adds	r3, r7, r0
 80092d8:	183a      	adds	r2, r7, r0
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->assi_blue_right = (1.0 * (double)assi_blue_right) + 0.0;
 80092e0:	183b      	adds	r3, r7, r0
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7ff fe9c 	bl	8009024 <__aeabi_i2d>
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	f7ff f88c 	bl	800840c <__aeabi_dadd>
 80092f4:	0002      	movs	r2, r0
 80092f6:	000b      	movs	r3, r1
 80092f8:	0010      	movs	r0, r2
 80092fa:	0019      	movs	r1, r3
 80092fc:	f7ff fe5c 	bl	8008fb8 <__aeabi_d2iz>
 8009300:	0003      	movs	r3, r0
 8009302:	b25a      	sxtb	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	715a      	strb	r2, [r3, #5]

    int8_t assi_blue_left = 0;
 8009308:	2009      	movs	r0, #9
 800930a:	183b      	adds	r3, r7, r0
 800930c:	2200      	movs	r2, #0
 800930e:	701a      	strb	r2, [r3, #0]
    assi_blue_left |= ((uint8_t)(data[0] & 0x40) >> (uint8_t)6);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	119b      	asrs	r3, r3, #6
 8009316:	b25b      	sxtb	r3, r3
 8009318:	2201      	movs	r2, #1
 800931a:	4013      	ands	r3, r2
 800931c:	b259      	sxtb	r1, r3
 800931e:	183b      	adds	r3, r7, r0
 8009320:	183a      	adds	r2, r7, r0
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->assi_blue_left = (1.0 * (double)assi_blue_left) + 0.0;
 8009328:	183b      	adds	r3, r7, r0
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	b25b      	sxtb	r3, r3
 800932e:	0018      	movs	r0, r3
 8009330:	f7ff fe78 	bl	8009024 <__aeabi_i2d>
 8009334:	2200      	movs	r2, #0
 8009336:	2300      	movs	r3, #0
 8009338:	f7ff f868 	bl	800840c <__aeabi_dadd>
 800933c:	0002      	movs	r2, r0
 800933e:	000b      	movs	r3, r1
 8009340:	0010      	movs	r0, r2
 8009342:	0019      	movs	r1, r3
 8009344:	f7ff fe38 	bl	8008fb8 <__aeabi_d2iz>
 8009348:	0003      	movs	r3, r0
 800934a:	b25a      	sxtb	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	719a      	strb	r2, [r3, #6]

    int8_t assi_blue_rear = 0;
 8009350:	2008      	movs	r0, #8
 8009352:	183b      	adds	r3, r7, r0
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
    assi_blue_rear |= ((uint8_t)(data[0] & 0x80) >> (uint8_t)7);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	09db      	lsrs	r3, r3, #7
 800935e:	b2db      	uxtb	r3, r3
 8009360:	b259      	sxtb	r1, r3
 8009362:	183b      	adds	r3, r7, r0
 8009364:	183a      	adds	r2, r7, r0
 8009366:	7812      	ldrb	r2, [r2, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ecu_indicator_points->assi_blue_rear = (1.0 * (double)assi_blue_rear) + 0.0;
 800936c:	183b      	adds	r3, r7, r0
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b25b      	sxtb	r3, r3
 8009372:	0018      	movs	r0, r3
 8009374:	f7ff fe56 	bl	8009024 <__aeabi_i2d>
 8009378:	2200      	movs	r2, #0
 800937a:	2300      	movs	r3, #0
 800937c:	f7ff f846 	bl	800840c <__aeabi_dadd>
 8009380:	0002      	movs	r2, r0
 8009382:	000b      	movs	r3, r1
 8009384:	0010      	movs	r0, r2
 8009386:	0019      	movs	r1, r3
 8009388:	f7ff fe16 	bl	8008fb8 <__aeabi_d2iz>
 800938c:	0003      	movs	r3, r0
 800938e:	b25a      	sxtb	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	71da      	strb	r2, [r3, #7]

    return 1;
 8009394:	2301      	movs	r3, #1
}
 8009396:	0018      	movs	r0, r3
 8009398:	46bd      	mov	sp, r7
 800939a:	b004      	add	sp, #16
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <can1_dbu_status_1_encode>:

 
 
uint8_t can1_dbu_status_1_encode(can1_dbu_status_1_t* can1_dbu_status_1, uint8_t data[8]) {
 80093a0:	b5b0      	push	{r4, r5, r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
    memset(data, 0, 8);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2208      	movs	r2, #8
 80093ae:	2100      	movs	r1, #0
 80093b0:	0018      	movs	r0, r3
 80093b2:	f002 fee7 	bl	800c184 <memset>
    int8_t activate_ts_button = 1.0 * ((double)can1_dbu_status_1->activate_ts_button - 0.0);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	b25b      	sxtb	r3, r3
 80093bc:	0018      	movs	r0, r3
 80093be:	f7ff fe31 	bl	8009024 <__aeabi_i2d>
 80093c2:	0002      	movs	r2, r0
 80093c4:	000b      	movs	r3, r1
 80093c6:	250f      	movs	r5, #15
 80093c8:	197c      	adds	r4, r7, r5
 80093ca:	0010      	movs	r0, r2
 80093cc:	0019      	movs	r1, r3
 80093ce:	f7ff fdf3 	bl	8008fb8 <__aeabi_d2iz>
 80093d2:	0003      	movs	r3, r0
 80093d4:	7023      	strb	r3, [r4, #0]
    data[0] |= (uint8_t)activate_ts_button & 0x01;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	b25a      	sxtb	r2, r3
 80093dc:	197b      	adds	r3, r7, r5
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2101      	movs	r1, #1
 80093e2:	400b      	ands	r3, r1
 80093e4:	b25b      	sxtb	r3, r3
 80093e6:	4313      	orrs	r3, r2
 80093e8:	b25b      	sxtb	r3, r3
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	701a      	strb	r2, [r3, #0]

    int8_t ready_to_drive_button = 1.0 * ((double)can1_dbu_status_1->ready_to_drive_button - 0.0);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	b25b      	sxtb	r3, r3
 80093f6:	0018      	movs	r0, r3
 80093f8:	f7ff fe14 	bl	8009024 <__aeabi_i2d>
 80093fc:	0002      	movs	r2, r0
 80093fe:	000b      	movs	r3, r1
 8009400:	250e      	movs	r5, #14
 8009402:	197c      	adds	r4, r7, r5
 8009404:	0010      	movs	r0, r2
 8009406:	0019      	movs	r1, r3
 8009408:	f7ff fdd6 	bl	8008fb8 <__aeabi_d2iz>
 800940c:	0003      	movs	r3, r0
 800940e:	7023      	strb	r3, [r4, #0]
    data[0] |= (uint8_t)((uint8_t)ready_to_drive_button << (uint8_t)1) & 0x02;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b25a      	sxtb	r2, r3
 8009416:	197b      	adds	r3, r7, r5
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	18db      	adds	r3, r3, r3
 800941c:	b2db      	uxtb	r3, r3
 800941e:	b25b      	sxtb	r3, r3
 8009420:	2102      	movs	r1, #2
 8009422:	400b      	ands	r3, r1
 8009424:	b25b      	sxtb	r3, r3
 8009426:	4313      	orrs	r3, r2
 8009428:	b25b      	sxtb	r3, r3
 800942a:	b2da      	uxtb	r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	701a      	strb	r2, [r3, #0]

    int16_t dbu_temperature = 20.475020475020475 * ((double)can1_dbu_status_1->dbu_temperature - -10.0);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	1c18      	adds	r0, r3, #0
 8009436:	f7ff fe25 	bl	8009084 <__aeabi_f2d>
 800943a:	2200      	movs	r2, #0
 800943c:	4b23      	ldr	r3, [pc, #140]	; (80094cc <can1_dbu_status_1_encode+0x12c>)
 800943e:	f7fe ffe5 	bl	800840c <__aeabi_dadd>
 8009442:	0002      	movs	r2, r0
 8009444:	000b      	movs	r3, r1
 8009446:	0010      	movs	r0, r2
 8009448:	0019      	movs	r1, r3
 800944a:	4a21      	ldr	r2, [pc, #132]	; (80094d0 <can1_dbu_status_1_encode+0x130>)
 800944c:	4b21      	ldr	r3, [pc, #132]	; (80094d4 <can1_dbu_status_1_encode+0x134>)
 800944e:	f7ff fb47 	bl	8008ae0 <__aeabi_dmul>
 8009452:	0002      	movs	r2, r0
 8009454:	000b      	movs	r3, r1
 8009456:	250c      	movs	r5, #12
 8009458:	197c      	adds	r4, r7, r5
 800945a:	0010      	movs	r0, r2
 800945c:	0019      	movs	r1, r3
 800945e:	f7ff fdab 	bl	8008fb8 <__aeabi_d2iz>
 8009462:	0003      	movs	r3, r0
 8009464:	8023      	strh	r3, [r4, #0]
    data[0] |= (uint8_t)((uint16_t)dbu_temperature << (uint16_t)4) & 0xf0;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	b25a      	sxtb	r2, r3
 800946c:	0028      	movs	r0, r5
 800946e:	183b      	adds	r3, r7, r0
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	b2db      	uxtb	r3, r3
 8009478:	b25b      	sxtb	r3, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	b25b      	sxtb	r3, r3
 800947e:	b2da      	uxtb	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	701a      	strb	r2, [r3, #0]
    data[1] |= (uint8_t)((uint16_t)dbu_temperature >> (uint16_t)4) & 0xff;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	7819      	ldrb	r1, [r3, #0]
 800948a:	183b      	adds	r3, r7, r0
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	091b      	lsrs	r3, r3, #4
 8009490:	b29b      	uxth	r3, r3
 8009492:	b2da      	uxtb	r2, r3
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	3301      	adds	r3, #1
 8009498:	430a      	orrs	r2, r1
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]

    if((can1_dbu_status_1->dbu_temperature < -10) || (190 < can1_dbu_status_1->dbu_temperature)) return 0;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	490d      	ldr	r1, [pc, #52]	; (80094d8 <can1_dbu_status_1_encode+0x138>)
 80094a4:	1c18      	adds	r0, r3, #0
 80094a6:	f7fe fecb 	bl	8008240 <__aeabi_fcmplt>
 80094aa:	1e03      	subs	r3, r0, #0
 80094ac:	d107      	bne.n	80094be <can1_dbu_status_1_encode+0x11e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	490a      	ldr	r1, [pc, #40]	; (80094dc <can1_dbu_status_1_encode+0x13c>)
 80094b4:	1c18      	adds	r0, r3, #0
 80094b6:	f7fe fed7 	bl	8008268 <__aeabi_fcmpgt>
 80094ba:	1e03      	subs	r3, r0, #0
 80094bc:	d001      	beq.n	80094c2 <can1_dbu_status_1_encode+0x122>
 80094be:	2300      	movs	r3, #0
 80094c0:	e000      	b.n	80094c4 <can1_dbu_status_1_encode+0x124>
    return 1;
 80094c2:	2301      	movs	r3, #1
}
 80094c4:	0018      	movs	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b004      	add	sp, #16
 80094ca:	bdb0      	pop	{r4, r5, r7, pc}
 80094cc:	40240000 	.word	0x40240000
 80094d0:	f11d24b1 	.word	0xf11d24b1
 80094d4:	4034799a 	.word	0x4034799a
 80094d8:	c1200000 	.word	0xc1200000
 80094dc:	433e0000 	.word	0x433e0000

080094e0 <can1_ecu_status_encode>:

 
uint8_t can1_ecu_status_encode(can1_ecu_status_t* can1_ecu_status, uint8_t data[8]) {
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
    memset(data, 0, 8);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2208      	movs	r2, #8
 80094ee:	2100      	movs	r1, #0
 80094f0:	0018      	movs	r0, r3
 80094f2:	f002 fe47 	bl	800c184 <memset>
    int8_t rst_button = 1.0 * ((double)can1_ecu_status->rst_button - 0.0);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	0018      	movs	r0, r3
 80094fe:	f7ff fd91 	bl	8009024 <__aeabi_i2d>
 8009502:	0002      	movs	r2, r0
 8009504:	000b      	movs	r3, r1
 8009506:	250f      	movs	r5, #15
 8009508:	197c      	adds	r4, r7, r5
 800950a:	0010      	movs	r0, r2
 800950c:	0019      	movs	r1, r3
 800950e:	f7ff fd53 	bl	8008fb8 <__aeabi_d2iz>
 8009512:	0003      	movs	r3, r0
 8009514:	7023      	strb	r3, [r4, #0]
    data[0] |= (uint8_t)rst_button & 0xff;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781a      	ldrb	r2, [r3, #0]
 800951a:	197b      	adds	r3, r7, r5
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	4313      	orrs	r3, r2
 8009520:	b2da      	uxtb	r2, r3
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	701a      	strb	r2, [r3, #0]

    int8_t close_airs = 1.0 * ((double)can1_ecu_status->close_airs - 0.0);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	b25b      	sxtb	r3, r3
 800952c:	0018      	movs	r0, r3
 800952e:	f7ff fd79 	bl	8009024 <__aeabi_i2d>
 8009532:	0002      	movs	r2, r0
 8009534:	000b      	movs	r3, r1
 8009536:	250e      	movs	r5, #14
 8009538:	197c      	adds	r4, r7, r5
 800953a:	0010      	movs	r0, r2
 800953c:	0019      	movs	r1, r3
 800953e:	f7ff fd3b 	bl	8008fb8 <__aeabi_d2iz>
 8009542:	0003      	movs	r3, r0
 8009544:	7023      	strb	r3, [r4, #0]
    data[1] |= (uint8_t)close_airs & 0xff;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	7819      	ldrb	r1, [r3, #0]
 800954c:	197b      	adds	r3, r7, r5
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	430a      	orrs	r2, r1
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]

    int8_t ts_off = 1.0 * ((double)can1_ecu_status->ts_off - 0.0);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	789b      	ldrb	r3, [r3, #2]
 800955e:	b25b      	sxtb	r3, r3
 8009560:	0018      	movs	r0, r3
 8009562:	f7ff fd5f 	bl	8009024 <__aeabi_i2d>
 8009566:	0002      	movs	r2, r0
 8009568:	000b      	movs	r3, r1
 800956a:	250d      	movs	r5, #13
 800956c:	197c      	adds	r4, r7, r5
 800956e:	0010      	movs	r0, r2
 8009570:	0019      	movs	r1, r3
 8009572:	f7ff fd21 	bl	8008fb8 <__aeabi_d2iz>
 8009576:	0003      	movs	r3, r0
 8009578:	7023      	strb	r3, [r4, #0]
    data[2] |= (uint8_t)ts_off & 0xff;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	3302      	adds	r3, #2
 800957e:	7819      	ldrb	r1, [r3, #0]
 8009580:	197b      	adds	r3, r7, r5
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	3302      	adds	r3, #2
 8009588:	430a      	orrs	r2, r1
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]

    return 1;
 800958e:	2301      	movs	r3, #1
}
 8009590:	0018      	movs	r0, r3
 8009592:	46bd      	mov	sp, r7
 8009594:	b004      	add	sp, #16
 8009596:	bdb0      	pop	{r4, r5, r7, pc}

08009598 <HAL_CAN_RxFifo0MsgPendingCallback>:
#include "kthfspe_can.h"
 
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
   if(hcan == _can1) {
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d102      	bne.n	80095b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
       receive_callback_can_hal_can1(CAN_RX_FIFO0);
 80095aa:	2000      	movs	r0, #0
 80095ac:	f000 f818 	bl	80095e0 <receive_callback_can_hal_can1>
   }
 
}
 80095b0:	46c0      	nop			; (mov r8, r8)
 80095b2:	46bd      	mov	sp, r7
 80095b4:	b002      	add	sp, #8
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000430 	.word	0x20000430

080095bc <HAL_CAN_RxFifo1MsgPendingCallback>:
 
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
   if(hcan == _can1) {
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d102      	bne.n	80095d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18>
       receive_callback_can_hal_can1(CAN_RX_FIFO1);
 80095ce:	2001      	movs	r0, #1
 80095d0:	f000 f806 	bl	80095e0 <receive_callback_can_hal_can1>
   }
 
}
 80095d4:	46c0      	nop			; (mov r8, r8)
 80095d6:	46bd      	mov	sp, r7
 80095d8:	b002      	add	sp, #8
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000430 	.word	0x20000430

080095e0 <receive_callback_can_hal_can1>:
can1_mcu_set_ecu_indicator_points_t rx_can1_mcu_set_ecu_indicator_points;
 
can1_dbu_status_1_t tx_can1_dbu_status_1;
can1_ecu_status_t tx_can1_ecu_status;
 
void receive_callback_can_hal_can1(uint32_t FIFO) {
 80095e0:	b5b0      	push	{r4, r5, r7, lr}
 80095e2:	b08c      	sub	sp, #48	; 0x30
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef header;
   uint8_t data[8]; 
 
   if (HAL_OK == HAL_CAN_GetRxMessage(_can1, FIFO, &header, data)) {
 80095e8:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <receive_callback_can_hal_can1+0x48>)
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	240c      	movs	r4, #12
 80095ee:	193b      	adds	r3, r7, r4
 80095f0:	2514      	movs	r5, #20
 80095f2:	197a      	adds	r2, r7, r5
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	f001 f827 	bl	800a648 <HAL_CAN_GetRxMessage>
 80095fa:	1e03      	subs	r3, r0, #0
 80095fc:	d10f      	bne.n	800961e <receive_callback_can_hal_can1+0x3e>
       switch(header.StdId) {
 80095fe:	197b      	adds	r3, r7, r5
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a0a      	ldr	r2, [pc, #40]	; (800962c <receive_callback_can_hal_can1+0x4c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d10b      	bne.n	8009620 <receive_callback_can_hal_can1+0x40>
           case 1292: {
               if(can1_mcu_set_ecu_indicator_points_decode(&rx_can1_mcu_set_ecu_indicator_points, data) || !CAN_VALID) {
 8009608:	193a      	adds	r2, r7, r4
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <receive_callback_can_hal_can1+0x50>)
 800960c:	0011      	movs	r1, r2
 800960e:	0018      	movs	r0, r3
 8009610:	f7ff fd9e 	bl	8009150 <can1_mcu_set_ecu_indicator_points_decode>
                   if(CAN_PARTIAL || can1_mcu_set_ecu_indicator_points_counter()) {
                       can1_mcu_set_ecu_indicator_points_receive_callback(&rx_can1_mcu_set_ecu_indicator_points);
 8009614:	4b06      	ldr	r3, [pc, #24]	; (8009630 <receive_callback_can_hal_can1+0x50>)
 8009616:	0018      	movs	r0, r3
 8009618:	f000 fa36 	bl	8009a88 <can1_mcu_set_ecu_indicator_points_receive_callback>
                   }
               }
           }
           break;
 800961c:	e000      	b.n	8009620 <receive_callback_can_hal_can1+0x40>
        }
    }
 800961e:	46c0      	nop			; (mov r8, r8)
}
 8009620:	46c0      	nop			; (mov r8, r8)
 8009622:	46bd      	mov	sp, r7
 8009624:	b00c      	add	sp, #48	; 0x30
 8009626:	bdb0      	pop	{r4, r5, r7, pc}
 8009628:	20000430 	.word	0x20000430
 800962c:	0000050c 	.word	0x0000050c
 8009630:	20000434 	.word	0x20000434

08009634 <can1_dbu_status_1_transmit>:
 
void can1_dbu_status_1_transmit() {
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b089      	sub	sp, #36	; 0x24
 8009638:	af00      	add	r7, sp, #0
    uint8_t data[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
 800963a:	2418      	movs	r4, #24
 800963c:	193b      	adds	r3, r7, r4
 800963e:	4a19      	ldr	r2, [pc, #100]	; (80096a4 <can1_dbu_status_1_transmit+0x70>)
 8009640:	ca03      	ldmia	r2!, {r0, r1}
 8009642:	c303      	stmia	r3!, {r0, r1}
    CAN_TxHeaderTypeDef header = {
 8009644:	003b      	movs	r3, r7
 8009646:	0018      	movs	r0, r3
 8009648:	2318      	movs	r3, #24
 800964a:	001a      	movs	r2, r3
 800964c:	2100      	movs	r1, #0
 800964e:	f002 fd99 	bl	800c184 <memset>
 8009652:	003b      	movs	r3, r7
 8009654:	2240      	movs	r2, #64	; 0x40
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	003b      	movs	r3, r7
 800965a:	2208      	movs	r2, #8
 800965c:	611a      	str	r2, [r3, #16]
        .StdId = 64,
        .RTR = CAN_RTR_DATA,
        .TransmitGlobalTime = DISABLE,
    };
 
   can1_dbu_status_1_transmit_callback(&tx_can1_dbu_status_1);
 800965e:	4b12      	ldr	r3, [pc, #72]	; (80096a8 <can1_dbu_status_1_transmit+0x74>)
 8009660:	0018      	movs	r0, r3
 8009662:	f000 fa6b 	bl	8009b3c <can1_dbu_status_1_transmit_callback>
 
    can1_dbu_status_1_encode(&tx_can1_dbu_status_1, data);
 8009666:	193a      	adds	r2, r7, r4
 8009668:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <can1_dbu_status_1_transmit+0x74>)
 800966a:	0011      	movs	r1, r2
 800966c:	0018      	movs	r0, r3
 800966e:	f7ff fe97 	bl	80093a0 <can1_dbu_status_1_encode>
    while(!HAL_CAN_GetTxMailboxesFreeLevel(_can1));
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <can1_dbu_status_1_transmit+0x78>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	0018      	movs	r0, r3
 800967a:	f000 ffad 	bl	800a5d8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800967e:	1e03      	subs	r3, r0, #0
 8009680:	d0f8      	beq.n	8009674 <can1_dbu_status_1_transmit+0x40>
    if (HAL_CAN_AddTxMessage(_can1, &header, data, &mailbox) != HAL_OK) {
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <can1_dbu_status_1_transmit+0x78>)
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <can1_dbu_status_1_transmit+0x7c>)
 8009688:	2218      	movs	r2, #24
 800968a:	18ba      	adds	r2, r7, r2
 800968c:	0039      	movs	r1, r7
 800968e:	f000 fec5 	bl	800a41c <HAL_CAN_AddTxMessage>
 8009692:	1e03      	subs	r3, r0, #0
 8009694:	d001      	beq.n	800969a <can1_dbu_status_1_transmit+0x66>
        Error_Handler();
 8009696:	f000 fac7 	bl	8009c28 <Error_Handler>
    }
}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	46bd      	mov	sp, r7
 800969e:	b009      	add	sp, #36	; 0x24
 80096a0:	bd90      	pop	{r4, r7, pc}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	0800c1ac 	.word	0x0800c1ac
 80096a8:	2000043c 	.word	0x2000043c
 80096ac:	20000430 	.word	0x20000430
 80096b0:	20000428 	.word	0x20000428

080096b4 <can1_ecu_status_transmit>:
void can1_ecu_status_transmit() {
 80096b4:	b590      	push	{r4, r7, lr}
 80096b6:	b089      	sub	sp, #36	; 0x24
 80096b8:	af00      	add	r7, sp, #0
    uint8_t data[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
 80096ba:	2418      	movs	r4, #24
 80096bc:	193b      	adds	r3, r7, r4
 80096be:	4a19      	ldr	r2, [pc, #100]	; (8009724 <can1_ecu_status_transmit+0x70>)
 80096c0:	ca03      	ldmia	r2!, {r0, r1}
 80096c2:	c303      	stmia	r3!, {r0, r1}
    CAN_TxHeaderTypeDef header = {
 80096c4:	003b      	movs	r3, r7
 80096c6:	0018      	movs	r0, r3
 80096c8:	2318      	movs	r3, #24
 80096ca:	001a      	movs	r2, r3
 80096cc:	2100      	movs	r1, #0
 80096ce:	f002 fd59 	bl	800c184 <memset>
 80096d2:	003b      	movs	r3, r7
 80096d4:	2248      	movs	r2, #72	; 0x48
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	003b      	movs	r3, r7
 80096da:	2208      	movs	r2, #8
 80096dc:	611a      	str	r2, [r3, #16]
        .StdId = 72,
        .RTR = CAN_RTR_DATA,
        .TransmitGlobalTime = DISABLE,
    };
 
   can1_ecu_status_transmit_callback(&tx_can1_ecu_status);
 80096de:	4b12      	ldr	r3, [pc, #72]	; (8009728 <can1_ecu_status_transmit+0x74>)
 80096e0:	0018      	movs	r0, r3
 80096e2:	f000 fa03 	bl	8009aec <can1_ecu_status_transmit_callback>
 
    can1_ecu_status_encode(&tx_can1_ecu_status, data);
 80096e6:	193a      	adds	r2, r7, r4
 80096e8:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <can1_ecu_status_transmit+0x74>)
 80096ea:	0011      	movs	r1, r2
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7ff fef7 	bl	80094e0 <can1_ecu_status_encode>
    while(!HAL_CAN_GetTxMailboxesFreeLevel(_can1));
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	4b0d      	ldr	r3, [pc, #52]	; (800972c <can1_ecu_status_transmit+0x78>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	0018      	movs	r0, r3
 80096fa:	f000 ff6d 	bl	800a5d8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80096fe:	1e03      	subs	r3, r0, #0
 8009700:	d0f8      	beq.n	80096f4 <can1_ecu_status_transmit+0x40>
    if (HAL_CAN_AddTxMessage(_can1, &header, data, &mailbox) != HAL_OK) {
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <can1_ecu_status_transmit+0x78>)
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <can1_ecu_status_transmit+0x7c>)
 8009708:	2218      	movs	r2, #24
 800970a:	18ba      	adds	r2, r7, r2
 800970c:	0039      	movs	r1, r7
 800970e:	f000 fe85 	bl	800a41c <HAL_CAN_AddTxMessage>
 8009712:	1e03      	subs	r3, r0, #0
 8009714:	d001      	beq.n	800971a <can1_ecu_status_transmit+0x66>
        Error_Handler();
 8009716:	f000 fa87 	bl	8009c28 <Error_Handler>
    }
}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	46bd      	mov	sp, r7
 800971e:	b009      	add	sp, #36	; 0x24
 8009720:	bd90      	pop	{r4, r7, pc}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	0800c1ac 	.word	0x0800c1ac
 8009728:	20000444 	.word	0x20000444
 800972c:	20000430 	.word	0x20000430
 8009730:	20000428 	.word	0x20000428

08009734 <init_peripheral_can_hal_can1>:
 
uint8_t init_peripheral_can_hal_can1(CAN_HandleTypeDef* __can1){
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
   _can1 = __can1;
 800973c:	4b12      	ldr	r3, [pc, #72]	; (8009788 <init_peripheral_can_hal_can1+0x54>)
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
 
   if (HAL_CAN_Start(_can1) != HAL_OK) {
 8009742:	4b11      	ldr	r3, [pc, #68]	; (8009788 <init_peripheral_can_hal_can1+0x54>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	0018      	movs	r0, r3
 8009748:	f000 fddc 	bl	800a304 <HAL_CAN_Start>
 800974c:	1e03      	subs	r3, r0, #0
 800974e:	d001      	beq.n	8009754 <init_peripheral_can_hal_can1+0x20>
       return 0;
 8009750:	2300      	movs	r3, #0
 8009752:	e015      	b.n	8009780 <init_peripheral_can_hal_can1+0x4c>
   }
   if (HAL_CAN_WakeUp(_can1) != HAL_OK) {
 8009754:	4b0c      	ldr	r3, [pc, #48]	; (8009788 <init_peripheral_can_hal_can1+0x54>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	0018      	movs	r0, r3
 800975a:	f000 fe19 	bl	800a390 <HAL_CAN_WakeUp>
 800975e:	1e03      	subs	r3, r0, #0
 8009760:	d001      	beq.n	8009766 <init_peripheral_can_hal_can1+0x32>
       return 0;
 8009762:	2300      	movs	r3, #0
 8009764:	e00c      	b.n	8009780 <init_peripheral_can_hal_can1+0x4c>
   }
   if (HAL_CAN_ActivateNotification(_can1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8009766:	4b08      	ldr	r3, [pc, #32]	; (8009788 <init_peripheral_can_hal_can1+0x54>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2112      	movs	r1, #18
 800976c:	0018      	movs	r0, r3
 800976e:	f001 f887 	bl	800a880 <HAL_CAN_ActivateNotification>
 8009772:	1e03      	subs	r3, r0, #0
 8009774:	d001      	beq.n	800977a <init_peripheral_can_hal_can1+0x46>
       return 0;
 8009776:	2300      	movs	r3, #0
 8009778:	e002      	b.n	8009780 <init_peripheral_can_hal_can1+0x4c>
   }
 
   return init_filter_can_hal_can1();
 800977a:	f000 f807 	bl	800978c <init_filter_can_hal_can1>
 800977e:	0003      	movs	r3, r0
}
 8009780:	0018      	movs	r0, r3
 8009782:	46bd      	mov	sp, r7
 8009784:	b002      	add	sp, #8
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20000430 	.word	0x20000430

0800978c <init_filter_can_hal_can1>:
 
uint8_t init_filter_can_hal_can1(){
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef filter_config;
   filter_config.FilterActivation = ENABLE;
 8009792:	003b      	movs	r3, r7
 8009794:	2201      	movs	r2, #1
 8009796:	621a      	str	r2, [r3, #32]
   filter_config.FilterScale = CAN_FILTERSCALE_16BIT;
 8009798:	003b      	movs	r3, r7
 800979a:	2200      	movs	r2, #0
 800979c:	61da      	str	r2, [r3, #28]
 
   filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800979e:	003b      	movs	r3, r7
 80097a0:	2200      	movs	r2, #0
 80097a2:	619a      	str	r2, [r3, #24]
   filter_config.FilterBank = filter_counter++;
 80097a4:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <init_filter_can_hal_can1+0x84>)
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	b291      	uxth	r1, r2
 80097ac:	4a18      	ldr	r2, [pc, #96]	; (8009810 <init_filter_can_hal_can1+0x84>)
 80097ae:	8011      	strh	r1, [r2, #0]
 80097b0:	001a      	movs	r2, r3
 80097b2:	003b      	movs	r3, r7
 80097b4:	615a      	str	r2, [r3, #20]
   filter_config.FilterMaskIdHigh = (0xffff << 5) & 0xffff;
 80097b6:	003b      	movs	r3, r7
 80097b8:	4a16      	ldr	r2, [pc, #88]	; (8009814 <init_filter_can_hal_can1+0x88>)
 80097ba:	609a      	str	r2, [r3, #8]
   filter_config.FilterIdHigh = (0x050c << 5) & 0xffff;
 80097bc:	003b      	movs	r3, r7
 80097be:	4a16      	ldr	r2, [pc, #88]	; (8009818 <init_filter_can_hal_can1+0x8c>)
 80097c0:	601a      	str	r2, [r3, #0]
   filter_config.FilterMaskIdLow = (0xffff << 5) & 0xffff;
 80097c2:	003b      	movs	r3, r7
 80097c4:	4a13      	ldr	r2, [pc, #76]	; (8009814 <init_filter_can_hal_can1+0x88>)
 80097c6:	60da      	str	r2, [r3, #12]
   filter_config.FilterIdLow = (0x0000 << 5) & 0xffff;
 80097c8:	003b      	movs	r3, r7
 80097ca:	2200      	movs	r2, #0
 80097cc:	605a      	str	r2, [r3, #4]
 
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80097ce:	003b      	movs	r3, r7
 80097d0:	2200      	movs	r2, #0
 80097d2:	611a      	str	r2, [r3, #16]
   if (HAL_CAN_ConfigFilter(_can1, &filter_config) != HAL_OK) return 0;
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <init_filter_can_hal_can1+0x90>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	003a      	movs	r2, r7
 80097da:	0011      	movs	r1, r2
 80097dc:	0018      	movs	r0, r3
 80097de:	f000 fc9f 	bl	800a120 <HAL_CAN_ConfigFilter>
 80097e2:	1e03      	subs	r3, r0, #0
 80097e4:	d001      	beq.n	80097ea <init_filter_can_hal_can1+0x5e>
 80097e6:	2300      	movs	r3, #0
 80097e8:	e00e      	b.n	8009808 <init_filter_can_hal_can1+0x7c>
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80097ea:	003b      	movs	r3, r7
 80097ec:	2201      	movs	r2, #1
 80097ee:	611a      	str	r2, [r3, #16]
   if (HAL_CAN_ConfigFilter(_can1, &filter_config) != HAL_OK) return 0;
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <init_filter_can_hal_can1+0x90>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	003a      	movs	r2, r7
 80097f6:	0011      	movs	r1, r2
 80097f8:	0018      	movs	r0, r3
 80097fa:	f000 fc91 	bl	800a120 <HAL_CAN_ConfigFilter>
 80097fe:	1e03      	subs	r3, r0, #0
 8009800:	d001      	beq.n	8009806 <init_filter_can_hal_can1+0x7a>
 8009802:	2300      	movs	r3, #0
 8009804:	e000      	b.n	8009808 <init_filter_can_hal_can1+0x7c>
 
   return 1;
 8009806:	2301      	movs	r3, #1
}
 8009808:	0018      	movs	r0, r3
 800980a:	46bd      	mov	sp, r7
 800980c:	b00a      	add	sp, #40	; 0x28
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2000042c 	.word	0x2000042c
 8009814:	0000ffe0 	.word	0x0000ffe0
 8009818:	0000a180 	.word	0x0000a180
 800981c:	20000430 	.word	0x20000430

08009820 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8009824:	4b18      	ldr	r3, [pc, #96]	; (8009888 <MX_CAN_Init+0x68>)
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <MX_CAN_Init+0x6c>)
 8009828:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800982a:	4b17      	ldr	r3, [pc, #92]	; (8009888 <MX_CAN_Init+0x68>)
 800982c:	2203      	movs	r2, #3
 800982e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009830:	4b15      	ldr	r3, [pc, #84]	; (8009888 <MX_CAN_Init+0x68>)
 8009832:	2200      	movs	r2, #0
 8009834:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009836:	4b14      	ldr	r3, [pc, #80]	; (8009888 <MX_CAN_Init+0x68>)
 8009838:	2200      	movs	r2, #0
 800983a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800983c:	4b12      	ldr	r3, [pc, #72]	; (8009888 <MX_CAN_Init+0x68>)
 800983e:	22c0      	movs	r2, #192	; 0xc0
 8009840:	0312      	lsls	r2, r2, #12
 8009842:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8009844:	4b10      	ldr	r3, [pc, #64]	; (8009888 <MX_CAN_Init+0x68>)
 8009846:	2280      	movs	r2, #128	; 0x80
 8009848:	0352      	lsls	r2, r2, #13
 800984a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800984c:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <MX_CAN_Init+0x68>)
 800984e:	2200      	movs	r2, #0
 8009850:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009852:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <MX_CAN_Init+0x68>)
 8009854:	2200      	movs	r2, #0
 8009856:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009858:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <MX_CAN_Init+0x68>)
 800985a:	2200      	movs	r2, #0
 800985c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800985e:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <MX_CAN_Init+0x68>)
 8009860:	2200      	movs	r2, #0
 8009862:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009864:	4b08      	ldr	r3, [pc, #32]	; (8009888 <MX_CAN_Init+0x68>)
 8009866:	2200      	movs	r2, #0
 8009868:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800986a:	4b07      	ldr	r3, [pc, #28]	; (8009888 <MX_CAN_Init+0x68>)
 800986c:	2200      	movs	r2, #0
 800986e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009870:	4b05      	ldr	r3, [pc, #20]	; (8009888 <MX_CAN_Init+0x68>)
 8009872:	0018      	movs	r0, r3
 8009874:	f000 fb56 	bl	8009f24 <HAL_CAN_Init>
 8009878:	1e03      	subs	r3, r0, #0
 800987a:	d001      	beq.n	8009880 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800987c:	f000 f9d4 	bl	8009c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8009880:	46c0      	nop			; (mov r8, r8)
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	46c0      	nop			; (mov r8, r8)
 8009888:	20000448 	.word	0x20000448
 800988c:	40006400 	.word	0x40006400

08009890 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8009890:	b590      	push	{r4, r7, lr}
 8009892:	b08b      	sub	sp, #44	; 0x2c
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009898:	2414      	movs	r4, #20
 800989a:	193b      	adds	r3, r7, r4
 800989c:	0018      	movs	r0, r3
 800989e:	2314      	movs	r3, #20
 80098a0:	001a      	movs	r2, r3
 80098a2:	2100      	movs	r1, #0
 80098a4:	f002 fc6e 	bl	800c184 <memset>
  if(canHandle->Instance==CAN)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a21      	ldr	r2, [pc, #132]	; (8009934 <HAL_CAN_MspInit+0xa4>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d13b      	bne.n	800992a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80098b2:	4b21      	ldr	r3, [pc, #132]	; (8009938 <HAL_CAN_MspInit+0xa8>)
 80098b4:	69da      	ldr	r2, [r3, #28]
 80098b6:	4b20      	ldr	r3, [pc, #128]	; (8009938 <HAL_CAN_MspInit+0xa8>)
 80098b8:	2180      	movs	r1, #128	; 0x80
 80098ba:	0489      	lsls	r1, r1, #18
 80098bc:	430a      	orrs	r2, r1
 80098be:	61da      	str	r2, [r3, #28]
 80098c0:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <HAL_CAN_MspInit+0xa8>)
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	2380      	movs	r3, #128	; 0x80
 80098c6:	049b      	lsls	r3, r3, #18
 80098c8:	4013      	ands	r3, r2
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ce:	4b1a      	ldr	r3, [pc, #104]	; (8009938 <HAL_CAN_MspInit+0xa8>)
 80098d0:	695a      	ldr	r2, [r3, #20]
 80098d2:	4b19      	ldr	r3, [pc, #100]	; (8009938 <HAL_CAN_MspInit+0xa8>)
 80098d4:	2180      	movs	r1, #128	; 0x80
 80098d6:	0289      	lsls	r1, r1, #10
 80098d8:	430a      	orrs	r2, r1
 80098da:	615a      	str	r2, [r3, #20]
 80098dc:	4b16      	ldr	r3, [pc, #88]	; (8009938 <HAL_CAN_MspInit+0xa8>)
 80098de:	695a      	ldr	r2, [r3, #20]
 80098e0:	2380      	movs	r3, #128	; 0x80
 80098e2:	029b      	lsls	r3, r3, #10
 80098e4:	4013      	ands	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	22c0      	movs	r2, #192	; 0xc0
 80098ee:	0152      	lsls	r2, r2, #5
 80098f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098f2:	0021      	movs	r1, r4
 80098f4:	187b      	adds	r3, r7, r1
 80098f6:	2202      	movs	r2, #2
 80098f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098fa:	187b      	adds	r3, r7, r1
 80098fc:	2200      	movs	r2, #0
 80098fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009900:	187b      	adds	r3, r7, r1
 8009902:	2203      	movs	r2, #3
 8009904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8009906:	187b      	adds	r3, r7, r1
 8009908:	2204      	movs	r2, #4
 800990a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800990c:	187a      	adds	r2, r7, r1
 800990e:	2390      	movs	r3, #144	; 0x90
 8009910:	05db      	lsls	r3, r3, #23
 8009912:	0011      	movs	r1, r2
 8009914:	0018      	movs	r0, r3
 8009916:	f001 fac7 	bl	800aea8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800991a:	2200      	movs	r2, #0
 800991c:	2100      	movs	r1, #0
 800991e:	201e      	movs	r0, #30
 8009920:	f001 fa90 	bl	800ae44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8009924:	201e      	movs	r0, #30
 8009926:	f001 faa2 	bl	800ae6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	46bd      	mov	sp, r7
 800992e:	b00b      	add	sp, #44	; 0x2c
 8009930:	bd90      	pop	{r4, r7, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	40006400 	.word	0x40006400
 8009938:	40021000 	.word	0x40021000

0800993c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800993c:	b590      	push	{r4, r7, lr}
 800993e:	b08b      	sub	sp, #44	; 0x2c
 8009940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009942:	2414      	movs	r4, #20
 8009944:	193b      	adds	r3, r7, r4
 8009946:	0018      	movs	r0, r3
 8009948:	2314      	movs	r3, #20
 800994a:	001a      	movs	r2, r3
 800994c:	2100      	movs	r1, #0
 800994e:	f002 fc19 	bl	800c184 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009952:	4b48      	ldr	r3, [pc, #288]	; (8009a74 <MX_GPIO_Init+0x138>)
 8009954:	695a      	ldr	r2, [r3, #20]
 8009956:	4b47      	ldr	r3, [pc, #284]	; (8009a74 <MX_GPIO_Init+0x138>)
 8009958:	2180      	movs	r1, #128	; 0x80
 800995a:	0289      	lsls	r1, r1, #10
 800995c:	430a      	orrs	r2, r1
 800995e:	615a      	str	r2, [r3, #20]
 8009960:	4b44      	ldr	r3, [pc, #272]	; (8009a74 <MX_GPIO_Init+0x138>)
 8009962:	695a      	ldr	r2, [r3, #20]
 8009964:	2380      	movs	r3, #128	; 0x80
 8009966:	029b      	lsls	r3, r3, #10
 8009968:	4013      	ands	r3, r2
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800996e:	4b41      	ldr	r3, [pc, #260]	; (8009a74 <MX_GPIO_Init+0x138>)
 8009970:	695a      	ldr	r2, [r3, #20]
 8009972:	4b40      	ldr	r3, [pc, #256]	; (8009a74 <MX_GPIO_Init+0x138>)
 8009974:	2180      	movs	r1, #128	; 0x80
 8009976:	0309      	lsls	r1, r1, #12
 8009978:	430a      	orrs	r2, r1
 800997a:	615a      	str	r2, [r3, #20]
 800997c:	4b3d      	ldr	r3, [pc, #244]	; (8009a74 <MX_GPIO_Init+0x138>)
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	2380      	movs	r3, #128	; 0x80
 8009982:	031b      	lsls	r3, r3, #12
 8009984:	4013      	ands	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800998a:	4b3a      	ldr	r3, [pc, #232]	; (8009a74 <MX_GPIO_Init+0x138>)
 800998c:	695a      	ldr	r2, [r3, #20]
 800998e:	4b39      	ldr	r3, [pc, #228]	; (8009a74 <MX_GPIO_Init+0x138>)
 8009990:	2180      	movs	r1, #128	; 0x80
 8009992:	0349      	lsls	r1, r1, #13
 8009994:	430a      	orrs	r2, r1
 8009996:	615a      	str	r2, [r3, #20]
 8009998:	4b36      	ldr	r3, [pc, #216]	; (8009a74 <MX_GPIO_Init+0x138>)
 800999a:	695a      	ldr	r2, [r3, #20]
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	035b      	lsls	r3, r3, #13
 80099a0:	4013      	ands	r3, r2
 80099a2:	60bb      	str	r3, [r7, #8]
 80099a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80099a6:	4b33      	ldr	r3, [pc, #204]	; (8009a74 <MX_GPIO_Init+0x138>)
 80099a8:	695a      	ldr	r2, [r3, #20]
 80099aa:	4b32      	ldr	r3, [pc, #200]	; (8009a74 <MX_GPIO_Init+0x138>)
 80099ac:	2180      	movs	r1, #128	; 0x80
 80099ae:	02c9      	lsls	r1, r1, #11
 80099b0:	430a      	orrs	r2, r1
 80099b2:	615a      	str	r2, [r3, #20]
 80099b4:	4b2f      	ldr	r3, [pc, #188]	; (8009a74 <MX_GPIO_Init+0x138>)
 80099b6:	695a      	ldr	r2, [r3, #20]
 80099b8:	2380      	movs	r3, #128	; 0x80
 80099ba:	02db      	lsls	r3, r3, #11
 80099bc:	4013      	ands	r3, r2
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, brake_light_Pin|assi_yellow_rear_Pin|assi_blue_rear_Pin|yellow_LED_Pin
 80099c2:	492d      	ldr	r1, [pc, #180]	; (8009a78 <MX_GPIO_Init+0x13c>)
 80099c4:	2390      	movs	r3, #144	; 0x90
 80099c6:	05db      	lsls	r3, r3, #23
 80099c8:	2200      	movs	r2, #0
 80099ca:	0018      	movs	r0, r3
 80099cc:	f001 fc01 	bl	800b1d2 <HAL_GPIO_WritePin>
                          |green_LED_Pin|buzzern_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_RESET);
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4829      	ldr	r0, [pc, #164]	; (8009a7c <MX_GPIO_Init+0x140>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	0019      	movs	r1, r3
 80099da:	f001 fbfa 	bl	800b1d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = brake_light_Pin|assi_yellow_rear_Pin|assi_blue_rear_Pin|yellow_LED_Pin
 80099de:	193b      	adds	r3, r7, r4
 80099e0:	4a25      	ldr	r2, [pc, #148]	; (8009a78 <MX_GPIO_Init+0x13c>)
 80099e2:	601a      	str	r2, [r3, #0]
                          |green_LED_Pin|buzzern_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099e4:	193b      	adds	r3, r7, r4
 80099e6:	2201      	movs	r2, #1
 80099e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ea:	193b      	adds	r3, r7, r4
 80099ec:	2200      	movs	r2, #0
 80099ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099f0:	193b      	adds	r3, r7, r4
 80099f2:	2200      	movs	r2, #0
 80099f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099f6:	193a      	adds	r2, r7, r4
 80099f8:	2390      	movs	r3, #144	; 0x90
 80099fa:	05db      	lsls	r3, r3, #23
 80099fc:	0011      	movs	r1, r2
 80099fe:	0018      	movs	r0, r3
 8009a00:	f001 fa52 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = blue_LED_Pin;
 8009a04:	0021      	movs	r1, r4
 8009a06:	187b      	adds	r3, r7, r1
 8009a08:	2280      	movs	r2, #128	; 0x80
 8009a0a:	0092      	lsls	r2, r2, #2
 8009a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a0e:	000c      	movs	r4, r1
 8009a10:	193b      	adds	r3, r7, r4
 8009a12:	2201      	movs	r2, #1
 8009a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a16:	193b      	adds	r3, r7, r4
 8009a18:	2200      	movs	r2, #0
 8009a1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a1c:	193b      	adds	r3, r7, r4
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(blue_LED_GPIO_Port, &GPIO_InitStruct);
 8009a22:	193b      	adds	r3, r7, r4
 8009a24:	4a15      	ldr	r2, [pc, #84]	; (8009a7c <MX_GPIO_Init+0x140>)
 8009a26:	0019      	movs	r1, r3
 8009a28:	0010      	movs	r0, r2
 8009a2a:	f001 fa3d 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ts_off_Pin;
 8009a2e:	193b      	adds	r3, r7, r4
 8009a30:	2204      	movs	r2, #4
 8009a32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a34:	193b      	adds	r3, r7, r4
 8009a36:	2200      	movs	r2, #0
 8009a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a3a:	193b      	adds	r3, r7, r4
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ts_off_GPIO_Port, &GPIO_InitStruct);
 8009a40:	193b      	adds	r3, r7, r4
 8009a42:	4a0f      	ldr	r2, [pc, #60]	; (8009a80 <MX_GPIO_Init+0x144>)
 8009a44:	0019      	movs	r1, r3
 8009a46:	0010      	movs	r0, r2
 8009a48:	f001 fa2e 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = close_airs_Pin|reset_Pin;
 8009a4c:	0021      	movs	r1, r4
 8009a4e:	187b      	adds	r3, r7, r1
 8009a50:	2218      	movs	r2, #24
 8009a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a54:	187b      	adds	r3, r7, r1
 8009a56:	2200      	movs	r2, #0
 8009a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a5a:	187b      	adds	r3, r7, r1
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a60:	187b      	adds	r3, r7, r1
 8009a62:	4a08      	ldr	r2, [pc, #32]	; (8009a84 <MX_GPIO_Init+0x148>)
 8009a64:	0019      	movs	r1, r3
 8009a66:	0010      	movs	r0, r2
 8009a68:	f001 fa1e 	bl	800aea8 <HAL_GPIO_Init>

}
 8009a6c:	46c0      	nop			; (mov r8, r8)
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b00b      	add	sp, #44	; 0x2c
 8009a72:	bd90      	pop	{r4, r7, pc}
 8009a74:	40021000 	.word	0x40021000
 8009a78:	00000707 	.word	0x00000707
 8009a7c:	48000800 	.word	0x48000800
 8009a80:	48000c00 	.word	0x48000c00
 8009a84:	48000400 	.word	0x48000400

08009a88 <can1_mcu_set_ecu_indicator_points_receive_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void can1_mcu_set_ecu_indicator_points_receive_callback(
		can1_mcu_set_ecu_indicator_points_t *can1_mcu_set_ecu_indicator_points) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(assi_blue_rear_GPIO_Port, assi_blue_rear_Pin,
			can1_mcu_set_ecu_indicator_points->assi_blue_rear);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	79db      	ldrb	r3, [r3, #7]
 8009a94:	b25b      	sxtb	r3, r3
	HAL_GPIO_WritePin(assi_blue_rear_GPIO_Port, assi_blue_rear_Pin,
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	2390      	movs	r3, #144	; 0x90
 8009a9a:	05db      	lsls	r3, r3, #23
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f001 fb97 	bl	800b1d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(assi_yellow_rear_GPIO_Port, assi_yellow_rear_Pin,
			can1_mcu_set_ecu_indicator_points->assi_yellow_rear);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	791b      	ldrb	r3, [r3, #4]
 8009aa8:	b25b      	sxtb	r3, r3
	HAL_GPIO_WritePin(assi_yellow_rear_GPIO_Port, assi_yellow_rear_Pin,
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	2390      	movs	r3, #144	; 0x90
 8009aae:	05db      	lsls	r3, r3, #23
 8009ab0:	2102      	movs	r1, #2
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	f001 fb8d 	bl	800b1d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(brake_light_GPIO_Port, brake_light_Pin,
			can1_mcu_set_ecu_indicator_points->brake_light);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	b25b      	sxtb	r3, r3
	HAL_GPIO_WritePin(brake_light_GPIO_Port, brake_light_Pin,
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	2390      	movs	r3, #144	; 0x90
 8009ac2:	05db      	lsls	r3, r3, #23
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f001 fb83 	bl	800b1d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzern_GPIO_Port, buzzern_Pin,
			can1_mcu_set_ecu_indicator_points->r2d_sound);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	b25b      	sxtb	r3, r3
	HAL_GPIO_WritePin(buzzern_GPIO_Port, buzzern_Pin,
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	2380      	movs	r3, #128	; 0x80
 8009ad6:	00d9      	lsls	r1, r3, #3
 8009ad8:	2390      	movs	r3, #144	; 0x90
 8009ada:	05db      	lsls	r3, r3, #23
 8009adc:	0018      	movs	r0, r3
 8009ade:	f001 fb78 	bl	800b1d2 <HAL_GPIO_WritePin>

}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	b002      	add	sp, #8
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <can1_ecu_status_transmit_callback>:

void can1_ecu_status_transmit_callback(can1_ecu_status_t *can1_ecu_status) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	can1_ecu_status->close_airs = HAL_GPIO_ReadPin(close_airs_GPIO_Port,
 8009af4:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <can1_ecu_status_transmit_callback+0x48>)
 8009af6:	2108      	movs	r1, #8
 8009af8:	0018      	movs	r0, r3
 8009afa:	f001 fb4d 	bl	800b198 <HAL_GPIO_ReadPin>
 8009afe:	0003      	movs	r3, r0
 8009b00:	b25a      	sxtb	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	705a      	strb	r2, [r3, #1]
	close_airs_Pin);
	can1_ecu_status->rst_button = HAL_GPIO_ReadPin(reset_GPIO_Port, reset_Pin);
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <can1_ecu_status_transmit_callback+0x48>)
 8009b08:	2110      	movs	r1, #16
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f001 fb44 	bl	800b198 <HAL_GPIO_ReadPin>
 8009b10:	0003      	movs	r3, r0
 8009b12:	b25a      	sxtb	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	701a      	strb	r2, [r3, #0]
	can1_ecu_status->ts_off = HAL_GPIO_ReadPin(ts_off_GPIO_Port, ts_off_Pin);
 8009b18:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <can1_ecu_status_transmit_callback+0x4c>)
 8009b1a:	2104      	movs	r1, #4
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f001 fb3b 	bl	800b198 <HAL_GPIO_ReadPin>
 8009b22:	0003      	movs	r3, r0
 8009b24:	b25a      	sxtb	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	709a      	strb	r2, [r3, #2]

}
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	b002      	add	sp, #8
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	46c0      	nop			; (mov r8, r8)
 8009b34:	48000400 	.word	0x48000400
 8009b38:	48000c00 	.word	0x48000c00

08009b3c <can1_dbu_status_1_transmit_callback>:

void can1_dbu_status_1_transmit_callback(can1_dbu_status_1_t *can1_dbu_status_1) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	can1_dbu_status_1->activate_ts_button = HAL_GPIO_ReadPin(
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <can1_dbu_status_1_transmit_callback+0x24>)
 8009b46:	2108      	movs	r1, #8
 8009b48:	0018      	movs	r0, r3
 8009b4a:	f001 fb25 	bl	800b198 <HAL_GPIO_ReadPin>
 8009b4e:	0003      	movs	r3, r0
 8009b50:	b25a      	sxtb	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	701a      	strb	r2, [r3, #0]
	close_airs_GPIO_Port, close_airs_Pin);
	return;
 8009b56:	46c0      	nop			; (mov r8, r8)
}
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b002      	add	sp, #8
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	48000400 	.word	0x48000400

08009b64 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009b68:	f000 f954 	bl	8009e14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8009b6c:	f000 f820 	bl	8009bb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009b70:	f7ff fee4 	bl	800993c <MX_GPIO_Init>
	MX_CAN_Init();
 8009b74:	f7ff fe54 	bl	8009820 <MX_CAN_Init>
	MX_TIM1_Init();
 8009b78:	f000 f8aa 	bl	8009cd0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	if (!init_peripheral_can_hal_can1(&hcan)) {
 8009b7c:	4b0b      	ldr	r3, [pc, #44]	; (8009bac <main+0x48>)
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f7ff fdd8 	bl	8009734 <init_peripheral_can_hal_can1>
 8009b84:	1e03      	subs	r3, r0, #0
 8009b86:	d101      	bne.n	8009b8c <main+0x28>
		Error_Handler();
 8009b88:	f000 f84e 	bl	8009c28 <Error_Handler>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(green_LED_GPIO_Port, green_LED_Pin);
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	009a      	lsls	r2, r3, #2
 8009b90:	2390      	movs	r3, #144	; 0x90
 8009b92:	05db      	lsls	r3, r3, #23
 8009b94:	0011      	movs	r1, r2
 8009b96:	0018      	movs	r0, r3
 8009b98:	f001 fb38 	bl	800b20c <HAL_GPIO_TogglePin>
		can1_ecu_status_transmit();
 8009b9c:	f7ff fd8a 	bl	80096b4 <can1_ecu_status_transmit>
		can1_dbu_status_1_transmit();
 8009ba0:	f7ff fd48 	bl	8009634 <can1_dbu_status_1_transmit>
		HAL_Delay(50);
 8009ba4:	2032      	movs	r0, #50	; 0x32
 8009ba6:	f000 f999 	bl	8009edc <HAL_Delay>
		HAL_GPIO_TogglePin(green_LED_GPIO_Port, green_LED_Pin);
 8009baa:	e7ef      	b.n	8009b8c <main+0x28>
 8009bac:	20000448 	.word	0x20000448

08009bb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b093      	sub	sp, #76	; 0x4c
 8009bb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8009bb6:	2414      	movs	r4, #20
 8009bb8:	193b      	adds	r3, r7, r4
 8009bba:	0018      	movs	r0, r3
 8009bbc:	2334      	movs	r3, #52	; 0x34
 8009bbe:	001a      	movs	r2, r3
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	f002 fadf 	bl	800c184 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8009bc6:	1d3b      	adds	r3, r7, #4
 8009bc8:	0018      	movs	r0, r3
 8009bca:	2310      	movs	r3, #16
 8009bcc:	001a      	movs	r2, r3
 8009bce:	2100      	movs	r1, #0
 8009bd0:	f002 fad8 	bl	800c184 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8009bd4:	193b      	adds	r3, r7, r4
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009bda:	193b      	adds	r3, r7, r4
 8009bdc:	2201      	movs	r2, #1
 8009bde:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009be0:	193b      	adds	r3, r7, r4
 8009be2:	2200      	movs	r2, #0
 8009be4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8009be6:	193b      	adds	r3, r7, r4
 8009be8:	0018      	movs	r0, r3
 8009bea:	f001 fb2b 	bl	800b244 <HAL_RCC_OscConfig>
 8009bee:	1e03      	subs	r3, r0, #0
 8009bf0:	d001      	beq.n	8009bf6 <SystemClock_Config+0x46>
		Error_Handler();
 8009bf2:	f000 f819 	bl	8009c28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8009bf6:	1d3b      	adds	r3, r7, #4
 8009bf8:	2207      	movs	r2, #7
 8009bfa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8009bfc:	1d3b      	adds	r3, r7, #4
 8009bfe:	2203      	movs	r2, #3
 8009c00:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c02:	1d3b      	adds	r3, r7, #4
 8009c04:	2200      	movs	r2, #0
 8009c06:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c08:	1d3b      	adds	r3, r7, #4
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8009c0e:	1d3b      	adds	r3, r7, #4
 8009c10:	2101      	movs	r1, #1
 8009c12:	0018      	movs	r0, r3
 8009c14:	f001 fe9c 	bl	800b950 <HAL_RCC_ClockConfig>
 8009c18:	1e03      	subs	r3, r0, #0
 8009c1a:	d001      	beq.n	8009c20 <SystemClock_Config+0x70>
		Error_Handler();
 8009c1c:	f000 f804 	bl	8009c28 <Error_Handler>
	}
}
 8009c20:	46c0      	nop			; (mov r8, r8)
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b013      	add	sp, #76	; 0x4c
 8009c26:	bd90      	pop	{r4, r7, pc}

08009c28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009c2c:	b672      	cpsid	i
}
 8009c2e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009c30:	e7fe      	b.n	8009c30 <Error_Handler+0x8>
	...

08009c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <HAL_MspInit+0x44>)
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <HAL_MspInit+0x44>)
 8009c40:	2101      	movs	r1, #1
 8009c42:	430a      	orrs	r2, r1
 8009c44:	619a      	str	r2, [r3, #24]
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <HAL_MspInit+0x44>)
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <HAL_MspInit+0x44>)
 8009c54:	69da      	ldr	r2, [r3, #28]
 8009c56:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <HAL_MspInit+0x44>)
 8009c58:	2180      	movs	r1, #128	; 0x80
 8009c5a:	0549      	lsls	r1, r1, #21
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	61da      	str	r2, [r3, #28]
 8009c60:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <HAL_MspInit+0x44>)
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	055b      	lsls	r3, r3, #21
 8009c68:	4013      	ands	r3, r2
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	46bd      	mov	sp, r7
 8009c72:	b002      	add	sp, #8
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	40021000 	.word	0x40021000

08009c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009c80:	e7fe      	b.n	8009c80 <NMI_Handler+0x4>

08009c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c86:	e7fe      	b.n	8009c86 <HardFault_Handler+0x4>

08009c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009c8c:	46c0      	nop			; (mov r8, r8)
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009ca0:	f000 f900 	bl	8009ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009ca4:	46c0      	nop			; (mov r8, r8)
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
	...

08009cac <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8009cb0:	4b03      	ldr	r3, [pc, #12]	; (8009cc0 <CEC_CAN_IRQHandler+0x14>)
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f000 fe0e 	bl	800a8d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8009cb8:	46c0      	nop			; (mov r8, r8)
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	20000448 	.word	0x20000448

08009cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8009cc8:	46c0      	nop			; (mov r8, r8)
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	18fb      	adds	r3, r7, r3
 8009cda:	0018      	movs	r0, r3
 8009cdc:	2310      	movs	r3, #16
 8009cde:	001a      	movs	r2, r3
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	f002 fa4f 	bl	800c184 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ce6:	003b      	movs	r3, r7
 8009ce8:	0018      	movs	r0, r3
 8009cea:	2308      	movs	r3, #8
 8009cec:	001a      	movs	r2, r3
 8009cee:	2100      	movs	r1, #0
 8009cf0:	f002 fa48 	bl	800c184 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009cf4:	4b1f      	ldr	r3, [pc, #124]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009cf6:	4a20      	ldr	r2, [pc, #128]	; (8009d78 <MX_TIM1_Init+0xa8>)
 8009cf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009cfa:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d00:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009d06:	4b1b      	ldr	r3, [pc, #108]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d08:	4a1c      	ldr	r2, [pc, #112]	; (8009d7c <MX_TIM1_Init+0xac>)
 8009d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d0c:	4b19      	ldr	r3, [pc, #100]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009d12:	4b18      	ldr	r3, [pc, #96]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d18:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009d1e:	4b15      	ldr	r3, [pc, #84]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d20:	0018      	movs	r0, r3
 8009d22:	f001 ff6f 	bl	800bc04 <HAL_TIM_Base_Init>
 8009d26:	1e03      	subs	r3, r0, #0
 8009d28:	d001      	beq.n	8009d2e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8009d2a:	f7ff ff7d 	bl	8009c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009d2e:	2108      	movs	r1, #8
 8009d30:	187b      	adds	r3, r7, r1
 8009d32:	2280      	movs	r2, #128	; 0x80
 8009d34:	0152      	lsls	r2, r2, #5
 8009d36:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009d38:	187a      	adds	r2, r7, r1
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d3c:	0011      	movs	r1, r2
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f001 ffb0 	bl	800bca4 <HAL_TIM_ConfigClockSource>
 8009d44:	1e03      	subs	r3, r0, #0
 8009d46:	d001      	beq.n	8009d4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8009d48:	f7ff ff6e 	bl	8009c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d4c:	003b      	movs	r3, r7
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d52:	003b      	movs	r3, r7
 8009d54:	2200      	movs	r2, #0
 8009d56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009d58:	003a      	movs	r2, r7
 8009d5a:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <MX_TIM1_Init+0xa4>)
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f002 f98e 	bl	800c080 <HAL_TIMEx_MasterConfigSynchronization>
 8009d64:	1e03      	subs	r3, r0, #0
 8009d66:	d001      	beq.n	8009d6c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8009d68:	f7ff ff5e 	bl	8009c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009d6c:	46c0      	nop			; (mov r8, r8)
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	b006      	add	sp, #24
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20000470 	.word	0x20000470
 8009d78:	40012c00 	.word	0x40012c00
 8009d7c:	0000ffff 	.word	0x0000ffff

08009d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a0a      	ldr	r2, [pc, #40]	; (8009db8 <HAL_TIM_Base_MspInit+0x38>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d10d      	bne.n	8009dae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009d92:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <HAL_TIM_Base_MspInit+0x3c>)
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <HAL_TIM_Base_MspInit+0x3c>)
 8009d98:	2180      	movs	r1, #128	; 0x80
 8009d9a:	0109      	lsls	r1, r1, #4
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	619a      	str	r2, [r3, #24]
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <HAL_TIM_Base_MspInit+0x3c>)
 8009da2:	699a      	ldr	r2, [r3, #24]
 8009da4:	2380      	movs	r3, #128	; 0x80
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	4013      	ands	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009dae:	46c0      	nop			; (mov r8, r8)
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b004      	add	sp, #16
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	40012c00 	.word	0x40012c00
 8009dbc:	40021000 	.word	0x40021000

08009dc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009dc0:	480d      	ldr	r0, [pc, #52]	; (8009df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009dc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009dc4:	480d      	ldr	r0, [pc, #52]	; (8009dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8009dc6:	490e      	ldr	r1, [pc, #56]	; (8009e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009dc8:	4a0e      	ldr	r2, [pc, #56]	; (8009e04 <LoopForever+0xe>)
  movs r3, #0
 8009dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009dcc:	e002      	b.n	8009dd4 <LoopCopyDataInit>

08009dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009dd2:	3304      	adds	r3, #4

08009dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009dd8:	d3f9      	bcc.n	8009dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009dda:	4a0b      	ldr	r2, [pc, #44]	; (8009e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009ddc:	4c0b      	ldr	r4, [pc, #44]	; (8009e0c <LoopForever+0x16>)
  movs r3, #0
 8009dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009de0:	e001      	b.n	8009de6 <LoopFillZerobss>

08009de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009de4:	3204      	adds	r2, #4

08009de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009de8:	d3fb      	bcc.n	8009de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009dea:	f7ff ff6b 	bl	8009cc4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8009dee:	f002 f9a5 	bl	800c13c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009df2:	f7ff feb7 	bl	8009b64 <main>

08009df6 <LoopForever>:

LoopForever:
    b LoopForever
 8009df6:	e7fe      	b.n	8009df6 <LoopForever>
  ldr   r0, =_estack
 8009df8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8009dfc:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8009e00:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8009e04:	0800c22c 	.word	0x0800c22c
  ldr r2, =_sbss
 8009e08:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8009e0c:	200004bc 	.word	0x200004bc

08009e10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009e10:	e7fe      	b.n	8009e10 <ADC1_COMP_IRQHandler>
	...

08009e14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e18:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <HAL_Init+0x24>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <HAL_Init+0x24>)
 8009e1e:	2110      	movs	r1, #16
 8009e20:	430a      	orrs	r2, r1
 8009e22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8009e24:	2000      	movs	r0, #0
 8009e26:	f000 f809 	bl	8009e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e2a:	f7ff ff03 	bl	8009c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	0018      	movs	r0, r3
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	40022000 	.word	0x40022000

08009e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e44:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <HAL_InitTick+0x5c>)
 8009e46:	681c      	ldr	r4, [r3, #0]
 8009e48:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <HAL_InitTick+0x60>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	0019      	movs	r1, r3
 8009e4e:	23fa      	movs	r3, #250	; 0xfa
 8009e50:	0098      	lsls	r0, r3, #2
 8009e52:	f7fe f957 	bl	8008104 <__udivsi3>
 8009e56:	0003      	movs	r3, r0
 8009e58:	0019      	movs	r1, r3
 8009e5a:	0020      	movs	r0, r4
 8009e5c:	f7fe f952 	bl	8008104 <__udivsi3>
 8009e60:	0003      	movs	r3, r0
 8009e62:	0018      	movs	r0, r3
 8009e64:	f001 f813 	bl	800ae8e <HAL_SYSTICK_Config>
 8009e68:	1e03      	subs	r3, r0, #0
 8009e6a:	d001      	beq.n	8009e70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e00f      	b.n	8009e90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d80b      	bhi.n	8009e8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	425b      	negs	r3, r3
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 ffe0 	bl	800ae44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <HAL_InitTick+0x64>)
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e000      	b.n	8009e90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
}
 8009e90:	0018      	movs	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b003      	add	sp, #12
 8009e96:	bd90      	pop	{r4, r7, pc}
 8009e98:	20000400 	.word	0x20000400
 8009e9c:	20000408 	.word	0x20000408
 8009ea0:	20000404 	.word	0x20000404

08009ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <HAL_IncTick+0x1c>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	001a      	movs	r2, r3
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <HAL_IncTick+0x20>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	18d2      	adds	r2, r2, r3
 8009eb4:	4b03      	ldr	r3, [pc, #12]	; (8009ec4 <HAL_IncTick+0x20>)
 8009eb6:	601a      	str	r2, [r3, #0]
}
 8009eb8:	46c0      	nop			; (mov r8, r8)
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	20000408 	.word	0x20000408
 8009ec4:	200004b8 	.word	0x200004b8

08009ec8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  return uwTick;
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <HAL_GetTick+0x10>)
 8009ece:	681b      	ldr	r3, [r3, #0]
}
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	200004b8 	.word	0x200004b8

08009edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ee4:	f7ff fff0 	bl	8009ec8 <HAL_GetTick>
 8009ee8:	0003      	movs	r3, r0
 8009eea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	d005      	beq.n	8009f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <HAL_Delay+0x44>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	001a      	movs	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	189b      	adds	r3, r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	f7ff ffe0 	bl	8009ec8 <HAL_GetTick>
 8009f08:	0002      	movs	r2, r0
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d8f7      	bhi.n	8009f04 <HAL_Delay+0x28>
  {
  }
}
 8009f14:	46c0      	nop			; (mov r8, r8)
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	b004      	add	sp, #16
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	20000408 	.word	0x20000408

08009f24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e0f0      	b.n	800a118 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2220      	movs	r2, #32
 8009f3a:	5c9b      	ldrb	r3, [r3, r2]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	0018      	movs	r0, r3
 8009f46:	f7ff fca3 	bl	8009890 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2101      	movs	r1, #1
 8009f56:	430a      	orrs	r2, r1
 8009f58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f5a:	f7ff ffb5 	bl	8009ec8 <HAL_GetTick>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009f62:	e013      	b.n	8009f8c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009f64:	f7ff ffb0 	bl	8009ec8 <HAL_GetTick>
 8009f68:	0002      	movs	r2, r0
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b0a      	cmp	r3, #10
 8009f70:	d90c      	bls.n	8009f8c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	2280      	movs	r2, #128	; 0x80
 8009f78:	0292      	lsls	r2, r2, #10
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	2105      	movs	r1, #5
 8009f86:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e0c5      	b.n	800a118 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	4013      	ands	r3, r2
 8009f96:	d0e5      	beq.n	8009f64 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2102      	movs	r1, #2
 8009fa4:	438a      	bics	r2, r1
 8009fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fa8:	f7ff ff8e 	bl	8009ec8 <HAL_GetTick>
 8009fac:	0003      	movs	r3, r0
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009fb0:	e013      	b.n	8009fda <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009fb2:	f7ff ff89 	bl	8009ec8 <HAL_GetTick>
 8009fb6:	0002      	movs	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b0a      	cmp	r3, #10
 8009fbe:	d90c      	bls.n	8009fda <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	2280      	movs	r2, #128	; 0x80
 8009fc6:	0292      	lsls	r2, r2, #10
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	2105      	movs	r1, #5
 8009fd4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e09e      	b.n	800a118 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	d1e5      	bne.n	8009fb2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	7e1b      	ldrb	r3, [r3, #24]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d108      	bne.n	800a000 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2180      	movs	r1, #128	; 0x80
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e007      	b.n	800a010 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2180      	movs	r1, #128	; 0x80
 800a00c:	438a      	bics	r2, r1
 800a00e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7e5b      	ldrb	r3, [r3, #25]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d108      	bne.n	800a02a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2140      	movs	r1, #64	; 0x40
 800a024:	430a      	orrs	r2, r1
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	e007      	b.n	800a03a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2140      	movs	r1, #64	; 0x40
 800a036:	438a      	bics	r2, r1
 800a038:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	7e9b      	ldrb	r3, [r3, #26]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d108      	bne.n	800a054 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2120      	movs	r1, #32
 800a04e:	430a      	orrs	r2, r1
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e007      	b.n	800a064 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2120      	movs	r1, #32
 800a060:	438a      	bics	r2, r1
 800a062:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7edb      	ldrb	r3, [r3, #27]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d108      	bne.n	800a07e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2110      	movs	r1, #16
 800a078:	438a      	bics	r2, r1
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	e007      	b.n	800a08e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2110      	movs	r1, #16
 800a08a:	430a      	orrs	r2, r1
 800a08c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	7f1b      	ldrb	r3, [r3, #28]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d108      	bne.n	800a0a8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2108      	movs	r1, #8
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	e007      	b.n	800a0b8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2108      	movs	r1, #8
 800a0b4:	438a      	bics	r2, r1
 800a0b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	7f5b      	ldrb	r3, [r3, #29]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d108      	bne.n	800a0d2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2104      	movs	r1, #4
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	e007      	b.n	800a0e2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2104      	movs	r1, #4
 800a0de:	438a      	bics	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	0011      	movs	r1, r2
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	1e5a      	subs	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2220      	movs	r2, #32
 800a112:	2101      	movs	r1, #1
 800a114:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	0018      	movs	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	b004      	add	sp, #16
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a130:	2013      	movs	r0, #19
 800a132:	183b      	adds	r3, r7, r0
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	2120      	movs	r1, #32
 800a138:	5c52      	ldrb	r2, [r2, r1]
 800a13a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800a13c:	0002      	movs	r2, r0
 800a13e:	18bb      	adds	r3, r7, r2
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d004      	beq.n	800a150 <HAL_CAN_ConfigFilter+0x30>
 800a146:	18bb      	adds	r3, r7, r2
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d000      	beq.n	800a150 <HAL_CAN_ConfigFilter+0x30>
 800a14e:	e0cd      	b.n	800a2ec <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	2380      	movs	r3, #128	; 0x80
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	58d3      	ldr	r3, [r2, r3]
 800a158:	2201      	movs	r2, #1
 800a15a:	431a      	orrs	r2, r3
 800a15c:	0011      	movs	r1, r2
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	2380      	movs	r3, #128	; 0x80
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	221f      	movs	r2, #31
 800a16c:	4013      	ands	r3, r2
 800a16e:	2201      	movs	r2, #1
 800a170:	409a      	lsls	r2, r3
 800a172:	0013      	movs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	2387      	movs	r3, #135	; 0x87
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	58d3      	ldr	r3, [r2, r3]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	43d2      	mvns	r2, r2
 800a182:	401a      	ands	r2, r3
 800a184:	0011      	movs	r1, r2
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	2387      	movs	r3, #135	; 0x87
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d129      	bne.n	800a1ea <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	2383      	movs	r3, #131	; 0x83
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	58d3      	ldr	r3, [r2, r3]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	43d2      	mvns	r2, r2
 800a1a2:	401a      	ands	r2, r3
 800a1a4:	0011      	movs	r1, r2
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	2383      	movs	r3, #131	; 0x83
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a1c0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	3248      	adds	r2, #72	; 0x48
 800a1c6:	00d2      	lsls	r2, r2, #3
 800a1c8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	041b      	lsls	r3, r3, #16
 800a1d6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a1dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a1de:	6979      	ldr	r1, [r7, #20]
 800a1e0:	3348      	adds	r3, #72	; 0x48
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	18cb      	adds	r3, r1, r3
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d128      	bne.n	800a244 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	2383      	movs	r3, #131	; 0x83
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	58d2      	ldr	r2, [r2, r3]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	0011      	movs	r1, r2
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	2383      	movs	r3, #131	; 0x83
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a21a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	3248      	adds	r2, #72	; 0x48
 800a220:	00d2      	lsls	r2, r2, #3
 800a222:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	041b      	lsls	r3, r3, #16
 800a230:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a236:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a238:	6979      	ldr	r1, [r7, #20]
 800a23a:	3348      	adds	r3, #72	; 0x48
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	18cb      	adds	r3, r1, r3
 800a240:	3304      	adds	r3, #4
 800a242:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10c      	bne.n	800a266 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	2381      	movs	r3, #129	; 0x81
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	58d3      	ldr	r3, [r2, r3]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	43d2      	mvns	r2, r2
 800a258:	401a      	ands	r2, r3
 800a25a:	0011      	movs	r1, r2
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	2381      	movs	r3, #129	; 0x81
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	50d1      	str	r1, [r2, r3]
 800a264:	e00a      	b.n	800a27c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	2381      	movs	r3, #129	; 0x81
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	58d2      	ldr	r2, [r2, r3]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	431a      	orrs	r2, r3
 800a272:	0011      	movs	r1, r2
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	2381      	movs	r3, #129	; 0x81
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10c      	bne.n	800a29e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	2385      	movs	r3, #133	; 0x85
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	58d3      	ldr	r3, [r2, r3]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	43d2      	mvns	r2, r2
 800a290:	401a      	ands	r2, r3
 800a292:	0011      	movs	r1, r2
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	2385      	movs	r3, #133	; 0x85
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	50d1      	str	r1, [r2, r3]
 800a29c:	e00a      	b.n	800a2b4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	2385      	movs	r3, #133	; 0x85
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	58d2      	ldr	r2, [r2, r3]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	0011      	movs	r1, r2
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	2385      	movs	r3, #133	; 0x85
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d10a      	bne.n	800a2d2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	2387      	movs	r3, #135	; 0x87
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	58d2      	ldr	r2, [r2, r3]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	0011      	movs	r1, r2
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	2387      	movs	r3, #135	; 0x87
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	2380      	movs	r3, #128	; 0x80
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	58d3      	ldr	r3, [r2, r3]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	4393      	bics	r3, r2
 800a2de:	0019      	movs	r1, r3
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e007      	b.n	800a2fc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	2280      	movs	r2, #128	; 0x80
 800a2f2:	02d2      	lsls	r2, r2, #11
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
  }
}
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	46bd      	mov	sp, r7
 800a300:	b006      	add	sp, #24
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	5c9b      	ldrb	r3, [r3, r2]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b01      	cmp	r3, #1
 800a316:	d12f      	bne.n	800a378 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2220      	movs	r2, #32
 800a31c:	2102      	movs	r1, #2
 800a31e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2101      	movs	r1, #1
 800a32c:	438a      	bics	r2, r1
 800a32e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a330:	f7ff fdca 	bl	8009ec8 <HAL_GetTick>
 800a334:	0003      	movs	r3, r0
 800a336:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a338:	e013      	b.n	800a362 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a33a:	f7ff fdc5 	bl	8009ec8 <HAL_GetTick>
 800a33e:	0002      	movs	r2, r0
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	2b0a      	cmp	r3, #10
 800a346:	d90c      	bls.n	800a362 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	2280      	movs	r2, #128	; 0x80
 800a34e:	0292      	lsls	r2, r2, #10
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2220      	movs	r2, #32
 800a35a:	2105      	movs	r1, #5
 800a35c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e012      	b.n	800a388 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	4013      	ands	r3, r2
 800a36c:	d1e5      	bne.n	800a33a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	e007      	b.n	800a388 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	2280      	movs	r2, #128	; 0x80
 800a37e:	0312      	lsls	r2, r2, #12
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
  }
}
 800a388:	0018      	movs	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	b004      	add	sp, #16
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 800a39c:	4b1e      	ldr	r3, [pc, #120]	; (800a418 <HAL_CAN_WakeUp+0x88>)
 800a39e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a3a0:	2013      	movs	r0, #19
 800a3a2:	183b      	adds	r3, r7, r0
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	2120      	movs	r1, #32
 800a3a8:	5c52      	ldrb	r2, [r2, r1]
 800a3aa:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800a3ac:	0002      	movs	r2, r0
 800a3ae:	18bb      	adds	r3, r7, r2
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d003      	beq.n	800a3be <HAL_CAN_WakeUp+0x2e>
 800a3b6:	18bb      	adds	r3, r7, r2
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d11f      	bne.n	800a3fe <HAL_CAN_WakeUp+0x6e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2102      	movs	r1, #2
 800a3ca:	438a      	bics	r2, r1
 800a3cc:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d208      	bcs.n	800a3ee <HAL_CAN_WakeUp+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2280      	movs	r2, #128	; 0x80
 800a3e2:	0292      	lsls	r2, r2, #10
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e00f      	b.n	800a40e <HAL_CAN_WakeUp+0x7e>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	d1e9      	bne.n	800a3ce <HAL_CAN_WakeUp+0x3e>

    /* Return function status */
    return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e007      	b.n	800a40e <HAL_CAN_WakeUp+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	2280      	movs	r2, #128	; 0x80
 800a404:	02d2      	lsls	r2, r2, #11
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
  }
}
 800a40e:	0018      	movs	r0, r3
 800a410:	46bd      	mov	sp, r7
 800a412:	b006      	add	sp, #24
 800a414:	bd80      	pop	{r7, pc}
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	000f4240 	.word	0x000f4240

0800a41c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800a42a:	201f      	movs	r0, #31
 800a42c:	183b      	adds	r3, r7, r0
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	2120      	movs	r1, #32
 800a432:	5c52      	ldrb	r2, [r2, r1]
 800a434:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800a43e:	183b      	adds	r3, r7, r0
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d004      	beq.n	800a450 <HAL_CAN_AddTxMessage+0x34>
 800a446:	183b      	adds	r3, r7, r0
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d000      	beq.n	800a450 <HAL_CAN_AddTxMessage+0x34>
 800a44e:	e0b7      	b.n	800a5c0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	2380      	movs	r3, #128	; 0x80
 800a454:	04db      	lsls	r3, r3, #19
 800a456:	4013      	ands	r3, r2
 800a458:	d10a      	bne.n	800a470 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	2380      	movs	r3, #128	; 0x80
 800a45e:	051b      	lsls	r3, r3, #20
 800a460:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a462:	d105      	bne.n	800a470 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	2380      	movs	r3, #128	; 0x80
 800a468:	055b      	lsls	r3, r3, #21
 800a46a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a46c:	d100      	bne.n	800a470 <HAL_CAN_AddTxMessage+0x54>
 800a46e:	e09e      	b.n	800a5ae <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	0e1b      	lsrs	r3, r3, #24
 800a474:	2203      	movs	r2, #3
 800a476:	4013      	ands	r3, r2
 800a478:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d908      	bls.n	800a492 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	2280      	movs	r2, #128	; 0x80
 800a486:	0412      	lsls	r2, r2, #16
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e09e      	b.n	800a5d0 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800a492:	2201      	movs	r2, #1
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	409a      	lsls	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10c      	bne.n	800a4be <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4311      	orrs	r1, r2
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	3218      	adds	r2, #24
 800a4b8:	0112      	lsls	r2, r2, #4
 800a4ba:	50d1      	str	r1, [r2, r3]
 800a4bc:	e00f      	b.n	800a4de <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800a4d4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	3218      	adds	r2, #24
 800a4da:	0112      	lsls	r2, r2, #4
 800a4dc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6819      	ldr	r1, [r3, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	3318      	adds	r3, #24
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	18cb      	adds	r3, r1, r3
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	7d1b      	ldrb	r3, [r3, #20]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d112      	bne.n	800a520 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	3318      	adds	r3, #24
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	18d3      	adds	r3, r2, r3
 800a506:	3304      	adds	r3, #4
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6819      	ldr	r1, [r3, #0]
 800a50e:	2380      	movs	r3, #128	; 0x80
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	431a      	orrs	r2, r3
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	3318      	adds	r3, #24
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	18cb      	adds	r3, r1, r3
 800a51c:	3304      	adds	r3, #4
 800a51e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3307      	adds	r3, #7
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	061a      	lsls	r2, r3, #24
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3306      	adds	r3, #6
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	041b      	lsls	r3, r3, #16
 800a530:	431a      	orrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	3305      	adds	r3, #5
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	021b      	lsls	r3, r3, #8
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	0019      	movs	r1, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	6979      	ldr	r1, [r7, #20]
 800a54c:	23c6      	movs	r3, #198	; 0xc6
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	0109      	lsls	r1, r1, #4
 800a552:	1841      	adds	r1, r0, r1
 800a554:	18cb      	adds	r3, r1, r3
 800a556:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3303      	adds	r3, #3
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	061a      	lsls	r2, r3, #24
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3302      	adds	r3, #2
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	041b      	lsls	r3, r3, #16
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3301      	adds	r3, #1
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	431a      	orrs	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	0019      	movs	r1, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	6979      	ldr	r1, [r7, #20]
 800a582:	23c4      	movs	r3, #196	; 0xc4
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	0109      	lsls	r1, r1, #4
 800a588:	1841      	adds	r1, r0, r1
 800a58a:	18cb      	adds	r3, r1, r3
 800a58c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	3218      	adds	r2, #24
 800a596:	0112      	lsls	r2, r2, #4
 800a598:	58d2      	ldr	r2, [r2, r3]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4311      	orrs	r1, r2
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	3218      	adds	r2, #24
 800a5a6:	0112      	lsls	r2, r2, #4
 800a5a8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e010      	b.n	800a5d0 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2280      	movs	r2, #128	; 0x80
 800a5b4:	0392      	lsls	r2, r2, #14
 800a5b6:	431a      	orrs	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e007      	b.n	800a5d0 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	2280      	movs	r2, #128	; 0x80
 800a5c6:	02d2      	lsls	r2, r2, #11
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
  }
}
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b008      	add	sp, #32
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a5e4:	200b      	movs	r0, #11
 800a5e6:	183b      	adds	r3, r7, r0
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	2120      	movs	r1, #32
 800a5ec:	5c52      	ldrb	r2, [r2, r1]
 800a5ee:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800a5f0:	0002      	movs	r2, r0
 800a5f2:	18bb      	adds	r3, r7, r2
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d003      	beq.n	800a602 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 800a5fa:	18bb      	adds	r3, r7, r2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d11d      	bne.n	800a63e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	04db      	lsls	r3, r3, #19
 800a60c:	4013      	ands	r3, r2
 800a60e:	d002      	beq.n	800a616 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	2380      	movs	r3, #128	; 0x80
 800a61e:	051b      	lsls	r3, r3, #20
 800a620:	4013      	ands	r3, r2
 800a622:	d002      	beq.n	800a62a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	055b      	lsls	r3, r3, #21
 800a634:	4013      	ands	r3, r2
 800a636:	d002      	beq.n	800a63e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800a63e:	68fb      	ldr	r3, [r7, #12]
}
 800a640:	0018      	movs	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	b004      	add	sp, #16
 800a646:	bd80      	pop	{r7, pc}

0800a648 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a656:	2017      	movs	r0, #23
 800a658:	183b      	adds	r3, r7, r0
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	2120      	movs	r1, #32
 800a65e:	5c52      	ldrb	r2, [r2, r1]
 800a660:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a662:	0002      	movs	r2, r0
 800a664:	18bb      	adds	r3, r7, r2
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d004      	beq.n	800a676 <HAL_CAN_GetRxMessage+0x2e>
 800a66c:	18bb      	adds	r3, r7, r2
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d000      	beq.n	800a676 <HAL_CAN_GetRxMessage+0x2e>
 800a674:	e0f8      	b.n	800a868 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10e      	bne.n	800a69a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	2203      	movs	r2, #3
 800a684:	4013      	ands	r3, r2
 800a686:	d117      	bne.n	800a6b8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	2280      	movs	r2, #128	; 0x80
 800a68e:	0392      	lsls	r2, r2, #14
 800a690:	431a      	orrs	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e0ee      	b.n	800a878 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	d108      	bne.n	800a6b8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2280      	movs	r2, #128	; 0x80
 800a6ac:	0392      	lsls	r2, r2, #14
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0df      	b.n	800a878 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	321b      	adds	r2, #27
 800a6c0:	0112      	lsls	r2, r2, #4
 800a6c2:	58d3      	ldr	r3, [r2, r3]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	401a      	ands	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10b      	bne.n	800a6ec <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	321b      	adds	r2, #27
 800a6dc:	0112      	lsls	r2, r2, #4
 800a6de:	58d3      	ldr	r3, [r2, r3]
 800a6e0:	0d5b      	lsrs	r3, r3, #21
 800a6e2:	055b      	lsls	r3, r3, #21
 800a6e4:	0d5a      	lsrs	r2, r3, #21
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e00a      	b.n	800a702 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	321b      	adds	r2, #27
 800a6f4:	0112      	lsls	r2, r2, #4
 800a6f6:	58d3      	ldr	r3, [r2, r3]
 800a6f8:	08db      	lsrs	r3, r3, #3
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	08da      	lsrs	r2, r3, #3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	321b      	adds	r2, #27
 800a70a:	0112      	lsls	r2, r2, #4
 800a70c:	58d3      	ldr	r3, [r2, r3]
 800a70e:	2202      	movs	r2, #2
 800a710:	401a      	ands	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	331b      	adds	r3, #27
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	18d3      	adds	r3, r2, r3
 800a722:	3304      	adds	r3, #4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	220f      	movs	r2, #15
 800a728:	401a      	ands	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	331b      	adds	r3, #27
 800a736:	011b      	lsls	r3, r3, #4
 800a738:	18d3      	adds	r3, r2, r3
 800a73a:	3304      	adds	r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	0a1b      	lsrs	r3, r3, #8
 800a740:	22ff      	movs	r2, #255	; 0xff
 800a742:	401a      	ands	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	331b      	adds	r3, #27
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	18d3      	adds	r3, r2, r3
 800a754:	3304      	adds	r3, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	0c1b      	lsrs	r3, r3, #16
 800a75a:	041b      	lsls	r3, r3, #16
 800a75c:	0c1a      	lsrs	r2, r3, #16
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	23dc      	movs	r3, #220	; 0xdc
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	0112      	lsls	r2, r2, #4
 800a76e:	188a      	adds	r2, r1, r2
 800a770:	18d3      	adds	r3, r2, r3
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	b2da      	uxtb	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6819      	ldr	r1, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	23dc      	movs	r3, #220	; 0xdc
 800a782:	005b      	lsls	r3, r3, #1
 800a784:	0112      	lsls	r2, r2, #4
 800a786:	188a      	adds	r2, r1, r2
 800a788:	18d3      	adds	r3, r2, r3
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	0a1a      	lsrs	r2, r3, #8
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6819      	ldr	r1, [r3, #0]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	23dc      	movs	r3, #220	; 0xdc
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	0112      	lsls	r2, r2, #4
 800a7a2:	188a      	adds	r2, r1, r2
 800a7a4:	18d3      	adds	r3, r2, r3
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	0c1a      	lsrs	r2, r3, #16
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	3302      	adds	r3, #2
 800a7ae:	b2d2      	uxtb	r2, r2
 800a7b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6819      	ldr	r1, [r3, #0]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	23dc      	movs	r3, #220	; 0xdc
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	0112      	lsls	r2, r2, #4
 800a7be:	188a      	adds	r2, r1, r2
 800a7c0:	18d3      	adds	r3, r2, r3
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	0e1a      	lsrs	r2, r3, #24
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	3303      	adds	r3, #3
 800a7ca:	b2d2      	uxtb	r2, r2
 800a7cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6819      	ldr	r1, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	23de      	movs	r3, #222	; 0xde
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	0112      	lsls	r2, r2, #4
 800a7da:	188a      	adds	r2, r1, r2
 800a7dc:	18d3      	adds	r3, r2, r3
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6819      	ldr	r1, [r3, #0]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	23de      	movs	r3, #222	; 0xde
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	0112      	lsls	r2, r2, #4
 800a7f4:	188a      	adds	r2, r1, r2
 800a7f6:	18d3      	adds	r3, r2, r3
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	0a1a      	lsrs	r2, r3, #8
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	3305      	adds	r3, #5
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6819      	ldr	r1, [r3, #0]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	23de      	movs	r3, #222	; 0xde
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	0112      	lsls	r2, r2, #4
 800a810:	188a      	adds	r2, r1, r2
 800a812:	18d3      	adds	r3, r2, r3
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	0c1a      	lsrs	r2, r3, #16
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	3306      	adds	r3, #6
 800a81c:	b2d2      	uxtb	r2, r2
 800a81e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	23de      	movs	r3, #222	; 0xde
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	0112      	lsls	r2, r2, #4
 800a82c:	188a      	adds	r2, r1, r2
 800a82e:	18d3      	adds	r3, r2, r3
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	0e1a      	lsrs	r2, r3, #24
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	3307      	adds	r3, #7
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d108      	bne.n	800a854 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2120      	movs	r1, #32
 800a84e:	430a      	orrs	r2, r1
 800a850:	60da      	str	r2, [r3, #12]
 800a852:	e007      	b.n	800a864 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	691a      	ldr	r2, [r3, #16]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2120      	movs	r1, #32
 800a860:	430a      	orrs	r2, r1
 800a862:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	e007      	b.n	800a878 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	2280      	movs	r2, #128	; 0x80
 800a86e:	02d2      	lsls	r2, r2, #11
 800a870:	431a      	orrs	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
  }
}
 800a878:	0018      	movs	r0, r3
 800a87a:	46bd      	mov	sp, r7
 800a87c:	b006      	add	sp, #24
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a88a:	200f      	movs	r0, #15
 800a88c:	183b      	adds	r3, r7, r0
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	2120      	movs	r1, #32
 800a892:	5c52      	ldrb	r2, [r2, r1]
 800a894:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a896:	0002      	movs	r2, r0
 800a898:	18bb      	adds	r3, r7, r2
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d003      	beq.n	800a8a8 <HAL_CAN_ActivateNotification+0x28>
 800a8a0:	18bb      	adds	r3, r7, r2
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d109      	bne.n	800a8bc <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6959      	ldr	r1, [r3, #20]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e007      	b.n	800a8cc <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2280      	movs	r2, #128	; 0x80
 800a8c2:	02d2      	lsls	r2, r2, #11
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
  }
}
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	b004      	add	sp, #16
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08a      	sub	sp, #40	; 0x28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	2201      	movs	r2, #1
 800a914:	4013      	ands	r3, r2
 800a916:	d100      	bne.n	800a91a <HAL_CAN_IRQHandler+0x46>
 800a918:	e084      	b.n	800aa24 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	2201      	movs	r2, #1
 800a91e:	4013      	ands	r3, r2
 800a920:	d024      	beq.n	800a96c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2201      	movs	r2, #1
 800a928:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	2202      	movs	r2, #2
 800a92e:	4013      	ands	r3, r2
 800a930:	d004      	beq.n	800a93c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	0018      	movs	r0, r3
 800a936:	f000 f981 	bl	800ac3c <HAL_CAN_TxMailbox0CompleteCallback>
 800a93a:	e017      	b.n	800a96c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	2204      	movs	r2, #4
 800a940:	4013      	ands	r3, r2
 800a942:	d005      	beq.n	800a950 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	2280      	movs	r2, #128	; 0x80
 800a948:	0112      	lsls	r2, r2, #4
 800a94a:	4313      	orrs	r3, r2
 800a94c:	627b      	str	r3, [r7, #36]	; 0x24
 800a94e:	e00d      	b.n	800a96c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	2208      	movs	r2, #8
 800a954:	4013      	ands	r3, r2
 800a956:	d005      	beq.n	800a964 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	2280      	movs	r2, #128	; 0x80
 800a95c:	0152      	lsls	r2, r2, #5
 800a95e:	4313      	orrs	r3, r2
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
 800a962:	e003      	b.n	800a96c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	0018      	movs	r0, r3
 800a968:	f000 f980 	bl	800ac6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	2380      	movs	r3, #128	; 0x80
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4013      	ands	r3, r2
 800a974:	d028      	beq.n	800a9c8 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2280      	movs	r2, #128	; 0x80
 800a97c:	0052      	lsls	r2, r2, #1
 800a97e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	2380      	movs	r3, #128	; 0x80
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4013      	ands	r3, r2
 800a988:	d004      	beq.n	800a994 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	0018      	movs	r0, r3
 800a98e:	f000 f95d 	bl	800ac4c <HAL_CAN_TxMailbox1CompleteCallback>
 800a992:	e019      	b.n	800a9c8 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a994:	69ba      	ldr	r2, [r7, #24]
 800a996:	2380      	movs	r3, #128	; 0x80
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	4013      	ands	r3, r2
 800a99c:	d005      	beq.n	800a9aa <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	2280      	movs	r2, #128	; 0x80
 800a9a2:	0192      	lsls	r2, r2, #6
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a8:	e00e      	b.n	800a9c8 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	2380      	movs	r3, #128	; 0x80
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	d005      	beq.n	800a9c0 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	2280      	movs	r2, #128	; 0x80
 800a9b8:	01d2      	lsls	r2, r2, #7
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9be:	e003      	b.n	800a9c8 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f000 f95a 	bl	800ac7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	2380      	movs	r3, #128	; 0x80
 800a9cc:	025b      	lsls	r3, r3, #9
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	d028      	beq.n	800aa24 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2280      	movs	r2, #128	; 0x80
 800a9d8:	0252      	lsls	r2, r2, #9
 800a9da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	2380      	movs	r3, #128	; 0x80
 800a9e0:	029b      	lsls	r3, r3, #10
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	d004      	beq.n	800a9f0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f000 f937 	bl	800ac5c <HAL_CAN_TxMailbox2CompleteCallback>
 800a9ee:	e019      	b.n	800aa24 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	2380      	movs	r3, #128	; 0x80
 800a9f4:	02db      	lsls	r3, r3, #11
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	d005      	beq.n	800aa06 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	2280      	movs	r2, #128	; 0x80
 800a9fe:	0212      	lsls	r2, r2, #8
 800aa00:	4313      	orrs	r3, r2
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
 800aa04:	e00e      	b.n	800aa24 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	2380      	movs	r3, #128	; 0x80
 800aa0a:	031b      	lsls	r3, r3, #12
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	d005      	beq.n	800aa1c <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	2280      	movs	r2, #128	; 0x80
 800aa14:	0252      	lsls	r2, r2, #9
 800aa16:	4313      	orrs	r3, r2
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1a:	e003      	b.n	800aa24 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	0018      	movs	r0, r3
 800aa20:	f000 f934 	bl	800ac8c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	2208      	movs	r2, #8
 800aa28:	4013      	ands	r3, r2
 800aa2a:	d00c      	beq.n	800aa46 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2210      	movs	r2, #16
 800aa30:	4013      	ands	r3, r2
 800aa32:	d008      	beq.n	800aa46 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	2280      	movs	r2, #128	; 0x80
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2210      	movs	r2, #16
 800aa44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	2204      	movs	r2, #4
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	d00b      	beq.n	800aa66 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2208      	movs	r2, #8
 800aa52:	4013      	ands	r3, r2
 800aa54:	d007      	beq.n	800aa66 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2208      	movs	r2, #8
 800aa5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	0018      	movs	r0, r3
 800aa62:	f000 f91b 	bl	800ac9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	d009      	beq.n	800aa82 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	2203      	movs	r2, #3
 800aa76:	4013      	ands	r3, r2
 800aa78:	d003      	beq.n	800aa82 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	f7fe fd8b 	bl	8009598 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	2240      	movs	r2, #64	; 0x40
 800aa86:	4013      	ands	r3, r2
 800aa88:	d00c      	beq.n	800aaa4 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2210      	movs	r2, #16
 800aa8e:	4013      	ands	r3, r2
 800aa90:	d008      	beq.n	800aaa4 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	2280      	movs	r2, #128	; 0x80
 800aa96:	00d2      	lsls	r2, r2, #3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	d00b      	beq.n	800aac4 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2208      	movs	r2, #8
 800aab0:	4013      	ands	r3, r2
 800aab2:	d007      	beq.n	800aac4 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2208      	movs	r2, #8
 800aaba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	0018      	movs	r0, r3
 800aac0:	f000 f8f4 	bl	800acac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	2210      	movs	r2, #16
 800aac8:	4013      	ands	r3, r2
 800aaca:	d009      	beq.n	800aae0 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2203      	movs	r2, #3
 800aad4:	4013      	ands	r3, r2
 800aad6:	d003      	beq.n	800aae0 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	0018      	movs	r0, r3
 800aadc:	f7fe fd6e 	bl	80095bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800aae0:	6a3a      	ldr	r2, [r7, #32]
 800aae2:	2380      	movs	r3, #128	; 0x80
 800aae4:	029b      	lsls	r3, r3, #10
 800aae6:	4013      	ands	r3, r2
 800aae8:	d00b      	beq.n	800ab02 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	2210      	movs	r2, #16
 800aaee:	4013      	ands	r3, r2
 800aaf0:	d007      	beq.n	800ab02 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2210      	movs	r2, #16
 800aaf8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0018      	movs	r0, r3
 800aafe:	f000 f8dd 	bl	800acbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ab02:	6a3a      	ldr	r2, [r7, #32]
 800ab04:	2380      	movs	r3, #128	; 0x80
 800ab06:	025b      	lsls	r3, r3, #9
 800ab08:	4013      	ands	r3, r2
 800ab0a:	d00b      	beq.n	800ab24 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	2208      	movs	r2, #8
 800ab10:	4013      	ands	r3, r2
 800ab12:	d007      	beq.n	800ab24 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2208      	movs	r2, #8
 800ab1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	0018      	movs	r0, r3
 800ab20:	f000 f8d4 	bl	800accc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ab24:	6a3a      	ldr	r2, [r7, #32]
 800ab26:	2380      	movs	r3, #128	; 0x80
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	d100      	bne.n	800ab30 <HAL_CAN_IRQHandler+0x25c>
 800ab2e:	e074      	b.n	800ac1a <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	2204      	movs	r2, #4
 800ab34:	4013      	ands	r3, r2
 800ab36:	d100      	bne.n	800ab3a <HAL_CAN_IRQHandler+0x266>
 800ab38:	e06b      	b.n	800ac12 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ab3a:	6a3a      	ldr	r2, [r7, #32]
 800ab3c:	2380      	movs	r3, #128	; 0x80
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	4013      	ands	r3, r2
 800ab42:	d007      	beq.n	800ab54 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2201      	movs	r2, #1
 800ab48:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ab4a:	d003      	beq.n	800ab54 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4313      	orrs	r3, r2
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ab54:	6a3a      	ldr	r2, [r7, #32]
 800ab56:	2380      	movs	r3, #128	; 0x80
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	d007      	beq.n	800ab6e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2202      	movs	r2, #2
 800ab62:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ab64:	d003      	beq.n	800ab6e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	2202      	movs	r2, #2
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ab6e:	6a3a      	ldr	r2, [r7, #32]
 800ab70:	2380      	movs	r3, #128	; 0x80
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	4013      	ands	r3, r2
 800ab76:	d007      	beq.n	800ab88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ab7e:	d003      	beq.n	800ab88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	2204      	movs	r2, #4
 800ab84:	4313      	orrs	r3, r2
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ab88:	6a3a      	ldr	r2, [r7, #32]
 800ab8a:	2380      	movs	r3, #128	; 0x80
 800ab8c:	011b      	lsls	r3, r3, #4
 800ab8e:	4013      	ands	r3, r2
 800ab90:	d03f      	beq.n	800ac12 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2270      	movs	r2, #112	; 0x70
 800ab96:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ab98:	d03b      	beq.n	800ac12 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2270      	movs	r2, #112	; 0x70
 800ab9e:	4013      	ands	r3, r2
 800aba0:	2b60      	cmp	r3, #96	; 0x60
 800aba2:	d027      	beq.n	800abf4 <HAL_CAN_IRQHandler+0x320>
 800aba4:	d82c      	bhi.n	800ac00 <HAL_CAN_IRQHandler+0x32c>
 800aba6:	2b50      	cmp	r3, #80	; 0x50
 800aba8:	d01f      	beq.n	800abea <HAL_CAN_IRQHandler+0x316>
 800abaa:	d829      	bhi.n	800ac00 <HAL_CAN_IRQHandler+0x32c>
 800abac:	2b40      	cmp	r3, #64	; 0x40
 800abae:	d017      	beq.n	800abe0 <HAL_CAN_IRQHandler+0x30c>
 800abb0:	d826      	bhi.n	800ac00 <HAL_CAN_IRQHandler+0x32c>
 800abb2:	2b30      	cmp	r3, #48	; 0x30
 800abb4:	d00f      	beq.n	800abd6 <HAL_CAN_IRQHandler+0x302>
 800abb6:	d823      	bhi.n	800ac00 <HAL_CAN_IRQHandler+0x32c>
 800abb8:	2b10      	cmp	r3, #16
 800abba:	d002      	beq.n	800abc2 <HAL_CAN_IRQHandler+0x2ee>
 800abbc:	2b20      	cmp	r3, #32
 800abbe:	d005      	beq.n	800abcc <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800abc0:	e01e      	b.n	800ac00 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	2208      	movs	r2, #8
 800abc6:	4313      	orrs	r3, r2
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800abca:	e01a      	b.n	800ac02 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	2210      	movs	r2, #16
 800abd0:	4313      	orrs	r3, r2
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800abd4:	e015      	b.n	800ac02 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	2220      	movs	r2, #32
 800abda:	4313      	orrs	r3, r2
 800abdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800abde:	e010      	b.n	800ac02 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	2240      	movs	r2, #64	; 0x40
 800abe4:	4313      	orrs	r3, r2
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800abe8:	e00b      	b.n	800ac02 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	2280      	movs	r2, #128	; 0x80
 800abee:	4313      	orrs	r3, r2
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800abf2:	e006      	b.n	800ac02 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	2280      	movs	r2, #128	; 0x80
 800abf8:	0052      	lsls	r2, r2, #1
 800abfa:	4313      	orrs	r3, r2
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800abfe:	e000      	b.n	800ac02 <HAL_CAN_IRQHandler+0x32e>
            break;
 800ac00:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	699a      	ldr	r2, [r3, #24]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2170      	movs	r1, #112	; 0x70
 800ac0e:	438a      	bics	r2, r1
 800ac10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2204      	movs	r2, #4
 800ac18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	431a      	orrs	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f000 f854 	bl	800acdc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ac34:	46c0      	nop			; (mov r8, r8)
 800ac36:	46bd      	mov	sp, r7
 800ac38:	b00a      	add	sp, #40	; 0x28
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800ac44:	46c0      	nop			; (mov r8, r8)
 800ac46:	46bd      	mov	sp, r7
 800ac48:	b002      	add	sp, #8
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800ac54:	46c0      	nop			; (mov r8, r8)
 800ac56:	46bd      	mov	sp, r7
 800ac58:	b002      	add	sp, #8
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800ac64:	46c0      	nop			; (mov r8, r8)
 800ac66:	46bd      	mov	sp, r7
 800ac68:	b002      	add	sp, #8
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800ac74:	46c0      	nop			; (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	b002      	add	sp, #8
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ac84:	46c0      	nop			; (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b002      	add	sp, #8
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800ac94:	46c0      	nop			; (mov r8, r8)
 800ac96:	46bd      	mov	sp, r7
 800ac98:	b002      	add	sp, #8
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800aca4:	46c0      	nop			; (mov r8, r8)
 800aca6:	46bd      	mov	sp, r7
 800aca8:	b002      	add	sp, #8
 800acaa:	bd80      	pop	{r7, pc}

0800acac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800acb4:	46c0      	nop			; (mov r8, r8)
 800acb6:	46bd      	mov	sp, r7
 800acb8:	b002      	add	sp, #8
 800acba:	bd80      	pop	{r7, pc}

0800acbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800acc4:	46c0      	nop			; (mov r8, r8)
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800acd4:	46c0      	nop			; (mov r8, r8)
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b002      	add	sp, #8
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800ace4:	46c0      	nop			; (mov r8, r8)
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b002      	add	sp, #8
 800acea:	bd80      	pop	{r7, pc}

0800acec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	0002      	movs	r2, r0
 800acf4:	1dfb      	adds	r3, r7, #7
 800acf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800acf8:	1dfb      	adds	r3, r7, #7
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b7f      	cmp	r3, #127	; 0x7f
 800acfe:	d809      	bhi.n	800ad14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad00:	1dfb      	adds	r3, r7, #7
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	001a      	movs	r2, r3
 800ad06:	231f      	movs	r3, #31
 800ad08:	401a      	ands	r2, r3
 800ad0a:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <__NVIC_EnableIRQ+0x30>)
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4091      	lsls	r1, r2
 800ad10:	000a      	movs	r2, r1
 800ad12:	601a      	str	r2, [r3, #0]
  }
}
 800ad14:	46c0      	nop			; (mov r8, r8)
 800ad16:	46bd      	mov	sp, r7
 800ad18:	b002      	add	sp, #8
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	e000e100 	.word	0xe000e100

0800ad20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	0002      	movs	r2, r0
 800ad28:	6039      	str	r1, [r7, #0]
 800ad2a:	1dfb      	adds	r3, r7, #7
 800ad2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ad2e:	1dfb      	adds	r3, r7, #7
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	2b7f      	cmp	r3, #127	; 0x7f
 800ad34:	d828      	bhi.n	800ad88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ad36:	4a2f      	ldr	r2, [pc, #188]	; (800adf4 <__NVIC_SetPriority+0xd4>)
 800ad38:	1dfb      	adds	r3, r7, #7
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b25b      	sxtb	r3, r3
 800ad3e:	089b      	lsrs	r3, r3, #2
 800ad40:	33c0      	adds	r3, #192	; 0xc0
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	589b      	ldr	r3, [r3, r2]
 800ad46:	1dfa      	adds	r2, r7, #7
 800ad48:	7812      	ldrb	r2, [r2, #0]
 800ad4a:	0011      	movs	r1, r2
 800ad4c:	2203      	movs	r2, #3
 800ad4e:	400a      	ands	r2, r1
 800ad50:	00d2      	lsls	r2, r2, #3
 800ad52:	21ff      	movs	r1, #255	; 0xff
 800ad54:	4091      	lsls	r1, r2
 800ad56:	000a      	movs	r2, r1
 800ad58:	43d2      	mvns	r2, r2
 800ad5a:	401a      	ands	r2, r3
 800ad5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	019b      	lsls	r3, r3, #6
 800ad62:	22ff      	movs	r2, #255	; 0xff
 800ad64:	401a      	ands	r2, r3
 800ad66:	1dfb      	adds	r3, r7, #7
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	0018      	movs	r0, r3
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	4003      	ands	r3, r0
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ad74:	481f      	ldr	r0, [pc, #124]	; (800adf4 <__NVIC_SetPriority+0xd4>)
 800ad76:	1dfb      	adds	r3, r7, #7
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	b25b      	sxtb	r3, r3
 800ad7c:	089b      	lsrs	r3, r3, #2
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	33c0      	adds	r3, #192	; 0xc0
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800ad86:	e031      	b.n	800adec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ad88:	4a1b      	ldr	r2, [pc, #108]	; (800adf8 <__NVIC_SetPriority+0xd8>)
 800ad8a:	1dfb      	adds	r3, r7, #7
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	0019      	movs	r1, r3
 800ad90:	230f      	movs	r3, #15
 800ad92:	400b      	ands	r3, r1
 800ad94:	3b08      	subs	r3, #8
 800ad96:	089b      	lsrs	r3, r3, #2
 800ad98:	3306      	adds	r3, #6
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	18d3      	adds	r3, r2, r3
 800ad9e:	3304      	adds	r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	1dfa      	adds	r2, r7, #7
 800ada4:	7812      	ldrb	r2, [r2, #0]
 800ada6:	0011      	movs	r1, r2
 800ada8:	2203      	movs	r2, #3
 800adaa:	400a      	ands	r2, r1
 800adac:	00d2      	lsls	r2, r2, #3
 800adae:	21ff      	movs	r1, #255	; 0xff
 800adb0:	4091      	lsls	r1, r2
 800adb2:	000a      	movs	r2, r1
 800adb4:	43d2      	mvns	r2, r2
 800adb6:	401a      	ands	r2, r3
 800adb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	019b      	lsls	r3, r3, #6
 800adbe:	22ff      	movs	r2, #255	; 0xff
 800adc0:	401a      	ands	r2, r3
 800adc2:	1dfb      	adds	r3, r7, #7
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	0018      	movs	r0, r3
 800adc8:	2303      	movs	r3, #3
 800adca:	4003      	ands	r3, r0
 800adcc:	00db      	lsls	r3, r3, #3
 800adce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800add0:	4809      	ldr	r0, [pc, #36]	; (800adf8 <__NVIC_SetPriority+0xd8>)
 800add2:	1dfb      	adds	r3, r7, #7
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	001c      	movs	r4, r3
 800add8:	230f      	movs	r3, #15
 800adda:	4023      	ands	r3, r4
 800addc:	3b08      	subs	r3, #8
 800adde:	089b      	lsrs	r3, r3, #2
 800ade0:	430a      	orrs	r2, r1
 800ade2:	3306      	adds	r3, #6
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	18c3      	adds	r3, r0, r3
 800ade8:	3304      	adds	r3, #4
 800adea:	601a      	str	r2, [r3, #0]
}
 800adec:	46c0      	nop			; (mov r8, r8)
 800adee:	46bd      	mov	sp, r7
 800adf0:	b003      	add	sp, #12
 800adf2:	bd90      	pop	{r4, r7, pc}
 800adf4:	e000e100 	.word	0xe000e100
 800adf8:	e000ed00 	.word	0xe000ed00

0800adfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	1e5a      	subs	r2, r3, #1
 800ae08:	2380      	movs	r3, #128	; 0x80
 800ae0a:	045b      	lsls	r3, r3, #17
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d301      	bcc.n	800ae14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ae10:	2301      	movs	r3, #1
 800ae12:	e010      	b.n	800ae36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae14:	4b0a      	ldr	r3, [pc, #40]	; (800ae40 <SysTick_Config+0x44>)
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	3a01      	subs	r2, #1
 800ae1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	425b      	negs	r3, r3
 800ae20:	2103      	movs	r1, #3
 800ae22:	0018      	movs	r0, r3
 800ae24:	f7ff ff7c 	bl	800ad20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae28:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <SysTick_Config+0x44>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae2e:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <SysTick_Config+0x44>)
 800ae30:	2207      	movs	r2, #7
 800ae32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b002      	add	sp, #8
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	e000e010 	.word	0xe000e010

0800ae44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	607a      	str	r2, [r7, #4]
 800ae4e:	210f      	movs	r1, #15
 800ae50:	187b      	adds	r3, r7, r1
 800ae52:	1c02      	adds	r2, r0, #0
 800ae54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	187b      	adds	r3, r7, r1
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	b25b      	sxtb	r3, r3
 800ae5e:	0011      	movs	r1, r2
 800ae60:	0018      	movs	r0, r3
 800ae62:	f7ff ff5d 	bl	800ad20 <__NVIC_SetPriority>
}
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	b004      	add	sp, #16
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	0002      	movs	r2, r0
 800ae76:	1dfb      	adds	r3, r7, #7
 800ae78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae7a:	1dfb      	adds	r3, r7, #7
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	b25b      	sxtb	r3, r3
 800ae80:	0018      	movs	r0, r3
 800ae82:	f7ff ff33 	bl	800acec <__NVIC_EnableIRQ>
}
 800ae86:	46c0      	nop			; (mov r8, r8)
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	b002      	add	sp, #8
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b082      	sub	sp, #8
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	0018      	movs	r0, r3
 800ae9a:	f7ff ffaf 	bl	800adfc <SysTick_Config>
 800ae9e:	0003      	movs	r3, r0
}
 800aea0:	0018      	movs	r0, r3
 800aea2:	46bd      	mov	sp, r7
 800aea4:	b002      	add	sp, #8
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aeb6:	e155      	b.n	800b164 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2101      	movs	r1, #1
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4091      	lsls	r1, r2
 800aec2:	000a      	movs	r2, r1
 800aec4:	4013      	ands	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d100      	bne.n	800aed0 <HAL_GPIO_Init+0x28>
 800aece:	e146      	b.n	800b15e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	2203      	movs	r2, #3
 800aed6:	4013      	ands	r3, r2
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d005      	beq.n	800aee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2203      	movs	r2, #3
 800aee2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d130      	bne.n	800af4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	2203      	movs	r2, #3
 800aef4:	409a      	lsls	r2, r3
 800aef6:	0013      	movs	r3, r2
 800aef8:	43da      	mvns	r2, r3
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	4013      	ands	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	68da      	ldr	r2, [r3, #12]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	409a      	lsls	r2, r3
 800af0a:	0013      	movs	r3, r2
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4313      	orrs	r3, r2
 800af10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af1e:	2201      	movs	r2, #1
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	409a      	lsls	r2, r3
 800af24:	0013      	movs	r3, r2
 800af26:	43da      	mvns	r2, r3
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	4013      	ands	r3, r2
 800af2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	091b      	lsrs	r3, r3, #4
 800af34:	2201      	movs	r2, #1
 800af36:	401a      	ands	r2, r3
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	409a      	lsls	r2, r3
 800af3c:	0013      	movs	r3, r2
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	4313      	orrs	r3, r2
 800af42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2203      	movs	r2, #3
 800af50:	4013      	ands	r3, r2
 800af52:	2b03      	cmp	r3, #3
 800af54:	d017      	beq.n	800af86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	2203      	movs	r2, #3
 800af62:	409a      	lsls	r2, r3
 800af64:	0013      	movs	r3, r2
 800af66:	43da      	mvns	r2, r3
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	4013      	ands	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	409a      	lsls	r2, r3
 800af78:	0013      	movs	r3, r2
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	2203      	movs	r2, #3
 800af8c:	4013      	ands	r3, r2
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d123      	bne.n	800afda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	08da      	lsrs	r2, r3, #3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3208      	adds	r2, #8
 800af9a:	0092      	lsls	r2, r2, #2
 800af9c:	58d3      	ldr	r3, [r2, r3]
 800af9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2207      	movs	r2, #7
 800afa4:	4013      	ands	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	220f      	movs	r2, #15
 800afaa:	409a      	lsls	r2, r3
 800afac:	0013      	movs	r3, r2
 800afae:	43da      	mvns	r2, r3
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	4013      	ands	r3, r2
 800afb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2107      	movs	r1, #7
 800afbe:	400b      	ands	r3, r1
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	409a      	lsls	r2, r3
 800afc4:	0013      	movs	r3, r2
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	4313      	orrs	r3, r2
 800afca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	08da      	lsrs	r2, r3, #3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3208      	adds	r2, #8
 800afd4:	0092      	lsls	r2, r2, #2
 800afd6:	6939      	ldr	r1, [r7, #16]
 800afd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	2203      	movs	r2, #3
 800afe6:	409a      	lsls	r2, r3
 800afe8:	0013      	movs	r3, r2
 800afea:	43da      	mvns	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	4013      	ands	r3, r2
 800aff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2203      	movs	r2, #3
 800aff8:	401a      	ands	r2, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	409a      	lsls	r2, r3
 800b000:	0013      	movs	r3, r2
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	4313      	orrs	r3, r2
 800b006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	23c0      	movs	r3, #192	; 0xc0
 800b014:	029b      	lsls	r3, r3, #10
 800b016:	4013      	ands	r3, r2
 800b018:	d100      	bne.n	800b01c <HAL_GPIO_Init+0x174>
 800b01a:	e0a0      	b.n	800b15e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b01c:	4b57      	ldr	r3, [pc, #348]	; (800b17c <HAL_GPIO_Init+0x2d4>)
 800b01e:	699a      	ldr	r2, [r3, #24]
 800b020:	4b56      	ldr	r3, [pc, #344]	; (800b17c <HAL_GPIO_Init+0x2d4>)
 800b022:	2101      	movs	r1, #1
 800b024:	430a      	orrs	r2, r1
 800b026:	619a      	str	r2, [r3, #24]
 800b028:	4b54      	ldr	r3, [pc, #336]	; (800b17c <HAL_GPIO_Init+0x2d4>)
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2201      	movs	r2, #1
 800b02e:	4013      	ands	r3, r2
 800b030:	60bb      	str	r3, [r7, #8]
 800b032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b034:	4a52      	ldr	r2, [pc, #328]	; (800b180 <HAL_GPIO_Init+0x2d8>)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	089b      	lsrs	r3, r3, #2
 800b03a:	3302      	adds	r3, #2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	589b      	ldr	r3, [r3, r2]
 800b040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2203      	movs	r2, #3
 800b046:	4013      	ands	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	220f      	movs	r2, #15
 800b04c:	409a      	lsls	r2, r3
 800b04e:	0013      	movs	r3, r2
 800b050:	43da      	mvns	r2, r3
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	4013      	ands	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	2390      	movs	r3, #144	; 0x90
 800b05c:	05db      	lsls	r3, r3, #23
 800b05e:	429a      	cmp	r2, r3
 800b060:	d019      	beq.n	800b096 <HAL_GPIO_Init+0x1ee>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a47      	ldr	r2, [pc, #284]	; (800b184 <HAL_GPIO_Init+0x2dc>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d013      	beq.n	800b092 <HAL_GPIO_Init+0x1ea>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a46      	ldr	r2, [pc, #280]	; (800b188 <HAL_GPIO_Init+0x2e0>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d00d      	beq.n	800b08e <HAL_GPIO_Init+0x1e6>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a45      	ldr	r2, [pc, #276]	; (800b18c <HAL_GPIO_Init+0x2e4>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d007      	beq.n	800b08a <HAL_GPIO_Init+0x1e2>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a44      	ldr	r2, [pc, #272]	; (800b190 <HAL_GPIO_Init+0x2e8>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d101      	bne.n	800b086 <HAL_GPIO_Init+0x1de>
 800b082:	2304      	movs	r3, #4
 800b084:	e008      	b.n	800b098 <HAL_GPIO_Init+0x1f0>
 800b086:	2305      	movs	r3, #5
 800b088:	e006      	b.n	800b098 <HAL_GPIO_Init+0x1f0>
 800b08a:	2303      	movs	r3, #3
 800b08c:	e004      	b.n	800b098 <HAL_GPIO_Init+0x1f0>
 800b08e:	2302      	movs	r3, #2
 800b090:	e002      	b.n	800b098 <HAL_GPIO_Init+0x1f0>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <HAL_GPIO_Init+0x1f0>
 800b096:	2300      	movs	r3, #0
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	2103      	movs	r1, #3
 800b09c:	400a      	ands	r2, r1
 800b09e:	0092      	lsls	r2, r2, #2
 800b0a0:	4093      	lsls	r3, r2
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b0a8:	4935      	ldr	r1, [pc, #212]	; (800b180 <HAL_GPIO_Init+0x2d8>)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	089b      	lsrs	r3, r3, #2
 800b0ae:	3302      	adds	r3, #2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b0b6:	4b37      	ldr	r3, [pc, #220]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	43da      	mvns	r2, r3
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	2380      	movs	r3, #128	; 0x80
 800b0cc:	025b      	lsls	r3, r3, #9
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	d003      	beq.n	800b0da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b0da:	4b2e      	ldr	r3, [pc, #184]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800b0e0:	4b2c      	ldr	r3, [pc, #176]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	43da      	mvns	r2, r3
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	2380      	movs	r3, #128	; 0x80
 800b0f6:	029b      	lsls	r3, r3, #10
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	d003      	beq.n	800b104 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	4313      	orrs	r3, r2
 800b102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b104:	4b23      	ldr	r3, [pc, #140]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b10a:	4b22      	ldr	r3, [pc, #136]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	43da      	mvns	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4013      	ands	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	2380      	movs	r3, #128	; 0x80
 800b120:	035b      	lsls	r3, r3, #13
 800b122:	4013      	ands	r3, r2
 800b124:	d003      	beq.n	800b12e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b12e:	4b19      	ldr	r3, [pc, #100]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b134:	4b17      	ldr	r3, [pc, #92]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	43da      	mvns	r2, r3
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	4013      	ands	r3, r2
 800b142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	2380      	movs	r3, #128	; 0x80
 800b14a:	039b      	lsls	r3, r3, #14
 800b14c:	4013      	ands	r3, r2
 800b14e:	d003      	beq.n	800b158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4313      	orrs	r3, r2
 800b156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b158:	4b0e      	ldr	r3, [pc, #56]	; (800b194 <HAL_GPIO_Init+0x2ec>)
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	3301      	adds	r3, #1
 800b162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	40da      	lsrs	r2, r3
 800b16c:	1e13      	subs	r3, r2, #0
 800b16e:	d000      	beq.n	800b172 <HAL_GPIO_Init+0x2ca>
 800b170:	e6a2      	b.n	800aeb8 <HAL_GPIO_Init+0x10>
  } 
}
 800b172:	46c0      	nop			; (mov r8, r8)
 800b174:	46c0      	nop			; (mov r8, r8)
 800b176:	46bd      	mov	sp, r7
 800b178:	b006      	add	sp, #24
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	40021000 	.word	0x40021000
 800b180:	40010000 	.word	0x40010000
 800b184:	48000400 	.word	0x48000400
 800b188:	48000800 	.word	0x48000800
 800b18c:	48000c00 	.word	0x48000c00
 800b190:	48001000 	.word	0x48001000
 800b194:	40010400 	.word	0x40010400

0800b198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	000a      	movs	r2, r1
 800b1a2:	1cbb      	adds	r3, r7, #2
 800b1a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	1cba      	adds	r2, r7, #2
 800b1ac:	8812      	ldrh	r2, [r2, #0]
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	d004      	beq.n	800b1bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b1b2:	230f      	movs	r3, #15
 800b1b4:	18fb      	adds	r3, r7, r3
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e003      	b.n	800b1c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1bc:	230f      	movs	r3, #15
 800b1be:	18fb      	adds	r3, r7, r3
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b1c4:	230f      	movs	r3, #15
 800b1c6:	18fb      	adds	r3, r7, r3
 800b1c8:	781b      	ldrb	r3, [r3, #0]
  }
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	b004      	add	sp, #16
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	0008      	movs	r0, r1
 800b1dc:	0011      	movs	r1, r2
 800b1de:	1cbb      	adds	r3, r7, #2
 800b1e0:	1c02      	adds	r2, r0, #0
 800b1e2:	801a      	strh	r2, [r3, #0]
 800b1e4:	1c7b      	adds	r3, r7, #1
 800b1e6:	1c0a      	adds	r2, r1, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b1ea:	1c7b      	adds	r3, r7, #1
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b1f2:	1cbb      	adds	r3, r7, #2
 800b1f4:	881a      	ldrh	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b1fa:	e003      	b.n	800b204 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b1fc:	1cbb      	adds	r3, r7, #2
 800b1fe:	881a      	ldrh	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b204:	46c0      	nop			; (mov r8, r8)
 800b206:	46bd      	mov	sp, r7
 800b208:	b002      	add	sp, #8
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	000a      	movs	r2, r1
 800b216:	1cbb      	adds	r3, r7, #2
 800b218:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b220:	1cbb      	adds	r3, r7, #2
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4013      	ands	r3, r2
 800b228:	041a      	lsls	r2, r3, #16
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	43db      	mvns	r3, r3
 800b22e:	1cb9      	adds	r1, r7, #2
 800b230:	8809      	ldrh	r1, [r1, #0]
 800b232:	400b      	ands	r3, r1
 800b234:	431a      	orrs	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	619a      	str	r2, [r3, #24]
}
 800b23a:	46c0      	nop			; (mov r8, r8)
 800b23c:	46bd      	mov	sp, r7
 800b23e:	b004      	add	sp, #16
 800b240:	bd80      	pop	{r7, pc}
	...

0800b244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	f000 fb76 	bl	800b944 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2201      	movs	r2, #1
 800b25e:	4013      	ands	r3, r2
 800b260:	d100      	bne.n	800b264 <HAL_RCC_OscConfig+0x20>
 800b262:	e08e      	b.n	800b382 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800b264:	4bc5      	ldr	r3, [pc, #788]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	220c      	movs	r2, #12
 800b26a:	4013      	ands	r3, r2
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	d00e      	beq.n	800b28e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b270:	4bc2      	ldr	r3, [pc, #776]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	220c      	movs	r2, #12
 800b276:	4013      	ands	r3, r2
 800b278:	2b08      	cmp	r3, #8
 800b27a:	d117      	bne.n	800b2ac <HAL_RCC_OscConfig+0x68>
 800b27c:	4bbf      	ldr	r3, [pc, #764]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	23c0      	movs	r3, #192	; 0xc0
 800b282:	025b      	lsls	r3, r3, #9
 800b284:	401a      	ands	r2, r3
 800b286:	2380      	movs	r3, #128	; 0x80
 800b288:	025b      	lsls	r3, r3, #9
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d10e      	bne.n	800b2ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b28e:	4bbb      	ldr	r3, [pc, #748]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	2380      	movs	r3, #128	; 0x80
 800b294:	029b      	lsls	r3, r3, #10
 800b296:	4013      	ands	r3, r2
 800b298:	d100      	bne.n	800b29c <HAL_RCC_OscConfig+0x58>
 800b29a:	e071      	b.n	800b380 <HAL_RCC_OscConfig+0x13c>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d000      	beq.n	800b2a6 <HAL_RCC_OscConfig+0x62>
 800b2a4:	e06c      	b.n	800b380 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	f000 fb4c 	bl	800b944 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d107      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x80>
 800b2b4:	4bb1      	ldr	r3, [pc, #708]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	4bb0      	ldr	r3, [pc, #704]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2ba:	2180      	movs	r1, #128	; 0x80
 800b2bc:	0249      	lsls	r1, r1, #9
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	e02f      	b.n	800b324 <HAL_RCC_OscConfig+0xe0>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10c      	bne.n	800b2e6 <HAL_RCC_OscConfig+0xa2>
 800b2cc:	4bab      	ldr	r3, [pc, #684]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	4baa      	ldr	r3, [pc, #680]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2d2:	49ab      	ldr	r1, [pc, #684]	; (800b580 <HAL_RCC_OscConfig+0x33c>)
 800b2d4:	400a      	ands	r2, r1
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	4ba8      	ldr	r3, [pc, #672]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	4ba7      	ldr	r3, [pc, #668]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2de:	49a9      	ldr	r1, [pc, #676]	; (800b584 <HAL_RCC_OscConfig+0x340>)
 800b2e0:	400a      	ands	r2, r1
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	e01e      	b.n	800b324 <HAL_RCC_OscConfig+0xe0>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	2b05      	cmp	r3, #5
 800b2ec:	d10e      	bne.n	800b30c <HAL_RCC_OscConfig+0xc8>
 800b2ee:	4ba3      	ldr	r3, [pc, #652]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	4ba2      	ldr	r3, [pc, #648]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2f4:	2180      	movs	r1, #128	; 0x80
 800b2f6:	02c9      	lsls	r1, r1, #11
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	4b9f      	ldr	r3, [pc, #636]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	4b9e      	ldr	r3, [pc, #632]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b302:	2180      	movs	r1, #128	; 0x80
 800b304:	0249      	lsls	r1, r1, #9
 800b306:	430a      	orrs	r2, r1
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	e00b      	b.n	800b324 <HAL_RCC_OscConfig+0xe0>
 800b30c:	4b9b      	ldr	r3, [pc, #620]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	4b9a      	ldr	r3, [pc, #616]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b312:	499b      	ldr	r1, [pc, #620]	; (800b580 <HAL_RCC_OscConfig+0x33c>)
 800b314:	400a      	ands	r2, r1
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	4b98      	ldr	r3, [pc, #608]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	4b97      	ldr	r3, [pc, #604]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b31e:	4999      	ldr	r1, [pc, #612]	; (800b584 <HAL_RCC_OscConfig+0x340>)
 800b320:	400a      	ands	r2, r1
 800b322:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d014      	beq.n	800b356 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b32c:	f7fe fdcc 	bl	8009ec8 <HAL_GetTick>
 800b330:	0003      	movs	r3, r0
 800b332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b334:	e008      	b.n	800b348 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b336:	f7fe fdc7 	bl	8009ec8 <HAL_GetTick>
 800b33a:	0002      	movs	r2, r0
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b64      	cmp	r3, #100	; 0x64
 800b342:	d901      	bls.n	800b348 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e2fd      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b348:	4b8c      	ldr	r3, [pc, #560]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	2380      	movs	r3, #128	; 0x80
 800b34e:	029b      	lsls	r3, r3, #10
 800b350:	4013      	ands	r3, r2
 800b352:	d0f0      	beq.n	800b336 <HAL_RCC_OscConfig+0xf2>
 800b354:	e015      	b.n	800b382 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b356:	f7fe fdb7 	bl	8009ec8 <HAL_GetTick>
 800b35a:	0003      	movs	r3, r0
 800b35c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b35e:	e008      	b.n	800b372 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b360:	f7fe fdb2 	bl	8009ec8 <HAL_GetTick>
 800b364:	0002      	movs	r2, r0
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	2b64      	cmp	r3, #100	; 0x64
 800b36c:	d901      	bls.n	800b372 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e2e8      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b372:	4b82      	ldr	r3, [pc, #520]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	2380      	movs	r3, #128	; 0x80
 800b378:	029b      	lsls	r3, r3, #10
 800b37a:	4013      	ands	r3, r2
 800b37c:	d1f0      	bne.n	800b360 <HAL_RCC_OscConfig+0x11c>
 800b37e:	e000      	b.n	800b382 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b380:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2202      	movs	r2, #2
 800b388:	4013      	ands	r3, r2
 800b38a:	d100      	bne.n	800b38e <HAL_RCC_OscConfig+0x14a>
 800b38c:	e06c      	b.n	800b468 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800b38e:	4b7b      	ldr	r3, [pc, #492]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	220c      	movs	r2, #12
 800b394:	4013      	ands	r3, r2
 800b396:	d00e      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800b398:	4b78      	ldr	r3, [pc, #480]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	220c      	movs	r2, #12
 800b39e:	4013      	ands	r3, r2
 800b3a0:	2b08      	cmp	r3, #8
 800b3a2:	d11f      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x1a0>
 800b3a4:	4b75      	ldr	r3, [pc, #468]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	23c0      	movs	r3, #192	; 0xc0
 800b3aa:	025b      	lsls	r3, r3, #9
 800b3ac:	401a      	ands	r2, r3
 800b3ae:	2380      	movs	r3, #128	; 0x80
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d116      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3b6:	4b71      	ldr	r3, [pc, #452]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	4013      	ands	r3, r2
 800b3be:	d005      	beq.n	800b3cc <HAL_RCC_OscConfig+0x188>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d001      	beq.n	800b3cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e2bb      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3cc:	4b6b      	ldr	r3, [pc, #428]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	22f8      	movs	r2, #248	; 0xf8
 800b3d2:	4393      	bics	r3, r2
 800b3d4:	0019      	movs	r1, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	00da      	lsls	r2, r3, #3
 800b3dc:	4b67      	ldr	r3, [pc, #412]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3e2:	e041      	b.n	800b468 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d024      	beq.n	800b436 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b3ec:	4b63      	ldr	r3, [pc, #396]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4b62      	ldr	r3, [pc, #392]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3f8:	f7fe fd66 	bl	8009ec8 <HAL_GetTick>
 800b3fc:	0003      	movs	r3, r0
 800b3fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b400:	e008      	b.n	800b414 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b402:	f7fe fd61 	bl	8009ec8 <HAL_GetTick>
 800b406:	0002      	movs	r2, r0
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d901      	bls.n	800b414 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e297      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b414:	4b59      	ldr	r3, [pc, #356]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2202      	movs	r2, #2
 800b41a:	4013      	ands	r3, r2
 800b41c:	d0f1      	beq.n	800b402 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b41e:	4b57      	ldr	r3, [pc, #348]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	22f8      	movs	r2, #248	; 0xf8
 800b424:	4393      	bics	r3, r2
 800b426:	0019      	movs	r1, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	00da      	lsls	r2, r3, #3
 800b42e:	4b53      	ldr	r3, [pc, #332]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b430:	430a      	orrs	r2, r1
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e018      	b.n	800b468 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b436:	4b51      	ldr	r3, [pc, #324]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b50      	ldr	r3, [pc, #320]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b43c:	2101      	movs	r1, #1
 800b43e:	438a      	bics	r2, r1
 800b440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b442:	f7fe fd41 	bl	8009ec8 <HAL_GetTick>
 800b446:	0003      	movs	r3, r0
 800b448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b44a:	e008      	b.n	800b45e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b44c:	f7fe fd3c 	bl	8009ec8 <HAL_GetTick>
 800b450:	0002      	movs	r2, r0
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	2b02      	cmp	r3, #2
 800b458:	d901      	bls.n	800b45e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e272      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b45e:	4b47      	ldr	r3, [pc, #284]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2202      	movs	r2, #2
 800b464:	4013      	ands	r3, r2
 800b466:	d1f1      	bne.n	800b44c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2208      	movs	r2, #8
 800b46e:	4013      	ands	r3, r2
 800b470:	d036      	beq.n	800b4e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d019      	beq.n	800b4ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b47a:	4b40      	ldr	r3, [pc, #256]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b47e:	4b3f      	ldr	r3, [pc, #252]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b480:	2101      	movs	r1, #1
 800b482:	430a      	orrs	r2, r1
 800b484:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b486:	f7fe fd1f 	bl	8009ec8 <HAL_GetTick>
 800b48a:	0003      	movs	r3, r0
 800b48c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b48e:	e008      	b.n	800b4a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b490:	f7fe fd1a 	bl	8009ec8 <HAL_GetTick>
 800b494:	0002      	movs	r2, r0
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d901      	bls.n	800b4a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e250      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4a2:	4b36      	ldr	r3, [pc, #216]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	d0f1      	beq.n	800b490 <HAL_RCC_OscConfig+0x24c>
 800b4ac:	e018      	b.n	800b4e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b4ae:	4b33      	ldr	r3, [pc, #204]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b4b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4b2:	4b32      	ldr	r3, [pc, #200]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	438a      	bics	r2, r1
 800b4b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4ba:	f7fe fd05 	bl	8009ec8 <HAL_GetTick>
 800b4be:	0003      	movs	r3, r0
 800b4c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4c2:	e008      	b.n	800b4d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b4c4:	f7fe fd00 	bl	8009ec8 <HAL_GetTick>
 800b4c8:	0002      	movs	r2, r0
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e236      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4d6:	4b29      	ldr	r3, [pc, #164]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	2202      	movs	r2, #2
 800b4dc:	4013      	ands	r3, r2
 800b4de:	d1f1      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2204      	movs	r2, #4
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	d100      	bne.n	800b4ec <HAL_RCC_OscConfig+0x2a8>
 800b4ea:	e0b5      	b.n	800b658 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4ec:	201f      	movs	r0, #31
 800b4ee:	183b      	adds	r3, r7, r0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4f4:	4b21      	ldr	r3, [pc, #132]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b4f6:	69da      	ldr	r2, [r3, #28]
 800b4f8:	2380      	movs	r3, #128	; 0x80
 800b4fa:	055b      	lsls	r3, r3, #21
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	d110      	bne.n	800b522 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b500:	4b1e      	ldr	r3, [pc, #120]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	4b1d      	ldr	r3, [pc, #116]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b506:	2180      	movs	r1, #128	; 0x80
 800b508:	0549      	lsls	r1, r1, #21
 800b50a:	430a      	orrs	r2, r1
 800b50c:	61da      	str	r2, [r3, #28]
 800b50e:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b510:	69da      	ldr	r2, [r3, #28]
 800b512:	2380      	movs	r3, #128	; 0x80
 800b514:	055b      	lsls	r3, r3, #21
 800b516:	4013      	ands	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b51c:	183b      	adds	r3, r7, r0
 800b51e:	2201      	movs	r2, #1
 800b520:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b522:	4b19      	ldr	r3, [pc, #100]	; (800b588 <HAL_RCC_OscConfig+0x344>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	2380      	movs	r3, #128	; 0x80
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	4013      	ands	r3, r2
 800b52c:	d11a      	bne.n	800b564 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b52e:	4b16      	ldr	r3, [pc, #88]	; (800b588 <HAL_RCC_OscConfig+0x344>)
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	4b15      	ldr	r3, [pc, #84]	; (800b588 <HAL_RCC_OscConfig+0x344>)
 800b534:	2180      	movs	r1, #128	; 0x80
 800b536:	0049      	lsls	r1, r1, #1
 800b538:	430a      	orrs	r2, r1
 800b53a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b53c:	f7fe fcc4 	bl	8009ec8 <HAL_GetTick>
 800b540:	0003      	movs	r3, r0
 800b542:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b544:	e008      	b.n	800b558 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b546:	f7fe fcbf 	bl	8009ec8 <HAL_GetTick>
 800b54a:	0002      	movs	r2, r0
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	2b64      	cmp	r3, #100	; 0x64
 800b552:	d901      	bls.n	800b558 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e1f5      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b558:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <HAL_RCC_OscConfig+0x344>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	4013      	ands	r3, r2
 800b562:	d0f0      	beq.n	800b546 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d10f      	bne.n	800b58c <HAL_RCC_OscConfig+0x348>
 800b56c:	4b03      	ldr	r3, [pc, #12]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b56e:	6a1a      	ldr	r2, [r3, #32]
 800b570:	4b02      	ldr	r3, [pc, #8]	; (800b57c <HAL_RCC_OscConfig+0x338>)
 800b572:	2101      	movs	r1, #1
 800b574:	430a      	orrs	r2, r1
 800b576:	621a      	str	r2, [r3, #32]
 800b578:	e036      	b.n	800b5e8 <HAL_RCC_OscConfig+0x3a4>
 800b57a:	46c0      	nop			; (mov r8, r8)
 800b57c:	40021000 	.word	0x40021000
 800b580:	fffeffff 	.word	0xfffeffff
 800b584:	fffbffff 	.word	0xfffbffff
 800b588:	40007000 	.word	0x40007000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10c      	bne.n	800b5ae <HAL_RCC_OscConfig+0x36a>
 800b594:	4bca      	ldr	r3, [pc, #808]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b596:	6a1a      	ldr	r2, [r3, #32]
 800b598:	4bc9      	ldr	r3, [pc, #804]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b59a:	2101      	movs	r1, #1
 800b59c:	438a      	bics	r2, r1
 800b59e:	621a      	str	r2, [r3, #32]
 800b5a0:	4bc7      	ldr	r3, [pc, #796]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5a2:	6a1a      	ldr	r2, [r3, #32]
 800b5a4:	4bc6      	ldr	r3, [pc, #792]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5a6:	2104      	movs	r1, #4
 800b5a8:	438a      	bics	r2, r1
 800b5aa:	621a      	str	r2, [r3, #32]
 800b5ac:	e01c      	b.n	800b5e8 <HAL_RCC_OscConfig+0x3a4>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	2b05      	cmp	r3, #5
 800b5b4:	d10c      	bne.n	800b5d0 <HAL_RCC_OscConfig+0x38c>
 800b5b6:	4bc2      	ldr	r3, [pc, #776]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5b8:	6a1a      	ldr	r2, [r3, #32]
 800b5ba:	4bc1      	ldr	r3, [pc, #772]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5bc:	2104      	movs	r1, #4
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	621a      	str	r2, [r3, #32]
 800b5c2:	4bbf      	ldr	r3, [pc, #764]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5c4:	6a1a      	ldr	r2, [r3, #32]
 800b5c6:	4bbe      	ldr	r3, [pc, #760]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	621a      	str	r2, [r3, #32]
 800b5ce:	e00b      	b.n	800b5e8 <HAL_RCC_OscConfig+0x3a4>
 800b5d0:	4bbb      	ldr	r3, [pc, #748]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5d2:	6a1a      	ldr	r2, [r3, #32]
 800b5d4:	4bba      	ldr	r3, [pc, #744]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	438a      	bics	r2, r1
 800b5da:	621a      	str	r2, [r3, #32]
 800b5dc:	4bb8      	ldr	r3, [pc, #736]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5de:	6a1a      	ldr	r2, [r3, #32]
 800b5e0:	4bb7      	ldr	r3, [pc, #732]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	438a      	bics	r2, r1
 800b5e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d014      	beq.n	800b61a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b5f0:	f7fe fc6a 	bl	8009ec8 <HAL_GetTick>
 800b5f4:	0003      	movs	r3, r0
 800b5f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5f8:	e009      	b.n	800b60e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b5fa:	f7fe fc65 	bl	8009ec8 <HAL_GetTick>
 800b5fe:	0002      	movs	r2, r0
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	4aaf      	ldr	r2, [pc, #700]	; (800b8c4 <HAL_RCC_OscConfig+0x680>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d901      	bls.n	800b60e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e19a      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b60e:	4bac      	ldr	r3, [pc, #688]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	2202      	movs	r2, #2
 800b614:	4013      	ands	r3, r2
 800b616:	d0f0      	beq.n	800b5fa <HAL_RCC_OscConfig+0x3b6>
 800b618:	e013      	b.n	800b642 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b61a:	f7fe fc55 	bl	8009ec8 <HAL_GetTick>
 800b61e:	0003      	movs	r3, r0
 800b620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b622:	e009      	b.n	800b638 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b624:	f7fe fc50 	bl	8009ec8 <HAL_GetTick>
 800b628:	0002      	movs	r2, r0
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	4aa5      	ldr	r2, [pc, #660]	; (800b8c4 <HAL_RCC_OscConfig+0x680>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d901      	bls.n	800b638 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e185      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b638:	4ba1      	ldr	r3, [pc, #644]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	2202      	movs	r2, #2
 800b63e:	4013      	ands	r3, r2
 800b640:	d1f0      	bne.n	800b624 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b642:	231f      	movs	r3, #31
 800b644:	18fb      	adds	r3, r7, r3
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d105      	bne.n	800b658 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b64c:	4b9c      	ldr	r3, [pc, #624]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b64e:	69da      	ldr	r2, [r3, #28]
 800b650:	4b9b      	ldr	r3, [pc, #620]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b652:	499d      	ldr	r1, [pc, #628]	; (800b8c8 <HAL_RCC_OscConfig+0x684>)
 800b654:	400a      	ands	r2, r1
 800b656:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2210      	movs	r2, #16
 800b65e:	4013      	ands	r3, r2
 800b660:	d063      	beq.n	800b72a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d12a      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800b66a:	4b95      	ldr	r3, [pc, #596]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b66c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b66e:	4b94      	ldr	r3, [pc, #592]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b670:	2104      	movs	r1, #4
 800b672:	430a      	orrs	r2, r1
 800b674:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800b676:	4b92      	ldr	r3, [pc, #584]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b67a:	4b91      	ldr	r3, [pc, #580]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b67c:	2101      	movs	r1, #1
 800b67e:	430a      	orrs	r2, r1
 800b680:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b682:	f7fe fc21 	bl	8009ec8 <HAL_GetTick>
 800b686:	0003      	movs	r3, r0
 800b688:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800b68a:	e008      	b.n	800b69e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800b68c:	f7fe fc1c 	bl	8009ec8 <HAL_GetTick>
 800b690:	0002      	movs	r2, r0
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	2b02      	cmp	r3, #2
 800b698:	d901      	bls.n	800b69e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e152      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800b69e:	4b88      	ldr	r3, [pc, #544]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	d0f1      	beq.n	800b68c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800b6a8:	4b85      	ldr	r3, [pc, #532]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ac:	22f8      	movs	r2, #248	; 0xf8
 800b6ae:	4393      	bics	r3, r2
 800b6b0:	0019      	movs	r1, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	00da      	lsls	r2, r3, #3
 800b6b8:	4b81      	ldr	r3, [pc, #516]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	635a      	str	r2, [r3, #52]	; 0x34
 800b6be:	e034      	b.n	800b72a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	3305      	adds	r3, #5
 800b6c6:	d111      	bne.n	800b6ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800b6c8:	4b7d      	ldr	r3, [pc, #500]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6cc:	4b7c      	ldr	r3, [pc, #496]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6ce:	2104      	movs	r1, #4
 800b6d0:	438a      	bics	r2, r1
 800b6d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800b6d4:	4b7a      	ldr	r3, [pc, #488]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d8:	22f8      	movs	r2, #248	; 0xf8
 800b6da:	4393      	bics	r3, r2
 800b6dc:	0019      	movs	r1, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	00da      	lsls	r2, r3, #3
 800b6e4:	4b76      	ldr	r3, [pc, #472]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6e6:	430a      	orrs	r2, r1
 800b6e8:	635a      	str	r2, [r3, #52]	; 0x34
 800b6ea:	e01e      	b.n	800b72a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800b6ec:	4b74      	ldr	r3, [pc, #464]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6f0:	4b73      	ldr	r3, [pc, #460]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6f2:	2104      	movs	r1, #4
 800b6f4:	430a      	orrs	r2, r1
 800b6f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800b6f8:	4b71      	ldr	r3, [pc, #452]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6fc:	4b70      	ldr	r3, [pc, #448]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b6fe:	2101      	movs	r1, #1
 800b700:	438a      	bics	r2, r1
 800b702:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b704:	f7fe fbe0 	bl	8009ec8 <HAL_GetTick>
 800b708:	0003      	movs	r3, r0
 800b70a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800b70c:	e008      	b.n	800b720 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800b70e:	f7fe fbdb 	bl	8009ec8 <HAL_GetTick>
 800b712:	0002      	movs	r2, r0
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d901      	bls.n	800b720 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e111      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800b720:	4b67      	ldr	r3, [pc, #412]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	2202      	movs	r2, #2
 800b726:	4013      	ands	r3, r2
 800b728:	d1f1      	bne.n	800b70e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2220      	movs	r2, #32
 800b730:	4013      	ands	r3, r2
 800b732:	d05c      	beq.n	800b7ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800b734:	4b62      	ldr	r3, [pc, #392]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	220c      	movs	r2, #12
 800b73a:	4013      	ands	r3, r2
 800b73c:	2b0c      	cmp	r3, #12
 800b73e:	d00e      	beq.n	800b75e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800b740:	4b5f      	ldr	r3, [pc, #380]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	220c      	movs	r2, #12
 800b746:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800b748:	2b08      	cmp	r3, #8
 800b74a:	d114      	bne.n	800b776 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800b74c:	4b5c      	ldr	r3, [pc, #368]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	23c0      	movs	r3, #192	; 0xc0
 800b752:	025b      	lsls	r3, r3, #9
 800b754:	401a      	ands	r2, r3
 800b756:	23c0      	movs	r3, #192	; 0xc0
 800b758:	025b      	lsls	r3, r3, #9
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d10b      	bne.n	800b776 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800b75e:	4b58      	ldr	r3, [pc, #352]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b762:	2380      	movs	r3, #128	; 0x80
 800b764:	025b      	lsls	r3, r3, #9
 800b766:	4013      	ands	r3, r2
 800b768:	d040      	beq.n	800b7ec <HAL_RCC_OscConfig+0x5a8>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d03c      	beq.n	800b7ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e0e6      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01b      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800b77e:	4b50      	ldr	r3, [pc, #320]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b782:	4b4f      	ldr	r3, [pc, #316]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b784:	2180      	movs	r1, #128	; 0x80
 800b786:	0249      	lsls	r1, r1, #9
 800b788:	430a      	orrs	r2, r1
 800b78a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b78c:	f7fe fb9c 	bl	8009ec8 <HAL_GetTick>
 800b790:	0003      	movs	r3, r0
 800b792:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800b794:	e008      	b.n	800b7a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b796:	f7fe fb97 	bl	8009ec8 <HAL_GetTick>
 800b79a:	0002      	movs	r2, r0
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d901      	bls.n	800b7a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e0cd      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800b7a8:	4b45      	ldr	r3, [pc, #276]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ac:	2380      	movs	r3, #128	; 0x80
 800b7ae:	025b      	lsls	r3, r3, #9
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	d0f0      	beq.n	800b796 <HAL_RCC_OscConfig+0x552>
 800b7b4:	e01b      	b.n	800b7ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800b7b6:	4b42      	ldr	r3, [pc, #264]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b7b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ba:	4b41      	ldr	r3, [pc, #260]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b7bc:	4943      	ldr	r1, [pc, #268]	; (800b8cc <HAL_RCC_OscConfig+0x688>)
 800b7be:	400a      	ands	r2, r1
 800b7c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7c2:	f7fe fb81 	bl	8009ec8 <HAL_GetTick>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800b7ca:	e008      	b.n	800b7de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7cc:	f7fe fb7c 	bl	8009ec8 <HAL_GetTick>
 800b7d0:	0002      	movs	r2, r0
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d901      	bls.n	800b7de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e0b2      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800b7de:	4b38      	ldr	r3, [pc, #224]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b7e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7e2:	2380      	movs	r3, #128	; 0x80
 800b7e4:	025b      	lsls	r3, r3, #9
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	d1f0      	bne.n	800b7cc <HAL_RCC_OscConfig+0x588>
 800b7ea:	e000      	b.n	800b7ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800b7ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d100      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x5b4>
 800b7f6:	e0a4      	b.n	800b942 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7f8:	4b31      	ldr	r3, [pc, #196]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	220c      	movs	r2, #12
 800b7fe:	4013      	ands	r3, r2
 800b800:	2b08      	cmp	r3, #8
 800b802:	d100      	bne.n	800b806 <HAL_RCC_OscConfig+0x5c2>
 800b804:	e078      	b.n	800b8f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d14c      	bne.n	800b8a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b80e:	4b2c      	ldr	r3, [pc, #176]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4b2b      	ldr	r3, [pc, #172]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b814:	492e      	ldr	r1, [pc, #184]	; (800b8d0 <HAL_RCC_OscConfig+0x68c>)
 800b816:	400a      	ands	r2, r1
 800b818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b81a:	f7fe fb55 	bl	8009ec8 <HAL_GetTick>
 800b81e:	0003      	movs	r3, r0
 800b820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b822:	e008      	b.n	800b836 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b824:	f7fe fb50 	bl	8009ec8 <HAL_GetTick>
 800b828:	0002      	movs	r2, r0
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e086      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b836:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	2380      	movs	r3, #128	; 0x80
 800b83c:	049b      	lsls	r3, r3, #18
 800b83e:	4013      	ands	r3, r2
 800b840:	d1f0      	bne.n	800b824 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b842:	4b1f      	ldr	r3, [pc, #124]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b846:	220f      	movs	r2, #15
 800b848:	4393      	bics	r3, r2
 800b84a:	0019      	movs	r1, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b850:	4b1b      	ldr	r3, [pc, #108]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b852:	430a      	orrs	r2, r1
 800b854:	62da      	str	r2, [r3, #44]	; 0x2c
 800b856:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	4a1e      	ldr	r2, [pc, #120]	; (800b8d4 <HAL_RCC_OscConfig+0x690>)
 800b85c:	4013      	ands	r3, r2
 800b85e:	0019      	movs	r1, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	431a      	orrs	r2, r3
 800b86a:	4b15      	ldr	r3, [pc, #84]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b86c:	430a      	orrs	r2, r1
 800b86e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b870:	4b13      	ldr	r3, [pc, #76]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	4b12      	ldr	r3, [pc, #72]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b876:	2180      	movs	r1, #128	; 0x80
 800b878:	0449      	lsls	r1, r1, #17
 800b87a:	430a      	orrs	r2, r1
 800b87c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b87e:	f7fe fb23 	bl	8009ec8 <HAL_GetTick>
 800b882:	0003      	movs	r3, r0
 800b884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b886:	e008      	b.n	800b89a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b888:	f7fe fb1e 	bl	8009ec8 <HAL_GetTick>
 800b88c:	0002      	movs	r2, r0
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b02      	cmp	r3, #2
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e054      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	2380      	movs	r3, #128	; 0x80
 800b8a0:	049b      	lsls	r3, r3, #18
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	d0f0      	beq.n	800b888 <HAL_RCC_OscConfig+0x644>
 800b8a6:	e04c      	b.n	800b942 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <HAL_RCC_OscConfig+0x67c>)
 800b8ae:	4908      	ldr	r1, [pc, #32]	; (800b8d0 <HAL_RCC_OscConfig+0x68c>)
 800b8b0:	400a      	ands	r2, r1
 800b8b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8b4:	f7fe fb08 	bl	8009ec8 <HAL_GetTick>
 800b8b8:	0003      	movs	r3, r0
 800b8ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8bc:	e015      	b.n	800b8ea <HAL_RCC_OscConfig+0x6a6>
 800b8be:	46c0      	nop			; (mov r8, r8)
 800b8c0:	40021000 	.word	0x40021000
 800b8c4:	00001388 	.word	0x00001388
 800b8c8:	efffffff 	.word	0xefffffff
 800b8cc:	fffeffff 	.word	0xfffeffff
 800b8d0:	feffffff 	.word	0xfeffffff
 800b8d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8d8:	f7fe faf6 	bl	8009ec8 <HAL_GetTick>
 800b8dc:	0002      	movs	r2, r0
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d901      	bls.n	800b8ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e02c      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8ea:	4b18      	ldr	r3, [pc, #96]	; (800b94c <HAL_RCC_OscConfig+0x708>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	2380      	movs	r3, #128	; 0x80
 800b8f0:	049b      	lsls	r3, r3, #18
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	d1f0      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x694>
 800b8f6:	e024      	b.n	800b942 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d101      	bne.n	800b904 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e01f      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800b904:	4b11      	ldr	r3, [pc, #68]	; (800b94c <HAL_RCC_OscConfig+0x708>)
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800b90a:	4b10      	ldr	r3, [pc, #64]	; (800b94c <HAL_RCC_OscConfig+0x708>)
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	23c0      	movs	r3, #192	; 0xc0
 800b914:	025b      	lsls	r3, r3, #9
 800b916:	401a      	ands	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d10e      	bne.n	800b93e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	220f      	movs	r2, #15
 800b924:	401a      	ands	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d107      	bne.n	800b93e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	23f0      	movs	r3, #240	; 0xf0
 800b932:	039b      	lsls	r3, r3, #14
 800b934:	401a      	ands	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d001      	beq.n	800b942 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	0018      	movs	r0, r3
 800b946:	46bd      	mov	sp, r7
 800b948:	b008      	add	sp, #32
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40021000 	.word	0x40021000

0800b950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e0bf      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b964:	4b61      	ldr	r3, [pc, #388]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2201      	movs	r2, #1
 800b96a:	4013      	ands	r3, r2
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d911      	bls.n	800b996 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b972:	4b5e      	ldr	r3, [pc, #376]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2201      	movs	r2, #1
 800b978:	4393      	bics	r3, r2
 800b97a:	0019      	movs	r1, r3
 800b97c:	4b5b      	ldr	r3, [pc, #364]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b984:	4b59      	ldr	r3, [pc, #356]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2201      	movs	r2, #1
 800b98a:	4013      	ands	r3, r2
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d001      	beq.n	800b996 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e0a6      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2202      	movs	r2, #2
 800b99c:	4013      	ands	r3, r2
 800b99e:	d015      	beq.n	800b9cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2204      	movs	r2, #4
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	d006      	beq.n	800b9b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b9aa:	4b51      	ldr	r3, [pc, #324]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	4b50      	ldr	r3, [pc, #320]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800b9b0:	21e0      	movs	r1, #224	; 0xe0
 800b9b2:	00c9      	lsls	r1, r1, #3
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9b8:	4b4d      	ldr	r3, [pc, #308]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	22f0      	movs	r2, #240	; 0xf0
 800b9be:	4393      	bics	r3, r2
 800b9c0:	0019      	movs	r1, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	4b4a      	ldr	r3, [pc, #296]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	d04c      	beq.n	800ba70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d107      	bne.n	800b9ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9de:	4b44      	ldr	r3, [pc, #272]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	2380      	movs	r3, #128	; 0x80
 800b9e4:	029b      	lsls	r3, r3, #10
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	d120      	bne.n	800ba2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e07a      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d107      	bne.n	800ba06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9f6:	4b3e      	ldr	r3, [pc, #248]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	2380      	movs	r3, #128	; 0x80
 800b9fc:	049b      	lsls	r3, r3, #18
 800b9fe:	4013      	ands	r3, r2
 800ba00:	d114      	bne.n	800ba2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e06e      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d107      	bne.n	800ba1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800ba0e:	4b38      	ldr	r3, [pc, #224]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800ba10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba12:	2380      	movs	r3, #128	; 0x80
 800ba14:	025b      	lsls	r3, r3, #9
 800ba16:	4013      	ands	r3, r2
 800ba18:	d108      	bne.n	800ba2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e062      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba1e:	4b34      	ldr	r3, [pc, #208]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2202      	movs	r2, #2
 800ba24:	4013      	ands	r3, r2
 800ba26:	d101      	bne.n	800ba2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e05b      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ba2c:	4b30      	ldr	r3, [pc, #192]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	2203      	movs	r2, #3
 800ba32:	4393      	bics	r3, r2
 800ba34:	0019      	movs	r1, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	685a      	ldr	r2, [r3, #4]
 800ba3a:	4b2d      	ldr	r3, [pc, #180]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ba40:	f7fe fa42 	bl	8009ec8 <HAL_GetTick>
 800ba44:	0003      	movs	r3, r0
 800ba46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba48:	e009      	b.n	800ba5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba4a:	f7fe fa3d 	bl	8009ec8 <HAL_GetTick>
 800ba4e:	0002      	movs	r2, r0
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	4a27      	ldr	r2, [pc, #156]	; (800baf4 <HAL_RCC_ClockConfig+0x1a4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d901      	bls.n	800ba5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e042      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba5e:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	220c      	movs	r2, #12
 800ba64:	401a      	ands	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d1ec      	bne.n	800ba4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba70:	4b1e      	ldr	r3, [pc, #120]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2201      	movs	r2, #1
 800ba76:	4013      	ands	r3, r2
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d211      	bcs.n	800baa2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba7e:	4b1b      	ldr	r3, [pc, #108]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2201      	movs	r2, #1
 800ba84:	4393      	bics	r3, r2
 800ba86:	0019      	movs	r1, r3
 800ba88:	4b18      	ldr	r3, [pc, #96]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba90:	4b16      	ldr	r3, [pc, #88]	; (800baec <HAL_RCC_ClockConfig+0x19c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2201      	movs	r2, #1
 800ba96:	4013      	ands	r3, r2
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d001      	beq.n	800baa2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e020      	b.n	800bae4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2204      	movs	r2, #4
 800baa8:	4013      	ands	r3, r2
 800baaa:	d009      	beq.n	800bac0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800baac:	4b10      	ldr	r3, [pc, #64]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	4a11      	ldr	r2, [pc, #68]	; (800baf8 <HAL_RCC_ClockConfig+0x1a8>)
 800bab2:	4013      	ands	r3, r2
 800bab4:	0019      	movs	r1, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68da      	ldr	r2, [r3, #12]
 800baba:	4b0d      	ldr	r3, [pc, #52]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800babc:	430a      	orrs	r2, r1
 800babe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800bac0:	f000 f820 	bl	800bb04 <HAL_RCC_GetSysClockFreq>
 800bac4:	0001      	movs	r1, r0
 800bac6:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <HAL_RCC_ClockConfig+0x1a0>)
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	091b      	lsrs	r3, r3, #4
 800bacc:	220f      	movs	r2, #15
 800bace:	4013      	ands	r3, r2
 800bad0:	4a0a      	ldr	r2, [pc, #40]	; (800bafc <HAL_RCC_ClockConfig+0x1ac>)
 800bad2:	5cd3      	ldrb	r3, [r2, r3]
 800bad4:	000a      	movs	r2, r1
 800bad6:	40da      	lsrs	r2, r3
 800bad8:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <HAL_RCC_ClockConfig+0x1b0>)
 800bada:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800badc:	2000      	movs	r0, #0
 800bade:	f7fe f9ad 	bl	8009e3c <HAL_InitTick>
  
  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	0018      	movs	r0, r3
 800bae6:	46bd      	mov	sp, r7
 800bae8:	b004      	add	sp, #16
 800baea:	bd80      	pop	{r7, pc}
 800baec:	40022000 	.word	0x40022000
 800baf0:	40021000 	.word	0x40021000
 800baf4:	00001388 	.word	0x00001388
 800baf8:	fffff8ff 	.word	0xfffff8ff
 800bafc:	0800c214 	.word	0x0800c214
 800bb00:	20000400 	.word	0x20000400

0800bb04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb04:	b590      	push	{r4, r7, lr}
 800bb06:	b08f      	sub	sp, #60	; 0x3c
 800bb08:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800bb0a:	2314      	movs	r3, #20
 800bb0c:	18fb      	adds	r3, r7, r3
 800bb0e:	4a38      	ldr	r2, [pc, #224]	; (800bbf0 <HAL_RCC_GetSysClockFreq+0xec>)
 800bb10:	ca13      	ldmia	r2!, {r0, r1, r4}
 800bb12:	c313      	stmia	r3!, {r0, r1, r4}
 800bb14:	6812      	ldr	r2, [r2, #0]
 800bb16:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800bb18:	1d3b      	adds	r3, r7, #4
 800bb1a:	4a36      	ldr	r2, [pc, #216]	; (800bbf4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800bb1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800bb1e:	c313      	stmia	r3!, {r0, r1, r4}
 800bb20:	6812      	ldr	r2, [r2, #0]
 800bb22:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bb24:	2300      	movs	r3, #0
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb28:	2300      	movs	r3, #0
 800bb2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb30:	2300      	movs	r3, #0
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800bb34:	2300      	movs	r3, #0
 800bb36:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800bb38:	4b2f      	ldr	r3, [pc, #188]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	220c      	movs	r2, #12
 800bb42:	4013      	ands	r3, r2
 800bb44:	2b0c      	cmp	r3, #12
 800bb46:	d047      	beq.n	800bbd8 <HAL_RCC_GetSysClockFreq+0xd4>
 800bb48:	d849      	bhi.n	800bbde <HAL_RCC_GetSysClockFreq+0xda>
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d002      	beq.n	800bb54 <HAL_RCC_GetSysClockFreq+0x50>
 800bb4e:	2b08      	cmp	r3, #8
 800bb50:	d003      	beq.n	800bb5a <HAL_RCC_GetSysClockFreq+0x56>
 800bb52:	e044      	b.n	800bbde <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bb54:	4b29      	ldr	r3, [pc, #164]	; (800bbfc <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800bb58:	e044      	b.n	800bbe4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	0c9b      	lsrs	r3, r3, #18
 800bb5e:	220f      	movs	r2, #15
 800bb60:	4013      	ands	r3, r2
 800bb62:	2214      	movs	r2, #20
 800bb64:	18ba      	adds	r2, r7, r2
 800bb66:	5cd3      	ldrb	r3, [r2, r3]
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800bb6a:	4b23      	ldr	r3, [pc, #140]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800bb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6e:	220f      	movs	r2, #15
 800bb70:	4013      	ands	r3, r2
 800bb72:	1d3a      	adds	r2, r7, #4
 800bb74:	5cd3      	ldrb	r3, [r2, r3]
 800bb76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800bb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb7a:	23c0      	movs	r3, #192	; 0xc0
 800bb7c:	025b      	lsls	r3, r3, #9
 800bb7e:	401a      	ands	r2, r3
 800bb80:	2380      	movs	r3, #128	; 0x80
 800bb82:	025b      	lsls	r3, r3, #9
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d109      	bne.n	800bb9c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800bb88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb8a:	481c      	ldr	r0, [pc, #112]	; (800bbfc <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb8c:	f7fc faba 	bl	8008104 <__udivsi3>
 800bb90:	0003      	movs	r3, r0
 800bb92:	001a      	movs	r2, r3
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	4353      	muls	r3, r2
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
 800bb9a:	e01a      	b.n	800bbd2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800bb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9e:	23c0      	movs	r3, #192	; 0xc0
 800bba0:	025b      	lsls	r3, r3, #9
 800bba2:	401a      	ands	r2, r3
 800bba4:	23c0      	movs	r3, #192	; 0xc0
 800bba6:	025b      	lsls	r3, r3, #9
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d109      	bne.n	800bbc0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800bbac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbae:	4814      	ldr	r0, [pc, #80]	; (800bc00 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bbb0:	f7fc faa8 	bl	8008104 <__udivsi3>
 800bbb4:	0003      	movs	r3, r0
 800bbb6:	001a      	movs	r2, r3
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	4353      	muls	r3, r2
 800bbbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800bbc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbc2:	480e      	ldr	r0, [pc, #56]	; (800bbfc <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbc4:	f7fc fa9e 	bl	8008104 <__udivsi3>
 800bbc8:	0003      	movs	r3, r0
 800bbca:	001a      	movs	r2, r3
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	4353      	muls	r3, r2
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800bbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800bbd6:	e005      	b.n	800bbe4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800bbd8:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bbda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800bbdc:	e002      	b.n	800bbe4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bbde:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbe0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800bbe2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b00f      	add	sp, #60	; 0x3c
 800bbec:	bd90      	pop	{r4, r7, pc}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	0800c1b4 	.word	0x0800c1b4
 800bbf4:	0800c1c4 	.word	0x0800c1c4
 800bbf8:	40021000 	.word	0x40021000
 800bbfc:	007a1200 	.word	0x007a1200
 800bc00:	02dc6c00 	.word	0x02dc6c00

0800bc04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e042      	b.n	800bc9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	223d      	movs	r2, #61	; 0x3d
 800bc1a:	5c9b      	ldrb	r3, [r3, r2]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d107      	bne.n	800bc32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	223c      	movs	r2, #60	; 0x3c
 800bc26:	2100      	movs	r1, #0
 800bc28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f7fe f8a7 	bl	8009d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	223d      	movs	r2, #61	; 0x3d
 800bc36:	2102      	movs	r1, #2
 800bc38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3304      	adds	r3, #4
 800bc42:	0019      	movs	r1, r3
 800bc44:	0010      	movs	r0, r2
 800bc46:	f000 f901 	bl	800be4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2246      	movs	r2, #70	; 0x46
 800bc4e:	2101      	movs	r1, #1
 800bc50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	223e      	movs	r2, #62	; 0x3e
 800bc56:	2101      	movs	r1, #1
 800bc58:	5499      	strb	r1, [r3, r2]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	223f      	movs	r2, #63	; 0x3f
 800bc5e:	2101      	movs	r1, #1
 800bc60:	5499      	strb	r1, [r3, r2]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2240      	movs	r2, #64	; 0x40
 800bc66:	2101      	movs	r1, #1
 800bc68:	5499      	strb	r1, [r3, r2]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2241      	movs	r2, #65	; 0x41
 800bc6e:	2101      	movs	r1, #1
 800bc70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2242      	movs	r2, #66	; 0x42
 800bc76:	2101      	movs	r1, #1
 800bc78:	5499      	strb	r1, [r3, r2]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2243      	movs	r2, #67	; 0x43
 800bc7e:	2101      	movs	r1, #1
 800bc80:	5499      	strb	r1, [r3, r2]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2244      	movs	r2, #68	; 0x44
 800bc86:	2101      	movs	r1, #1
 800bc88:	5499      	strb	r1, [r3, r2]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2245      	movs	r2, #69	; 0x45
 800bc8e:	2101      	movs	r1, #1
 800bc90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	223d      	movs	r2, #61	; 0x3d
 800bc96:	2101      	movs	r1, #1
 800bc98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	b002      	add	sp, #8
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcae:	230f      	movs	r3, #15
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	223c      	movs	r2, #60	; 0x3c
 800bcba:	5c9b      	ldrb	r3, [r3, r2]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d101      	bne.n	800bcc4 <HAL_TIM_ConfigClockSource+0x20>
 800bcc0:	2302      	movs	r3, #2
 800bcc2:	e0bc      	b.n	800be3e <HAL_TIM_ConfigClockSource+0x19a>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	223c      	movs	r2, #60	; 0x3c
 800bcc8:	2101      	movs	r1, #1
 800bcca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	223d      	movs	r2, #61	; 0x3d
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2277      	movs	r2, #119	; 0x77
 800bce0:	4393      	bics	r3, r2
 800bce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	4a58      	ldr	r2, [pc, #352]	; (800be48 <HAL_TIM_ConfigClockSource+0x1a4>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2280      	movs	r2, #128	; 0x80
 800bcfa:	0192      	lsls	r2, r2, #6
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d040      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0xde>
 800bd00:	2280      	movs	r2, #128	; 0x80
 800bd02:	0192      	lsls	r2, r2, #6
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d900      	bls.n	800bd0a <HAL_TIM_ConfigClockSource+0x66>
 800bd08:	e088      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd0a:	2280      	movs	r2, #128	; 0x80
 800bd0c:	0152      	lsls	r2, r2, #5
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d100      	bne.n	800bd14 <HAL_TIM_ConfigClockSource+0x70>
 800bd12:	e088      	b.n	800be26 <HAL_TIM_ConfigClockSource+0x182>
 800bd14:	2280      	movs	r2, #128	; 0x80
 800bd16:	0152      	lsls	r2, r2, #5
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d900      	bls.n	800bd1e <HAL_TIM_ConfigClockSource+0x7a>
 800bd1c:	e07e      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd1e:	2b70      	cmp	r3, #112	; 0x70
 800bd20:	d018      	beq.n	800bd54 <HAL_TIM_ConfigClockSource+0xb0>
 800bd22:	d900      	bls.n	800bd26 <HAL_TIM_ConfigClockSource+0x82>
 800bd24:	e07a      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd26:	2b60      	cmp	r3, #96	; 0x60
 800bd28:	d04f      	beq.n	800bdca <HAL_TIM_ConfigClockSource+0x126>
 800bd2a:	d900      	bls.n	800bd2e <HAL_TIM_ConfigClockSource+0x8a>
 800bd2c:	e076      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd2e:	2b50      	cmp	r3, #80	; 0x50
 800bd30:	d03b      	beq.n	800bdaa <HAL_TIM_ConfigClockSource+0x106>
 800bd32:	d900      	bls.n	800bd36 <HAL_TIM_ConfigClockSource+0x92>
 800bd34:	e072      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd36:	2b40      	cmp	r3, #64	; 0x40
 800bd38:	d057      	beq.n	800bdea <HAL_TIM_ConfigClockSource+0x146>
 800bd3a:	d900      	bls.n	800bd3e <HAL_TIM_ConfigClockSource+0x9a>
 800bd3c:	e06e      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd3e:	2b30      	cmp	r3, #48	; 0x30
 800bd40:	d063      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x166>
 800bd42:	d86b      	bhi.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd44:	2b20      	cmp	r3, #32
 800bd46:	d060      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x166>
 800bd48:	d868      	bhi.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d05d      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x166>
 800bd4e:	2b10      	cmp	r3, #16
 800bd50:	d05b      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x166>
 800bd52:	e063      	b.n	800be1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	6899      	ldr	r1, [r3, #8]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	f000 f96c 	bl	800c040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2277      	movs	r2, #119	; 0x77
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	609a      	str	r2, [r3, #8]
      break;
 800bd80:	e052      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	6899      	ldr	r1, [r3, #8]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	f000 f955 	bl	800c040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	689a      	ldr	r2, [r3, #8]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2180      	movs	r1, #128	; 0x80
 800bda2:	01c9      	lsls	r1, r1, #7
 800bda4:	430a      	orrs	r2, r1
 800bda6:	609a      	str	r2, [r3, #8]
      break;
 800bda8:	e03e      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	6859      	ldr	r1, [r3, #4]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	001a      	movs	r2, r3
 800bdb8:	f000 f8c8 	bl	800bf4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2150      	movs	r1, #80	; 0x50
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f000 f922 	bl	800c00c <TIM_ITRx_SetConfig>
      break;
 800bdc8:	e02e      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	6859      	ldr	r1, [r3, #4]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	001a      	movs	r2, r3
 800bdd8:	f000 f8e6 	bl	800bfa8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2160      	movs	r1, #96	; 0x60
 800bde2:	0018      	movs	r0, r3
 800bde4:	f000 f912 	bl	800c00c <TIM_ITRx_SetConfig>
      break;
 800bde8:	e01e      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6859      	ldr	r1, [r3, #4]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	001a      	movs	r2, r3
 800bdf8:	f000 f8a8 	bl	800bf4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2140      	movs	r1, #64	; 0x40
 800be02:	0018      	movs	r0, r3
 800be04:	f000 f902 	bl	800c00c <TIM_ITRx_SetConfig>
      break;
 800be08:	e00e      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	0019      	movs	r1, r3
 800be14:	0010      	movs	r0, r2
 800be16:	f000 f8f9 	bl	800c00c <TIM_ITRx_SetConfig>
      break;
 800be1a:	e005      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800be1c:	230f      	movs	r3, #15
 800be1e:	18fb      	adds	r3, r7, r3
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
      break;
 800be24:	e000      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800be26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	223d      	movs	r2, #61	; 0x3d
 800be2c:	2101      	movs	r1, #1
 800be2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	223c      	movs	r2, #60	; 0x3c
 800be34:	2100      	movs	r1, #0
 800be36:	5499      	strb	r1, [r3, r2]

  return status;
 800be38:	230f      	movs	r3, #15
 800be3a:	18fb      	adds	r3, r7, r3
 800be3c:	781b      	ldrb	r3, [r3, #0]
}
 800be3e:	0018      	movs	r0, r3
 800be40:	46bd      	mov	sp, r7
 800be42:	b004      	add	sp, #16
 800be44:	bd80      	pop	{r7, pc}
 800be46:	46c0      	nop			; (mov r8, r8)
 800be48:	ffff00ff 	.word	0xffff00ff

0800be4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a34      	ldr	r2, [pc, #208]	; (800bf30 <TIM_Base_SetConfig+0xe4>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d008      	beq.n	800be76 <TIM_Base_SetConfig+0x2a>
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	2380      	movs	r3, #128	; 0x80
 800be68:	05db      	lsls	r3, r3, #23
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d003      	beq.n	800be76 <TIM_Base_SetConfig+0x2a>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a30      	ldr	r2, [pc, #192]	; (800bf34 <TIM_Base_SetConfig+0xe8>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d108      	bne.n	800be88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2270      	movs	r2, #112	; 0x70
 800be7a:	4393      	bics	r3, r2
 800be7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	4313      	orrs	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a29      	ldr	r2, [pc, #164]	; (800bf30 <TIM_Base_SetConfig+0xe4>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d018      	beq.n	800bec2 <TIM_Base_SetConfig+0x76>
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	2380      	movs	r3, #128	; 0x80
 800be94:	05db      	lsls	r3, r3, #23
 800be96:	429a      	cmp	r2, r3
 800be98:	d013      	beq.n	800bec2 <TIM_Base_SetConfig+0x76>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a25      	ldr	r2, [pc, #148]	; (800bf34 <TIM_Base_SetConfig+0xe8>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d00f      	beq.n	800bec2 <TIM_Base_SetConfig+0x76>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a24      	ldr	r2, [pc, #144]	; (800bf38 <TIM_Base_SetConfig+0xec>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d00b      	beq.n	800bec2 <TIM_Base_SetConfig+0x76>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a23      	ldr	r2, [pc, #140]	; (800bf3c <TIM_Base_SetConfig+0xf0>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d007      	beq.n	800bec2 <TIM_Base_SetConfig+0x76>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a22      	ldr	r2, [pc, #136]	; (800bf40 <TIM_Base_SetConfig+0xf4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d003      	beq.n	800bec2 <TIM_Base_SetConfig+0x76>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a21      	ldr	r2, [pc, #132]	; (800bf44 <TIM_Base_SetConfig+0xf8>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d108      	bne.n	800bed4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4a20      	ldr	r2, [pc, #128]	; (800bf48 <TIM_Base_SetConfig+0xfc>)
 800bec6:	4013      	ands	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2280      	movs	r2, #128	; 0x80
 800bed8:	4393      	bics	r3, r2
 800beda:	001a      	movs	r2, r3
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	689a      	ldr	r2, [r3, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a0c      	ldr	r2, [pc, #48]	; (800bf30 <TIM_Base_SetConfig+0xe4>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d00b      	beq.n	800bf1a <TIM_Base_SetConfig+0xce>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a0d      	ldr	r2, [pc, #52]	; (800bf3c <TIM_Base_SetConfig+0xf0>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d007      	beq.n	800bf1a <TIM_Base_SetConfig+0xce>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a0c      	ldr	r2, [pc, #48]	; (800bf40 <TIM_Base_SetConfig+0xf4>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d003      	beq.n	800bf1a <TIM_Base_SetConfig+0xce>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a0b      	ldr	r2, [pc, #44]	; (800bf44 <TIM_Base_SetConfig+0xf8>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d103      	bne.n	800bf22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	691a      	ldr	r2, [r3, #16]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	615a      	str	r2, [r3, #20]
}
 800bf28:	46c0      	nop			; (mov r8, r8)
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	b004      	add	sp, #16
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40012c00 	.word	0x40012c00
 800bf34:	40000400 	.word	0x40000400
 800bf38:	40002000 	.word	0x40002000
 800bf3c:	40014000 	.word	0x40014000
 800bf40:	40014400 	.word	0x40014400
 800bf44:	40014800 	.word	0x40014800
 800bf48:	fffffcff 	.word	0xfffffcff

0800bf4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6a1b      	ldr	r3, [r3, #32]
 800bf5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	2201      	movs	r2, #1
 800bf64:	4393      	bics	r3, r2
 800bf66:	001a      	movs	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	22f0      	movs	r2, #240	; 0xf0
 800bf76:	4393      	bics	r3, r2
 800bf78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	011b      	lsls	r3, r3, #4
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	220a      	movs	r2, #10
 800bf88:	4393      	bics	r3, r2
 800bf8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	621a      	str	r2, [r3, #32]
}
 800bfa0:	46c0      	nop			; (mov r8, r8)
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	b006      	add	sp, #24
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	2210      	movs	r2, #16
 800bfba:	4393      	bics	r3, r2
 800bfbc:	001a      	movs	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	4a0d      	ldr	r2, [pc, #52]	; (800c008 <TIM_TI2_ConfigInputStage+0x60>)
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	031b      	lsls	r3, r3, #12
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	22a0      	movs	r2, #160	; 0xa0
 800bfe4:	4393      	bics	r3, r2
 800bfe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	011b      	lsls	r3, r3, #4
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	621a      	str	r2, [r3, #32]
}
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	46bd      	mov	sp, r7
 800c002:	b006      	add	sp, #24
 800c004:	bd80      	pop	{r7, pc}
 800c006:	46c0      	nop			; (mov r8, r8)
 800c008:	ffff0fff 	.word	0xffff0fff

0800c00c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2270      	movs	r2, #112	; 0x70
 800c020:	4393      	bics	r3, r2
 800c022:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	4313      	orrs	r3, r2
 800c02a:	2207      	movs	r2, #7
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	609a      	str	r2, [r3, #8]
}
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	46bd      	mov	sp, r7
 800c03a:	b004      	add	sp, #16
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	4a09      	ldr	r2, [pc, #36]	; (800c07c <TIM_ETR_SetConfig+0x3c>)
 800c058:	4013      	ands	r3, r2
 800c05a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	021a      	lsls	r2, r3, #8
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	431a      	orrs	r2, r3
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	4313      	orrs	r3, r2
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	609a      	str	r2, [r3, #8]
}
 800c074:	46c0      	nop			; (mov r8, r8)
 800c076:	46bd      	mov	sp, r7
 800c078:	b006      	add	sp, #24
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	ffff00ff 	.word	0xffff00ff

0800c080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	223c      	movs	r2, #60	; 0x3c
 800c08e:	5c9b      	ldrb	r3, [r3, r2]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d101      	bne.n	800c098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c094:	2302      	movs	r3, #2
 800c096:	e047      	b.n	800c128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	223c      	movs	r2, #60	; 0x3c
 800c09c:	2101      	movs	r1, #1
 800c09e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	223d      	movs	r2, #61	; 0x3d
 800c0a4:	2102      	movs	r1, #2
 800c0a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2270      	movs	r2, #112	; 0x70
 800c0bc:	4393      	bics	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a16      	ldr	r2, [pc, #88]	; (800c130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00f      	beq.n	800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	2380      	movs	r3, #128	; 0x80
 800c0e2:	05db      	lsls	r3, r3, #23
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d009      	beq.n	800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a11      	ldr	r2, [pc, #68]	; (800c134 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d004      	beq.n	800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a10      	ldr	r2, [pc, #64]	; (800c138 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d10c      	bne.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2280      	movs	r2, #128	; 0x80
 800c100:	4393      	bics	r3, r2
 800c102:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	223d      	movs	r2, #61	; 0x3d
 800c11a:	2101      	movs	r1, #1
 800c11c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	223c      	movs	r2, #60	; 0x3c
 800c122:	2100      	movs	r1, #0
 800c124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	0018      	movs	r0, r3
 800c12a:	46bd      	mov	sp, r7
 800c12c:	b004      	add	sp, #16
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	40012c00 	.word	0x40012c00
 800c134:	40000400 	.word	0x40000400
 800c138:	40014000 	.word	0x40014000

0800c13c <__libc_init_array>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	2600      	movs	r6, #0
 800c140:	4d0c      	ldr	r5, [pc, #48]	; (800c174 <__libc_init_array+0x38>)
 800c142:	4c0d      	ldr	r4, [pc, #52]	; (800c178 <__libc_init_array+0x3c>)
 800c144:	1b64      	subs	r4, r4, r5
 800c146:	10a4      	asrs	r4, r4, #2
 800c148:	42a6      	cmp	r6, r4
 800c14a:	d109      	bne.n	800c160 <__libc_init_array+0x24>
 800c14c:	2600      	movs	r6, #0
 800c14e:	f000 f821 	bl	800c194 <_init>
 800c152:	4d0a      	ldr	r5, [pc, #40]	; (800c17c <__libc_init_array+0x40>)
 800c154:	4c0a      	ldr	r4, [pc, #40]	; (800c180 <__libc_init_array+0x44>)
 800c156:	1b64      	subs	r4, r4, r5
 800c158:	10a4      	asrs	r4, r4, #2
 800c15a:	42a6      	cmp	r6, r4
 800c15c:	d105      	bne.n	800c16a <__libc_init_array+0x2e>
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	00b3      	lsls	r3, r6, #2
 800c162:	58eb      	ldr	r3, [r5, r3]
 800c164:	4798      	blx	r3
 800c166:	3601      	adds	r6, #1
 800c168:	e7ee      	b.n	800c148 <__libc_init_array+0xc>
 800c16a:	00b3      	lsls	r3, r6, #2
 800c16c:	58eb      	ldr	r3, [r5, r3]
 800c16e:	4798      	blx	r3
 800c170:	3601      	adds	r6, #1
 800c172:	e7f2      	b.n	800c15a <__libc_init_array+0x1e>
 800c174:	0800c224 	.word	0x0800c224
 800c178:	0800c224 	.word	0x0800c224
 800c17c:	0800c224 	.word	0x0800c224
 800c180:	0800c228 	.word	0x0800c228

0800c184 <memset>:
 800c184:	0003      	movs	r3, r0
 800c186:	1882      	adds	r2, r0, r2
 800c188:	4293      	cmp	r3, r2
 800c18a:	d100      	bne.n	800c18e <memset+0xa>
 800c18c:	4770      	bx	lr
 800c18e:	7019      	strb	r1, [r3, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	e7f9      	b.n	800c188 <memset+0x4>

0800c194 <_init>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19a:	bc08      	pop	{r3}
 800c19c:	469e      	mov	lr, r3
 800c19e:	4770      	bx	lr

0800c1a0 <_fini>:
 800c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a2:	46c0      	nop			; (mov r8, r8)
 800c1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a6:	bc08      	pop	{r3}
 800c1a8:	469e      	mov	lr, r3
 800c1aa:	4770      	bx	lr
